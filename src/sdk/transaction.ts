/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingCreateAccountingTransaction } from "../funcs/accountingCreateAccountingTransaction.js";
import { accountingGetAccountingTransaction } from "../funcs/accountingGetAccountingTransaction.js";
import { accountingListAccountingTransactions } from "../funcs/accountingListAccountingTransactions.js";
import { accountingPatchAccountingTransaction } from "../funcs/accountingPatchAccountingTransaction.js";
import { accountingRemoveAccountingTransaction } from "../funcs/accountingRemoveAccountingTransaction.js";
import { accountingUpdateAccountingTransaction } from "../funcs/accountingUpdateAccountingTransaction.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Transaction extends ClientSDK {
  /**
   * Create a transaction
   */
  async createAccountingTransaction(
    request: operations.CreateAccountingTransactionRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTransaction> {
    return unwrapAsync(accountingCreateAccountingTransaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a transaction
   */
  async getAccountingTransaction(
    request: operations.GetAccountingTransactionRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTransaction> {
    return unwrapAsync(accountingGetAccountingTransaction(
      this,
      request,
      options,
    ));
  }

  /**
   * List all transactions
   */
  async listAccountingTransactions(
    request: operations.ListAccountingTransactionsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingTransaction>> {
    return unwrapAsync(accountingListAccountingTransactions(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a transaction
   */
  async patchAccountingTransaction(
    request: operations.PatchAccountingTransactionRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTransaction> {
    return unwrapAsync(accountingPatchAccountingTransaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a transaction
   */
  async removeAccountingTransaction(
    request: operations.RemoveAccountingTransactionRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingTransactionResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingTransaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a transaction
   */
  async updateAccountingTransaction(
    request: operations.UpdateAccountingTransactionRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTransaction> {
    return unwrapAsync(accountingUpdateAccountingTransaction(
      this,
      request,
      options,
    ));
  }
}
