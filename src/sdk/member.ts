/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { memberCreateMartechMember } from "../funcs/memberCreateMartechMember.js";
import { memberGetMartechMember } from "../funcs/memberGetMartechMember.js";
import { memberListMartechMembers } from "../funcs/memberListMartechMembers.js";
import { memberPatchMartechMember } from "../funcs/memberPatchMartechMember.js";
import { memberRemoveMartechMember } from "../funcs/memberRemoveMartechMember.js";
import { memberUpdateMartechMember } from "../funcs/memberUpdateMartechMember.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Member extends ClientSDK {
    /**
     * Create a member
     */
    async createMartechMember(
        request: operations.CreateMartechMemberRequest,
        options?: RequestOptions
    ): Promise<shared.MarketingMember> {
        return unwrapAsync(memberCreateMartechMember(this, request, options));
    }

    /**
     * Retrieve a member
     */
    async getMartechMember(
        request: operations.GetMartechMemberRequest,
        options?: RequestOptions
    ): Promise<shared.MarketingMember> {
        return unwrapAsync(memberGetMartechMember(this, request, options));
    }

    /**
     * List all members
     */
    async listMartechMembers(
        request: operations.ListMartechMembersRequest,
        options?: RequestOptions
    ): Promise<Array<shared.MarketingMember>> {
        return unwrapAsync(memberListMartechMembers(this, request, options));
    }

    /**
     * Update a member
     */
    async patchMartechMember(
        request: operations.PatchMartechMemberRequest,
        options?: RequestOptions
    ): Promise<shared.MarketingMember> {
        return unwrapAsync(memberPatchMartechMember(this, request, options));
    }

    /**
     * Remove a member
     */
    async removeMartechMember(
        request: operations.RemoveMartechMemberRequest,
        options?: RequestOptions
    ): Promise<string> {
        return unwrapAsync(memberRemoveMartechMember(this, request, options));
    }

    /**
     * Update a member
     */
    async updateMartechMember(
        request: operations.UpdateMartechMemberRequest,
        options?: RequestOptions
    ): Promise<shared.MarketingMember> {
        return unwrapAsync(memberUpdateMartechMember(this, request, options));
    }
}
