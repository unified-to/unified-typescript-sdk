/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationCreateRepoOrganization } from "../funcs/organizationCreateRepoOrganization.js";
import { organizationGetRepoOrganization } from "../funcs/organizationGetRepoOrganization.js";
import { organizationListRepoOrganizations } from "../funcs/organizationListRepoOrganizations.js";
import { organizationPatchRepoOrganization } from "../funcs/organizationPatchRepoOrganization.js";
import { organizationRemoveRepoOrganization } from "../funcs/organizationRemoveRepoOrganization.js";
import { organizationUpdateRepoOrganization } from "../funcs/organizationUpdateRepoOrganization.js";
import { repoCreateRepoBranch } from "../funcs/repoCreateRepoBranch.js";
import { repoCreateRepoCommit } from "../funcs/repoCreateRepoCommit.js";
import { repoCreateRepoPullrequest } from "../funcs/repoCreateRepoPullrequest.js";
import { repoCreateRepoRepository } from "../funcs/repoCreateRepoRepository.js";
import { repoGetRepoBranch } from "../funcs/repoGetRepoBranch.js";
import { repoGetRepoCommit } from "../funcs/repoGetRepoCommit.js";
import { repoGetRepoPullrequest } from "../funcs/repoGetRepoPullrequest.js";
import { repoGetRepoRepository } from "../funcs/repoGetRepoRepository.js";
import { repoListRepoBranches } from "../funcs/repoListRepoBranches.js";
import { repoListRepoCommits } from "../funcs/repoListRepoCommits.js";
import { repoListRepoPullrequests } from "../funcs/repoListRepoPullrequests.js";
import { repoListRepoRepositories } from "../funcs/repoListRepoRepositories.js";
import { repoPatchRepoBranch } from "../funcs/repoPatchRepoBranch.js";
import { repoPatchRepoCommit } from "../funcs/repoPatchRepoCommit.js";
import { repoPatchRepoPullrequest } from "../funcs/repoPatchRepoPullrequest.js";
import { repoPatchRepoRepository } from "../funcs/repoPatchRepoRepository.js";
import { repoRemoveRepoBranch } from "../funcs/repoRemoveRepoBranch.js";
import { repoRemoveRepoCommit } from "../funcs/repoRemoveRepoCommit.js";
import { repoRemoveRepoPullrequest } from "../funcs/repoRemoveRepoPullrequest.js";
import { repoRemoveRepoRepository } from "../funcs/repoRemoveRepoRepository.js";
import { repoUpdateRepoBranch } from "../funcs/repoUpdateRepoBranch.js";
import { repoUpdateRepoCommit } from "../funcs/repoUpdateRepoCommit.js";
import { repoUpdateRepoPullrequest } from "../funcs/repoUpdateRepoPullrequest.js";
import { repoUpdateRepoRepository } from "../funcs/repoUpdateRepoRepository.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Repo extends ClientSDK {
  /**
   * Create a branch
   */
  async createRepoBranch(
    request: operations.CreateRepoBranchRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoBranch> {
    return unwrapAsync(repoCreateRepoBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a commit
   */
  async createRepoCommit(
    request: operations.CreateRepoCommitRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoCommit> {
    return unwrapAsync(repoCreateRepoCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an organization
   */
  async createRepoOrganization(
    request: operations.CreateRepoOrganizationRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoOrganization> {
    return unwrapAsync(organizationCreateRepoOrganization(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a pullrequest
   */
  async createRepoPullrequest(
    request: operations.CreateRepoPullrequestRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoPullrequest> {
    return unwrapAsync(repoCreateRepoPullrequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a repository
   */
  async createRepoRepository(
    request: operations.CreateRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoRepository> {
    return unwrapAsync(repoCreateRepoRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a branch
   */
  async getRepoBranch(
    request: operations.GetRepoBranchRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoBranch> {
    return unwrapAsync(repoGetRepoBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a commit
   */
  async getRepoCommit(
    request: operations.GetRepoCommitRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoCommit> {
    return unwrapAsync(repoGetRepoCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an organization
   */
  async getRepoOrganization(
    request: operations.GetRepoOrganizationRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoOrganization> {
    return unwrapAsync(organizationGetRepoOrganization(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a pullrequest
   */
  async getRepoPullrequest(
    request: operations.GetRepoPullrequestRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoPullrequest> {
    return unwrapAsync(repoGetRepoPullrequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a repository
   */
  async getRepoRepository(
    request: operations.GetRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoRepository> {
    return unwrapAsync(repoGetRepoRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * List all branches
   */
  async listRepoBranches(
    request: operations.ListRepoBranchesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.RepoBranch>> {
    return unwrapAsync(repoListRepoBranches(
      this,
      request,
      options,
    ));
  }

  /**
   * List all commits
   */
  async listRepoCommits(
    request: operations.ListRepoCommitsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.RepoCommit>> {
    return unwrapAsync(repoListRepoCommits(
      this,
      request,
      options,
    ));
  }

  /**
   * List all organizations
   */
  async listRepoOrganizations(
    request: operations.ListRepoOrganizationsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.RepoOrganization>> {
    return unwrapAsync(organizationListRepoOrganizations(
      this,
      request,
      options,
    ));
  }

  /**
   * List all pullrequests
   */
  async listRepoPullrequests(
    request: operations.ListRepoPullrequestsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.RepoPullrequest>> {
    return unwrapAsync(repoListRepoPullrequests(
      this,
      request,
      options,
    ));
  }

  /**
   * List all repositories
   */
  async listRepoRepositories(
    request: operations.ListRepoRepositoriesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.RepoRepository>> {
    return unwrapAsync(repoListRepoRepositories(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a branch
   */
  async patchRepoBranch(
    request: operations.PatchRepoBranchRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoBranch> {
    return unwrapAsync(repoPatchRepoBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a commit
   */
  async patchRepoCommit(
    request: operations.PatchRepoCommitRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoCommit> {
    return unwrapAsync(repoPatchRepoCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an organization
   */
  async patchRepoOrganization(
    request: operations.PatchRepoOrganizationRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoOrganization> {
    return unwrapAsync(organizationPatchRepoOrganization(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a pullrequest
   */
  async patchRepoPullrequest(
    request: operations.PatchRepoPullrequestRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoPullrequest> {
    return unwrapAsync(repoPatchRepoPullrequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a repository
   */
  async patchRepoRepository(
    request: operations.PatchRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoRepository> {
    return unwrapAsync(repoPatchRepoRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a branch
   */
  async removeRepoBranch(
    request: operations.RemoveRepoBranchRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveRepoBranchResponse | undefined> {
    return unwrapAsync(repoRemoveRepoBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a commit
   */
  async removeRepoCommit(
    request: operations.RemoveRepoCommitRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveRepoCommitResponse | undefined> {
    return unwrapAsync(repoRemoveRepoCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an organization
   */
  async removeRepoOrganization(
    request: operations.RemoveRepoOrganizationRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveRepoOrganizationResponse | undefined> {
    return unwrapAsync(organizationRemoveRepoOrganization(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a pullrequest
   */
  async removeRepoPullrequest(
    request: operations.RemoveRepoPullrequestRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveRepoPullrequestResponse | undefined> {
    return unwrapAsync(repoRemoveRepoPullrequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a repository
   */
  async removeRepoRepository(
    request: operations.RemoveRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveRepoRepositoryResponse | undefined> {
    return unwrapAsync(repoRemoveRepoRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a branch
   */
  async updateRepoBranch(
    request: operations.UpdateRepoBranchRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoBranch> {
    return unwrapAsync(repoUpdateRepoBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a commit
   */
  async updateRepoCommit(
    request: operations.UpdateRepoCommitRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoCommit> {
    return unwrapAsync(repoUpdateRepoCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an organization
   */
  async updateRepoOrganization(
    request: operations.UpdateRepoOrganizationRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoOrganization> {
    return unwrapAsync(organizationUpdateRepoOrganization(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a pullrequest
   */
  async updateRepoPullrequest(
    request: operations.UpdateRepoPullrequestRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoPullrequest> {
    return unwrapAsync(repoUpdateRepoPullrequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a repository
   */
  async updateRepoRepository(
    request: operations.UpdateRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoRepository> {
    return unwrapAsync(repoUpdateRepoRepository(
      this,
      request,
      options,
    ));
  }
}
