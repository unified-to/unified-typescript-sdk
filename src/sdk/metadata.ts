/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metadataCreateCommerceMetadata } from "../funcs/metadataCreateCommerceMetadata.js";
import { metadataGetCommerceMetadata } from "../funcs/metadataGetCommerceMetadata.js";
import { metadataListCommerceMetadatas } from "../funcs/metadataListCommerceMetadatas.js";
import { metadataPatchCommerceMetadata } from "../funcs/metadataPatchCommerceMetadata.js";
import { metadataRemoveCommerceMetadata } from "../funcs/metadataRemoveCommerceMetadata.js";
import { metadataUpdateCommerceMetadata } from "../funcs/metadataUpdateCommerceMetadata.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Metadata extends ClientSDK {
  /**
   * Create a metadata
   */
  async createCommerceMetadata(
    request: operations.CreateCommerceMetadataRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceMetadata> {
    return unwrapAsync(metadataCreateCommerceMetadata(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a metadata
   */
  async getCommerceMetadata(
    request: operations.GetCommerceMetadataRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceMetadata> {
    return unwrapAsync(metadataGetCommerceMetadata(
      this,
      request,
      options,
    ));
  }

  /**
   * List all metadatas
   */
  async listCommerceMetadatas(
    request: operations.ListCommerceMetadatasRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CommerceMetadata>> {
    return unwrapAsync(metadataListCommerceMetadatas(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a metadata
   */
  async patchCommerceMetadata(
    request: operations.PatchCommerceMetadataRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceMetadata> {
    return unwrapAsync(metadataPatchCommerceMetadata(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a metadata
   */
  async removeCommerceMetadata(
    request: operations.RemoveCommerceMetadataRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCommerceMetadataResponse | undefined> {
    return unwrapAsync(metadataRemoveCommerceMetadata(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a metadata
   */
  async updateCommerceMetadata(
    request: operations.UpdateCommerceMetadataRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceMetadata> {
    return unwrapAsync(metadataUpdateCommerceMetadata(
      this,
      request,
      options,
    ));
  }
}
