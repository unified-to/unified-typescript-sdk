/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { commerceCreateCommerceCollection } from "../funcs/commerceCreateCommerceCollection.js";
import { commerceGetCommerceCollection } from "../funcs/commerceGetCommerceCollection.js";
import { commerceListCommerceCollections } from "../funcs/commerceListCommerceCollections.js";
import { commercePatchCommerceCollection } from "../funcs/commercePatchCommerceCollection.js";
import { commerceRemoveCommerceCollection } from "../funcs/commerceRemoveCommerceCollection.js";
import { commerceUpdateCommerceCollection } from "../funcs/commerceUpdateCommerceCollection.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Collection extends ClientSDK {
  /**
   * Create a collection
   */
  async createCommerceCollection(
    request: operations.CreateCommerceCollectionRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceCollection> {
    return unwrapAsync(commerceCreateCommerceCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a collection
   */
  async getCommerceCollection(
    request: operations.GetCommerceCollectionRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceCollection> {
    return unwrapAsync(commerceGetCommerceCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * List all collections
   */
  async listCommerceCollections(
    request: operations.ListCommerceCollectionsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CommerceCollection>> {
    return unwrapAsync(commerceListCommerceCollections(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a collection
   */
  async patchCommerceCollection(
    request: operations.PatchCommerceCollectionRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceCollection> {
    return unwrapAsync(commercePatchCommerceCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a collection
   */
  async removeCommerceCollection(
    request: operations.RemoveCommerceCollectionRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCommerceCollectionResponse | undefined> {
    return unwrapAsync(commerceRemoveCommerceCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a collection
   */
  async updateCommerceCollection(
    request: operations.UpdateCommerceCollectionRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceCollection> {
    return unwrapAsync(commerceUpdateCommerceCollection(
      this,
      request,
      options,
    ));
  }
}
