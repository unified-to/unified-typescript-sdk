/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { inventoryCreateCommerceInventory } from "../funcs/inventoryCreateCommerceInventory.js";
import { inventoryGetCommerceInventory } from "../funcs/inventoryGetCommerceInventory.js";
import { inventoryListCommerceInventories } from "../funcs/inventoryListCommerceInventories.js";
import { inventoryPatchCommerceInventory } from "../funcs/inventoryPatchCommerceInventory.js";
import { inventoryRemoveCommerceInventory } from "../funcs/inventoryRemoveCommerceInventory.js";
import { inventoryUpdateCommerceInventory } from "../funcs/inventoryUpdateCommerceInventory.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Inventory extends ClientSDK {
    /**
     * Create an inventory
     */
    async createCommerceInventory(
        request: operations.CreateCommerceInventoryRequest,
        options?: RequestOptions
    ): Promise<shared.CommerceInventory> {
        return unwrapAsync(inventoryCreateCommerceInventory(this, request, options));
    }

    /**
     * Retrieve an inventory
     */
    async getCommerceInventory(
        request: operations.GetCommerceInventoryRequest,
        options?: RequestOptions
    ): Promise<shared.CommerceInventory> {
        return unwrapAsync(inventoryGetCommerceInventory(this, request, options));
    }

    /**
     * List all inventories
     */
    async listCommerceInventories(
        request: operations.ListCommerceInventoriesRequest,
        options?: RequestOptions
    ): Promise<Array<shared.CommerceInventory>> {
        return unwrapAsync(inventoryListCommerceInventories(this, request, options));
    }

    /**
     * Update an inventory
     */
    async patchCommerceInventory(
        request: operations.PatchCommerceInventoryRequest,
        options?: RequestOptions
    ): Promise<shared.CommerceInventory> {
        return unwrapAsync(inventoryPatchCommerceInventory(this, request, options));
    }

    /**
     * Remove an inventory
     */
    async removeCommerceInventory(
        request: operations.RemoveCommerceInventoryRequest,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(inventoryRemoveCommerceInventory(this, request, options));
    }

    /**
     * Update an inventory
     */
    async updateCommerceInventory(
        request: operations.UpdateCommerceInventoryRequest,
        options?: RequestOptions
    ): Promise<shared.CommerceInventory> {
        return unwrapAsync(inventoryUpdateCommerceInventory(this, request, options));
    }
}
