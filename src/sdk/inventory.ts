/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { commerceCreateCommerceInventory } from "../funcs/commerceCreateCommerceInventory.js";
import { commerceGetCommerceInventory } from "../funcs/commerceGetCommerceInventory.js";
import { commerceListCommerceInventories } from "../funcs/commerceListCommerceInventories.js";
import { commercePatchCommerceInventory } from "../funcs/commercePatchCommerceInventory.js";
import { commerceRemoveCommerceInventory } from "../funcs/commerceRemoveCommerceInventory.js";
import { commerceUpdateCommerceInventory } from "../funcs/commerceUpdateCommerceInventory.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Inventory extends ClientSDK {
  /**
   * Create an inventory
   */
  async createCommerceInventory(
    request: operations.CreateCommerceInventoryRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceInventory> {
    return unwrapAsync(commerceCreateCommerceInventory(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an inventory
   */
  async getCommerceInventory(
    request: operations.GetCommerceInventoryRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceInventory> {
    return unwrapAsync(commerceGetCommerceInventory(
      this,
      request,
      options,
    ));
  }

  /**
   * List all inventories
   */
  async listCommerceInventories(
    request: operations.ListCommerceInventoriesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CommerceInventory>> {
    return unwrapAsync(commerceListCommerceInventories(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an inventory
   */
  async patchCommerceInventory(
    request: operations.PatchCommerceInventoryRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceInventory> {
    return unwrapAsync(commercePatchCommerceInventory(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an inventory
   */
  async removeCommerceInventory(
    request: operations.RemoveCommerceInventoryRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCommerceInventoryResponse | undefined> {
    return unwrapAsync(commerceRemoveCommerceInventory(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an inventory
   */
  async updateCommerceInventory(
    request: operations.UpdateCommerceInventoryRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceInventory> {
    return unwrapAsync(commerceUpdateCommerceInventory(
      this,
      request,
      options,
    ));
  }
}
