/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingGetAccountingOrganization } from "../funcs/accountingGetAccountingOrganization.js";
import { accountingListAccountingOrganizations } from "../funcs/accountingListAccountingOrganizations.js";
import { organizationCreateRepoOrganization } from "../funcs/organizationCreateRepoOrganization.js";
import { organizationGetRepoOrganization } from "../funcs/organizationGetRepoOrganization.js";
import { organizationListRepoOrganizations } from "../funcs/organizationListRepoOrganizations.js";
import { organizationPatchRepoOrganization } from "../funcs/organizationPatchRepoOrganization.js";
import { organizationRemoveRepoOrganization } from "../funcs/organizationRemoveRepoOrganization.js";
import { organizationUpdateRepoOrganization } from "../funcs/organizationUpdateRepoOrganization.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Organization extends ClientSDK {
  /**
   * Create an organization
   */
  async createRepoOrganization(
    request: operations.CreateRepoOrganizationRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoOrganization> {
    return unwrapAsync(organizationCreateRepoOrganization(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an organization
   */
  async getAccountingOrganization(
    request: operations.GetAccountingOrganizationRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrganization> {
    return unwrapAsync(accountingGetAccountingOrganization(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an organization
   */
  async getRepoOrganization(
    request: operations.GetRepoOrganizationRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoOrganization> {
    return unwrapAsync(organizationGetRepoOrganization(
      this,
      request,
      options,
    ));
  }

  /**
   * List all organizations
   */
  async listAccountingOrganizations(
    request: operations.ListAccountingOrganizationsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingOrganization>> {
    return unwrapAsync(accountingListAccountingOrganizations(
      this,
      request,
      options,
    ));
  }

  /**
   * List all organizations
   */
  async listRepoOrganizations(
    request: operations.ListRepoOrganizationsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.RepoOrganization>> {
    return unwrapAsync(organizationListRepoOrganizations(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an organization
   */
  async patchRepoOrganization(
    request: operations.PatchRepoOrganizationRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoOrganization> {
    return unwrapAsync(organizationPatchRepoOrganization(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an organization
   */
  async removeRepoOrganization(
    request: operations.RemoveRepoOrganizationRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveRepoOrganizationResponse | undefined> {
    return unwrapAsync(organizationRemoveRepoOrganization(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an organization
   */
  async updateRepoOrganization(
    request: operations.UpdateRepoOrganizationRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoOrganization> {
    return unwrapAsync(organizationUpdateRepoOrganization(
      this,
      request,
      options,
    ));
  }
}
