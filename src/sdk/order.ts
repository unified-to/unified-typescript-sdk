/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingCreateAccountingOrder } from "../funcs/accountingCreateAccountingOrder.js";
import { accountingGetAccountingOrder } from "../funcs/accountingGetAccountingOrder.js";
import { accountingListAccountingOrders } from "../funcs/accountingListAccountingOrders.js";
import { accountingPatchAccountingOrder } from "../funcs/accountingPatchAccountingOrder.js";
import { accountingRemoveAccountingOrder } from "../funcs/accountingRemoveAccountingOrder.js";
import { accountingUpdateAccountingOrder } from "../funcs/accountingUpdateAccountingOrder.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Order extends ClientSDK {
  /**
   * Create an order
   */
  async createAccountingOrder(
    request: operations.CreateAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrder> {
    return unwrapAsync(accountingCreateAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an order
   */
  async getAccountingOrder(
    request: operations.GetAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrder> {
    return unwrapAsync(accountingGetAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * List all orders
   */
  async listAccountingOrders(
    request: operations.ListAccountingOrdersRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingOrder>> {
    return unwrapAsync(accountingListAccountingOrders(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an order
   */
  async patchAccountingOrder(
    request: operations.PatchAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrder> {
    return unwrapAsync(accountingPatchAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an order
   */
  async removeAccountingOrder(
    request: operations.RemoveAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingOrderResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an order
   */
  async updateAccountingOrder(
    request: operations.UpdateAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrder> {
    return unwrapAsync(accountingUpdateAccountingOrder(
      this,
      request,
      options,
    ));
  }
}
