/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { orderCreateAccountingOrder } from "../funcs/orderCreateAccountingOrder.js";
import { orderGetAccountingOrder } from "../funcs/orderGetAccountingOrder.js";
import { orderListAccountingOrders } from "../funcs/orderListAccountingOrders.js";
import { orderPatchAccountingOrder } from "../funcs/orderPatchAccountingOrder.js";
import { orderRemoveAccountingOrder } from "../funcs/orderRemoveAccountingOrder.js";
import { orderUpdateAccountingOrder } from "../funcs/orderUpdateAccountingOrder.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Order extends ClientSDK {
  /**
   * Create an order
   */
  async createAccountingOrder(
    request: operations.CreateAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrder> {
    return unwrapAsync(orderCreateAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an order
   */
  async getAccountingOrder(
    request: operations.GetAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrder> {
    return unwrapAsync(orderGetAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * List all orders
   */
  async listAccountingOrders(
    request: operations.ListAccountingOrdersRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingOrder>> {
    return unwrapAsync(orderListAccountingOrders(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an order
   */
  async patchAccountingOrder(
    request: operations.PatchAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrder> {
    return unwrapAsync(orderPatchAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an order
   */
  async removeAccountingOrder(
    request: operations.RemoveAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingOrderResponse | undefined> {
    return unwrapAsync(orderRemoveAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an order
   */
  async updateAccountingOrder(
    request: operations.UpdateAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrder> {
    return unwrapAsync(orderUpdateAccountingOrder(
      this,
      request,
      options,
    ));
  }
}
