/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { hrisCreateHrisDevice } from "../funcs/hrisCreateHrisDevice.js";
import { hrisGetHrisDevice } from "../funcs/hrisGetHrisDevice.js";
import { hrisListHrisDevices } from "../funcs/hrisListHrisDevices.js";
import { hrisPatchHrisDevice } from "../funcs/hrisPatchHrisDevice.js";
import { hrisRemoveHrisDevice } from "../funcs/hrisRemoveHrisDevice.js";
import { hrisUpdateHrisDevice } from "../funcs/hrisUpdateHrisDevice.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Device extends ClientSDK {
  /**
   * Create a device
   */
  async createHrisDevice(
    request: operations.CreateHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisDevice> {
    return unwrapAsync(hrisCreateHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a device
   */
  async getHrisDevice(
    request: operations.GetHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisDevice> {
    return unwrapAsync(hrisGetHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * List all devices
   */
  async listHrisDevices(
    request: operations.ListHrisDevicesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisDevice>> {
    return unwrapAsync(hrisListHrisDevices(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a device
   */
  async patchHrisDevice(
    request: operations.PatchHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisDevice> {
    return unwrapAsync(hrisPatchHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a device
   */
  async removeHrisDevice(
    request: operations.RemoveHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveHrisDeviceResponse | undefined> {
    return unwrapAsync(hrisRemoveHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a device
   */
  async updateHrisDevice(
    request: operations.UpdateHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisDevice> {
    return unwrapAsync(hrisUpdateHrisDevice(
      this,
      request,
      options,
    ));
  }
}
