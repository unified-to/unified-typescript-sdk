/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { deviceCreateHrisDevice } from "../funcs/deviceCreateHrisDevice.js";
import { deviceGetHrisDevice } from "../funcs/deviceGetHrisDevice.js";
import { deviceListHrisDevices } from "../funcs/deviceListHrisDevices.js";
import { devicePatchHrisDevice } from "../funcs/devicePatchHrisDevice.js";
import { deviceRemoveHrisDevice } from "../funcs/deviceRemoveHrisDevice.js";
import { deviceUpdateHrisDevice } from "../funcs/deviceUpdateHrisDevice.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Device extends ClientSDK {
  /**
   * Create a device
   */
  async createHrisDevice(
    request: operations.CreateHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisDevice> {
    return unwrapAsync(deviceCreateHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a device
   */
  async getHrisDevice(
    request: operations.GetHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisDevice> {
    return unwrapAsync(deviceGetHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * List all devices
   */
  async listHrisDevices(
    request: operations.ListHrisDevicesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisDevice>> {
    return unwrapAsync(deviceListHrisDevices(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a device
   */
  async patchHrisDevice(
    request: operations.PatchHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisDevice> {
    return unwrapAsync(devicePatchHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a device
   */
  async removeHrisDevice(
    request: operations.RemoveHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveHrisDeviceResponse | undefined> {
    return unwrapAsync(deviceRemoveHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a device
   */
  async updateHrisDevice(
    request: operations.UpdateHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisDevice> {
    return unwrapAsync(deviceUpdateHrisDevice(
      this,
      request,
      options,
    ));
  }
}
