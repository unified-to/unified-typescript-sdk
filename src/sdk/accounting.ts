/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingCreateAccountingAccount } from "../funcs/accountingCreateAccountingAccount.js";
import { accountingCreateAccountingBill } from "../funcs/accountingCreateAccountingBill.js";
import { accountingCreateAccountingCategory } from "../funcs/accountingCreateAccountingCategory.js";
import { accountingCreateAccountingContact } from "../funcs/accountingCreateAccountingContact.js";
import { accountingCreateAccountingCreditmemo } from "../funcs/accountingCreateAccountingCreditmemo.js";
import { accountingCreateAccountingInvoice } from "../funcs/accountingCreateAccountingInvoice.js";
import { accountingCreateAccountingJournal } from "../funcs/accountingCreateAccountingJournal.js";
import { accountingCreateAccountingOrder } from "../funcs/accountingCreateAccountingOrder.js";
import { accountingCreateAccountingPurchaseorder } from "../funcs/accountingCreateAccountingPurchaseorder.js";
import { accountingCreateAccountingSalesorder } from "../funcs/accountingCreateAccountingSalesorder.js";
import { accountingCreateAccountingTaxrate } from "../funcs/accountingCreateAccountingTaxrate.js";
import { accountingCreateAccountingTransaction } from "../funcs/accountingCreateAccountingTransaction.js";
import { accountingGetAccountingAccount } from "../funcs/accountingGetAccountingAccount.js";
import { accountingGetAccountingBalancesheet } from "../funcs/accountingGetAccountingBalancesheet.js";
import { accountingGetAccountingBill } from "../funcs/accountingGetAccountingBill.js";
import { accountingGetAccountingCategory } from "../funcs/accountingGetAccountingCategory.js";
import { accountingGetAccountingContact } from "../funcs/accountingGetAccountingContact.js";
import { accountingGetAccountingCreditmemo } from "../funcs/accountingGetAccountingCreditmemo.js";
import { accountingGetAccountingInvoice } from "../funcs/accountingGetAccountingInvoice.js";
import { accountingGetAccountingJournal } from "../funcs/accountingGetAccountingJournal.js";
import { accountingGetAccountingOrder } from "../funcs/accountingGetAccountingOrder.js";
import { accountingGetAccountingOrganization } from "../funcs/accountingGetAccountingOrganization.js";
import { accountingGetAccountingProfitloss } from "../funcs/accountingGetAccountingProfitloss.js";
import { accountingGetAccountingPurchaseorder } from "../funcs/accountingGetAccountingPurchaseorder.js";
import { accountingGetAccountingReport } from "../funcs/accountingGetAccountingReport.js";
import { accountingGetAccountingSalesorder } from "../funcs/accountingGetAccountingSalesorder.js";
import { accountingGetAccountingTaxrate } from "../funcs/accountingGetAccountingTaxrate.js";
import { accountingGetAccountingTransaction } from "../funcs/accountingGetAccountingTransaction.js";
import { accountingGetAccountingTrialbalance } from "../funcs/accountingGetAccountingTrialbalance.js";
import { accountingListAccountingAccounts } from "../funcs/accountingListAccountingAccounts.js";
import { accountingListAccountingBalancesheets } from "../funcs/accountingListAccountingBalancesheets.js";
import { accountingListAccountingBills } from "../funcs/accountingListAccountingBills.js";
import { accountingListAccountingCategories } from "../funcs/accountingListAccountingCategories.js";
import { accountingListAccountingContacts } from "../funcs/accountingListAccountingContacts.js";
import { accountingListAccountingCreditmemoes } from "../funcs/accountingListAccountingCreditmemoes.js";
import { accountingListAccountingInvoices } from "../funcs/accountingListAccountingInvoices.js";
import { accountingListAccountingJournals } from "../funcs/accountingListAccountingJournals.js";
import { accountingListAccountingOrders } from "../funcs/accountingListAccountingOrders.js";
import { accountingListAccountingOrganizations } from "../funcs/accountingListAccountingOrganizations.js";
import { accountingListAccountingProfitlosses } from "../funcs/accountingListAccountingProfitlosses.js";
import { accountingListAccountingPurchaseorders } from "../funcs/accountingListAccountingPurchaseorders.js";
import { accountingListAccountingReports } from "../funcs/accountingListAccountingReports.js";
import { accountingListAccountingSalesorders } from "../funcs/accountingListAccountingSalesorders.js";
import { accountingListAccountingTaxrates } from "../funcs/accountingListAccountingTaxrates.js";
import { accountingListAccountingTransactions } from "../funcs/accountingListAccountingTransactions.js";
import { accountingListAccountingTrialbalances } from "../funcs/accountingListAccountingTrialbalances.js";
import { accountingPatchAccountingAccount } from "../funcs/accountingPatchAccountingAccount.js";
import { accountingPatchAccountingBill } from "../funcs/accountingPatchAccountingBill.js";
import { accountingPatchAccountingCategory } from "../funcs/accountingPatchAccountingCategory.js";
import { accountingPatchAccountingContact } from "../funcs/accountingPatchAccountingContact.js";
import { accountingPatchAccountingCreditmemo } from "../funcs/accountingPatchAccountingCreditmemo.js";
import { accountingPatchAccountingInvoice } from "../funcs/accountingPatchAccountingInvoice.js";
import { accountingPatchAccountingJournal } from "../funcs/accountingPatchAccountingJournal.js";
import { accountingPatchAccountingOrder } from "../funcs/accountingPatchAccountingOrder.js";
import { accountingPatchAccountingPurchaseorder } from "../funcs/accountingPatchAccountingPurchaseorder.js";
import { accountingPatchAccountingSalesorder } from "../funcs/accountingPatchAccountingSalesorder.js";
import { accountingPatchAccountingTaxrate } from "../funcs/accountingPatchAccountingTaxrate.js";
import { accountingPatchAccountingTransaction } from "../funcs/accountingPatchAccountingTransaction.js";
import { accountingRemoveAccountingAccount } from "../funcs/accountingRemoveAccountingAccount.js";
import { accountingRemoveAccountingBill } from "../funcs/accountingRemoveAccountingBill.js";
import { accountingRemoveAccountingCategory } from "../funcs/accountingRemoveAccountingCategory.js";
import { accountingRemoveAccountingContact } from "../funcs/accountingRemoveAccountingContact.js";
import { accountingRemoveAccountingCreditmemo } from "../funcs/accountingRemoveAccountingCreditmemo.js";
import { accountingRemoveAccountingInvoice } from "../funcs/accountingRemoveAccountingInvoice.js";
import { accountingRemoveAccountingJournal } from "../funcs/accountingRemoveAccountingJournal.js";
import { accountingRemoveAccountingOrder } from "../funcs/accountingRemoveAccountingOrder.js";
import { accountingRemoveAccountingPurchaseorder } from "../funcs/accountingRemoveAccountingPurchaseorder.js";
import { accountingRemoveAccountingSalesorder } from "../funcs/accountingRemoveAccountingSalesorder.js";
import { accountingRemoveAccountingTaxrate } from "../funcs/accountingRemoveAccountingTaxrate.js";
import { accountingRemoveAccountingTransaction } from "../funcs/accountingRemoveAccountingTransaction.js";
import { accountingUpdateAccountingAccount } from "../funcs/accountingUpdateAccountingAccount.js";
import { accountingUpdateAccountingBill } from "../funcs/accountingUpdateAccountingBill.js";
import { accountingUpdateAccountingCategory } from "../funcs/accountingUpdateAccountingCategory.js";
import { accountingUpdateAccountingContact } from "../funcs/accountingUpdateAccountingContact.js";
import { accountingUpdateAccountingCreditmemo } from "../funcs/accountingUpdateAccountingCreditmemo.js";
import { accountingUpdateAccountingInvoice } from "../funcs/accountingUpdateAccountingInvoice.js";
import { accountingUpdateAccountingJournal } from "../funcs/accountingUpdateAccountingJournal.js";
import { accountingUpdateAccountingOrder } from "../funcs/accountingUpdateAccountingOrder.js";
import { accountingUpdateAccountingPurchaseorder } from "../funcs/accountingUpdateAccountingPurchaseorder.js";
import { accountingUpdateAccountingSalesorder } from "../funcs/accountingUpdateAccountingSalesorder.js";
import { accountingUpdateAccountingTaxrate } from "../funcs/accountingUpdateAccountingTaxrate.js";
import { accountingUpdateAccountingTransaction } from "../funcs/accountingUpdateAccountingTransaction.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Accounting extends ClientSDK {
  /**
   * Create an account
   */
  async createAccountingAccount(
    request: operations.CreateAccountingAccountRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingAccount> {
    return unwrapAsync(accountingCreateAccountingAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a bill
   */
  async createAccountingBill(
    request: operations.CreateAccountingBillRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingBill> {
    return unwrapAsync(accountingCreateAccountingBill(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a category
   */
  async createAccountingCategory(
    request: operations.CreateAccountingCategoryRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCategory> {
    return unwrapAsync(accountingCreateAccountingCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a contact
   */
  async createAccountingContact(
    request: operations.CreateAccountingContactRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingContact> {
    return unwrapAsync(accountingCreateAccountingContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a creditmemo
   */
  async createAccountingCreditmemo(
    request: operations.CreateAccountingCreditmemoRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCreditmemo> {
    return unwrapAsync(accountingCreateAccountingCreditmemo(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an invoice
   */
  async createAccountingInvoice(
    request: operations.CreateAccountingInvoiceRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingInvoice> {
    return unwrapAsync(accountingCreateAccountingInvoice(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a journal
   */
  async createAccountingJournal(
    request: operations.CreateAccountingJournalRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingJournal> {
    return unwrapAsync(accountingCreateAccountingJournal(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an order
   */
  async createAccountingOrder(
    request: operations.CreateAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrder> {
    return unwrapAsync(accountingCreateAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a purchaseorder
   */
  async createAccountingPurchaseorder(
    request: operations.CreateAccountingPurchaseorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingPurchaseorder> {
    return unwrapAsync(accountingCreateAccountingPurchaseorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a salesorder
   */
  async createAccountingSalesorder(
    request: operations.CreateAccountingSalesorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingSalesorder> {
    return unwrapAsync(accountingCreateAccountingSalesorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a taxrate
   */
  async createAccountingTaxrate(
    request: operations.CreateAccountingTaxrateRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTaxrate> {
    return unwrapAsync(accountingCreateAccountingTaxrate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a transaction
   */
  async createAccountingTransaction(
    request: operations.CreateAccountingTransactionRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTransaction> {
    return unwrapAsync(accountingCreateAccountingTransaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an account
   */
  async getAccountingAccount(
    request: operations.GetAccountingAccountRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingAccount> {
    return unwrapAsync(accountingGetAccountingAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a balancesheet
   */
  async getAccountingBalancesheet(
    request: operations.GetAccountingBalancesheetRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingBalancesheet> {
    return unwrapAsync(accountingGetAccountingBalancesheet(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a bill
   */
  async getAccountingBill(
    request: operations.GetAccountingBillRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingBill> {
    return unwrapAsync(accountingGetAccountingBill(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a category
   */
  async getAccountingCategory(
    request: operations.GetAccountingCategoryRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCategory> {
    return unwrapAsync(accountingGetAccountingCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a contact
   */
  async getAccountingContact(
    request: operations.GetAccountingContactRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingContact> {
    return unwrapAsync(accountingGetAccountingContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a creditmemo
   */
  async getAccountingCreditmemo(
    request: operations.GetAccountingCreditmemoRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCreditmemo> {
    return unwrapAsync(accountingGetAccountingCreditmemo(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an invoice
   */
  async getAccountingInvoice(
    request: operations.GetAccountingInvoiceRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingInvoice> {
    return unwrapAsync(accountingGetAccountingInvoice(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a journal
   */
  async getAccountingJournal(
    request: operations.GetAccountingJournalRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingJournal> {
    return unwrapAsync(accountingGetAccountingJournal(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an order
   */
  async getAccountingOrder(
    request: operations.GetAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrder> {
    return unwrapAsync(accountingGetAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an organization
   */
  async getAccountingOrganization(
    request: operations.GetAccountingOrganizationRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrganization> {
    return unwrapAsync(accountingGetAccountingOrganization(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a profitloss
   */
  async getAccountingProfitloss(
    request: operations.GetAccountingProfitlossRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingProfitloss> {
    return unwrapAsync(accountingGetAccountingProfitloss(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a purchaseorder
   */
  async getAccountingPurchaseorder(
    request: operations.GetAccountingPurchaseorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingPurchaseorder> {
    return unwrapAsync(accountingGetAccountingPurchaseorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a report
   */
  async getAccountingReport(
    request: operations.GetAccountingReportRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingReport> {
    return unwrapAsync(accountingGetAccountingReport(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a salesorder
   */
  async getAccountingSalesorder(
    request: operations.GetAccountingSalesorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingSalesorder> {
    return unwrapAsync(accountingGetAccountingSalesorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a taxrate
   */
  async getAccountingTaxrate(
    request: operations.GetAccountingTaxrateRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTaxrate> {
    return unwrapAsync(accountingGetAccountingTaxrate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a transaction
   */
  async getAccountingTransaction(
    request: operations.GetAccountingTransactionRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTransaction> {
    return unwrapAsync(accountingGetAccountingTransaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a trialbalance
   */
  async getAccountingTrialbalance(
    request: operations.GetAccountingTrialbalanceRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTrialbalance> {
    return unwrapAsync(accountingGetAccountingTrialbalance(
      this,
      request,
      options,
    ));
  }

  /**
   * List all accounts
   */
  async listAccountingAccounts(
    request: operations.ListAccountingAccountsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingAccount>> {
    return unwrapAsync(accountingListAccountingAccounts(
      this,
      request,
      options,
    ));
  }

  /**
   * List all balancesheets
   */
  async listAccountingBalancesheets(
    request: operations.ListAccountingBalancesheetsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingBalancesheet>> {
    return unwrapAsync(accountingListAccountingBalancesheets(
      this,
      request,
      options,
    ));
  }

  /**
   * List all bills
   */
  async listAccountingBills(
    request: operations.ListAccountingBillsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingBill>> {
    return unwrapAsync(accountingListAccountingBills(
      this,
      request,
      options,
    ));
  }

  /**
   * List all categories
   */
  async listAccountingCategories(
    request: operations.ListAccountingCategoriesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingCategory>> {
    return unwrapAsync(accountingListAccountingCategories(
      this,
      request,
      options,
    ));
  }

  /**
   * List all contacts
   */
  async listAccountingContacts(
    request: operations.ListAccountingContactsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingContact>> {
    return unwrapAsync(accountingListAccountingContacts(
      this,
      request,
      options,
    ));
  }

  /**
   * List all creditmemoes
   */
  async listAccountingCreditmemoes(
    request: operations.ListAccountingCreditmemoesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingCreditmemo>> {
    return unwrapAsync(accountingListAccountingCreditmemoes(
      this,
      request,
      options,
    ));
  }

  /**
   * List all invoices
   */
  async listAccountingInvoices(
    request: operations.ListAccountingInvoicesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingInvoice>> {
    return unwrapAsync(accountingListAccountingInvoices(
      this,
      request,
      options,
    ));
  }

  /**
   * List all journals
   */
  async listAccountingJournals(
    request: operations.ListAccountingJournalsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingJournal>> {
    return unwrapAsync(accountingListAccountingJournals(
      this,
      request,
      options,
    ));
  }

  /**
   * List all orders
   */
  async listAccountingOrders(
    request: operations.ListAccountingOrdersRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingOrder>> {
    return unwrapAsync(accountingListAccountingOrders(
      this,
      request,
      options,
    ));
  }

  /**
   * List all organizations
   */
  async listAccountingOrganizations(
    request: operations.ListAccountingOrganizationsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingOrganization>> {
    return unwrapAsync(accountingListAccountingOrganizations(
      this,
      request,
      options,
    ));
  }

  /**
   * List all profitlosses
   */
  async listAccountingProfitlosses(
    request: operations.ListAccountingProfitlossesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingProfitloss>> {
    return unwrapAsync(accountingListAccountingProfitlosses(
      this,
      request,
      options,
    ));
  }

  /**
   * List all purchaseorders
   */
  async listAccountingPurchaseorders(
    request: operations.ListAccountingPurchaseordersRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingPurchaseorder>> {
    return unwrapAsync(accountingListAccountingPurchaseorders(
      this,
      request,
      options,
    ));
  }

  /**
   * List all reports
   */
  async listAccountingReports(
    request: operations.ListAccountingReportsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingReport>> {
    return unwrapAsync(accountingListAccountingReports(
      this,
      request,
      options,
    ));
  }

  /**
   * List all salesorders
   */
  async listAccountingSalesorders(
    request: operations.ListAccountingSalesordersRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingSalesorder>> {
    return unwrapAsync(accountingListAccountingSalesorders(
      this,
      request,
      options,
    ));
  }

  /**
   * List all taxrates
   */
  async listAccountingTaxrates(
    request: operations.ListAccountingTaxratesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingTaxrate>> {
    return unwrapAsync(accountingListAccountingTaxrates(
      this,
      request,
      options,
    ));
  }

  /**
   * List all transactions
   */
  async listAccountingTransactions(
    request: operations.ListAccountingTransactionsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingTransaction>> {
    return unwrapAsync(accountingListAccountingTransactions(
      this,
      request,
      options,
    ));
  }

  /**
   * List all trialbalances
   */
  async listAccountingTrialbalances(
    request: operations.ListAccountingTrialbalancesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingTrialbalance>> {
    return unwrapAsync(accountingListAccountingTrialbalances(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an account
   */
  async patchAccountingAccount(
    request: operations.PatchAccountingAccountRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingAccount> {
    return unwrapAsync(accountingPatchAccountingAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a bill
   */
  async patchAccountingBill(
    request: operations.PatchAccountingBillRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingBill> {
    return unwrapAsync(accountingPatchAccountingBill(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a category
   */
  async patchAccountingCategory(
    request: operations.PatchAccountingCategoryRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCategory> {
    return unwrapAsync(accountingPatchAccountingCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a contact
   */
  async patchAccountingContact(
    request: operations.PatchAccountingContactRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingContact> {
    return unwrapAsync(accountingPatchAccountingContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a creditmemo
   */
  async patchAccountingCreditmemo(
    request: operations.PatchAccountingCreditmemoRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCreditmemo> {
    return unwrapAsync(accountingPatchAccountingCreditmemo(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an invoice
   */
  async patchAccountingInvoice(
    request: operations.PatchAccountingInvoiceRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingInvoice> {
    return unwrapAsync(accountingPatchAccountingInvoice(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a journal
   */
  async patchAccountingJournal(
    request: operations.PatchAccountingJournalRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingJournal> {
    return unwrapAsync(accountingPatchAccountingJournal(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an order
   */
  async patchAccountingOrder(
    request: operations.PatchAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrder> {
    return unwrapAsync(accountingPatchAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a purchaseorder
   */
  async patchAccountingPurchaseorder(
    request: operations.PatchAccountingPurchaseorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingPurchaseorder> {
    return unwrapAsync(accountingPatchAccountingPurchaseorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a salesorder
   */
  async patchAccountingSalesorder(
    request: operations.PatchAccountingSalesorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingSalesorder> {
    return unwrapAsync(accountingPatchAccountingSalesorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a taxrate
   */
  async patchAccountingTaxrate(
    request: operations.PatchAccountingTaxrateRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTaxrate> {
    return unwrapAsync(accountingPatchAccountingTaxrate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a transaction
   */
  async patchAccountingTransaction(
    request: operations.PatchAccountingTransactionRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTransaction> {
    return unwrapAsync(accountingPatchAccountingTransaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an account
   */
  async removeAccountingAccount(
    request: operations.RemoveAccountingAccountRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingAccountResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a bill
   */
  async removeAccountingBill(
    request: operations.RemoveAccountingBillRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingBillResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingBill(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a category
   */
  async removeAccountingCategory(
    request: operations.RemoveAccountingCategoryRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingCategoryResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a contact
   */
  async removeAccountingContact(
    request: operations.RemoveAccountingContactRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingContactResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a creditmemo
   */
  async removeAccountingCreditmemo(
    request: operations.RemoveAccountingCreditmemoRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingCreditmemoResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingCreditmemo(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an invoice
   */
  async removeAccountingInvoice(
    request: operations.RemoveAccountingInvoiceRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingInvoiceResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingInvoice(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a journal
   */
  async removeAccountingJournal(
    request: operations.RemoveAccountingJournalRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingJournalResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingJournal(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an order
   */
  async removeAccountingOrder(
    request: operations.RemoveAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingOrderResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a purchaseorder
   */
  async removeAccountingPurchaseorder(
    request: operations.RemoveAccountingPurchaseorderRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingPurchaseorderResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingPurchaseorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a salesorder
   */
  async removeAccountingSalesorder(
    request: operations.RemoveAccountingSalesorderRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingSalesorderResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingSalesorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a taxrate
   */
  async removeAccountingTaxrate(
    request: operations.RemoveAccountingTaxrateRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingTaxrateResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingTaxrate(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a transaction
   */
  async removeAccountingTransaction(
    request: operations.RemoveAccountingTransactionRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingTransactionResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingTransaction(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an account
   */
  async updateAccountingAccount(
    request: operations.UpdateAccountingAccountRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingAccount> {
    return unwrapAsync(accountingUpdateAccountingAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a bill
   */
  async updateAccountingBill(
    request: operations.UpdateAccountingBillRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingBill> {
    return unwrapAsync(accountingUpdateAccountingBill(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a category
   */
  async updateAccountingCategory(
    request: operations.UpdateAccountingCategoryRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCategory> {
    return unwrapAsync(accountingUpdateAccountingCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a contact
   */
  async updateAccountingContact(
    request: operations.UpdateAccountingContactRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingContact> {
    return unwrapAsync(accountingUpdateAccountingContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a creditmemo
   */
  async updateAccountingCreditmemo(
    request: operations.UpdateAccountingCreditmemoRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCreditmemo> {
    return unwrapAsync(accountingUpdateAccountingCreditmemo(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an invoice
   */
  async updateAccountingInvoice(
    request: operations.UpdateAccountingInvoiceRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingInvoice> {
    return unwrapAsync(accountingUpdateAccountingInvoice(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a journal
   */
  async updateAccountingJournal(
    request: operations.UpdateAccountingJournalRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingJournal> {
    return unwrapAsync(accountingUpdateAccountingJournal(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an order
   */
  async updateAccountingOrder(
    request: operations.UpdateAccountingOrderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingOrder> {
    return unwrapAsync(accountingUpdateAccountingOrder(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a purchaseorder
   */
  async updateAccountingPurchaseorder(
    request: operations.UpdateAccountingPurchaseorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingPurchaseorder> {
    return unwrapAsync(accountingUpdateAccountingPurchaseorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a salesorder
   */
  async updateAccountingSalesorder(
    request: operations.UpdateAccountingSalesorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingSalesorder> {
    return unwrapAsync(accountingUpdateAccountingSalesorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a taxrate
   */
  async updateAccountingTaxrate(
    request: operations.UpdateAccountingTaxrateRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTaxrate> {
    return unwrapAsync(accountingUpdateAccountingTaxrate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a transaction
   */
  async updateAccountingTransaction(
    request: operations.UpdateAccountingTransactionRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingTransaction> {
    return unwrapAsync(accountingUpdateAccountingTransaction(
      this,
      request,
      options,
    ));
  }
}
