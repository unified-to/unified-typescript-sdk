/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ticketingCreateTicketingNote } from "../funcs/ticketingCreateTicketingNote.js";
import { ticketingGetTicketingNote } from "../funcs/ticketingGetTicketingNote.js";
import { ticketingListTicketingNotes } from "../funcs/ticketingListTicketingNotes.js";
import { ticketingPatchTicketingNote } from "../funcs/ticketingPatchTicketingNote.js";
import { ticketingRemoveTicketingNote } from "../funcs/ticketingRemoveTicketingNote.js";
import { ticketingUpdateTicketingNote } from "../funcs/ticketingUpdateTicketingNote.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Note extends ClientSDK {
  /**
   * Create a note
   */
  async createTicketingNote(
    request: operations.CreateTicketingNoteRequest,
    options?: RequestOptions,
  ): Promise<shared.TicketingNote> {
    return unwrapAsync(ticketingCreateTicketingNote(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a note
   */
  async getTicketingNote(
    request: operations.GetTicketingNoteRequest,
    options?: RequestOptions,
  ): Promise<shared.TicketingNote> {
    return unwrapAsync(ticketingGetTicketingNote(
      this,
      request,
      options,
    ));
  }

  /**
   * List all notes
   */
  async listTicketingNotes(
    request: operations.ListTicketingNotesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.TicketingNote>> {
    return unwrapAsync(ticketingListTicketingNotes(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a note
   */
  async patchTicketingNote(
    request: operations.PatchTicketingNoteRequest,
    options?: RequestOptions,
  ): Promise<shared.TicketingNote> {
    return unwrapAsync(ticketingPatchTicketingNote(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a note
   */
  async removeTicketingNote(
    request: operations.RemoveTicketingNoteRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveTicketingNoteResponse | undefined> {
    return unwrapAsync(ticketingRemoveTicketingNote(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a note
   */
  async updateTicketingNote(
    request: operations.UpdateTicketingNoteRequest,
    options?: RequestOptions,
  ): Promise<shared.TicketingNote> {
    return unwrapAsync(ticketingUpdateTicketingNote(
      this,
      request,
      options,
    ));
  }
}
