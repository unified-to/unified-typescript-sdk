/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { unifiedGetUnifiedIntegrationAuth } from "../funcs/unifiedGetUnifiedIntegrationAuth.js";
import { unifiedListUnifiedIntegrations } from "../funcs/unifiedListUnifiedIntegrations.js";
import { unifiedListUnifiedIntegrationWorkspaces } from "../funcs/unifiedListUnifiedIntegrationWorkspaces.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Integration extends ClientSDK {
  /**
   * Authorize new connection
   *
   * @remarks
   * Returns an authorization URL for the specified integration.  Once a successful authorization occurs, a new connection is created.
   */
  async getUnifiedIntegrationAuth(
    request: operations.GetUnifiedIntegrationAuthRequest,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(unifiedGetUnifiedIntegrationAuth(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns all activated integrations in a workspace
   *
   * @remarks
   * No authentication required as this is to be used by front-end interface
   */
  async listUnifiedIntegrationWorkspaces(
    request: operations.ListUnifiedIntegrationWorkspacesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.Integration>> {
    return unwrapAsync(unifiedListUnifiedIntegrationWorkspaces(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns all integrations
   */
  async listUnifiedIntegrations(
    request: operations.ListUnifiedIntegrationsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.Integration>> {
    return unwrapAsync(unifiedListUnifiedIntegrations(
      this,
      request,
      options,
    ));
  }
}
