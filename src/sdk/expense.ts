/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingCreateAccountingExpense } from "../funcs/accountingCreateAccountingExpense.js";
import { accountingGetAccountingExpense } from "../funcs/accountingGetAccountingExpense.js";
import { accountingListAccountingExpenses } from "../funcs/accountingListAccountingExpenses.js";
import { accountingPatchAccountingExpense } from "../funcs/accountingPatchAccountingExpense.js";
import { accountingRemoveAccountingExpense } from "../funcs/accountingRemoveAccountingExpense.js";
import { accountingUpdateAccountingExpense } from "../funcs/accountingUpdateAccountingExpense.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Expense extends ClientSDK {
  /**
   * Create an expense
   */
  async createAccountingExpense(
    request: operations.CreateAccountingExpenseRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingExpense> {
    return unwrapAsync(accountingCreateAccountingExpense(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an expense
   */
  async getAccountingExpense(
    request: operations.GetAccountingExpenseRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingExpense> {
    return unwrapAsync(accountingGetAccountingExpense(
      this,
      request,
      options,
    ));
  }

  /**
   * List all expenses
   */
  async listAccountingExpenses(
    request: operations.ListAccountingExpensesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingExpense>> {
    return unwrapAsync(accountingListAccountingExpenses(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an expense
   */
  async patchAccountingExpense(
    request: operations.PatchAccountingExpenseRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingExpense> {
    return unwrapAsync(accountingPatchAccountingExpense(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an expense
   */
  async removeAccountingExpense(
    request: operations.RemoveAccountingExpenseRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingExpenseResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingExpense(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an expense
   */
  async updateAccountingExpense(
    request: operations.UpdateAccountingExpenseRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingExpense> {
    return unwrapAsync(accountingUpdateAccountingExpense(
      this,
      request,
      options,
    ));
  }
}
