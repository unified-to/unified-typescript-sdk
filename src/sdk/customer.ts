/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customerCreateTicketingCustomer } from "../funcs/customerCreateTicketingCustomer.js";
import { customerGetTicketingCustomer } from "../funcs/customerGetTicketingCustomer.js";
import { customerListTicketingCustomers } from "../funcs/customerListTicketingCustomers.js";
import { customerPatchTicketingCustomer } from "../funcs/customerPatchTicketingCustomer.js";
import { customerRemoveTicketingCustomer } from "../funcs/customerRemoveTicketingCustomer.js";
import { customerUpdateTicketingCustomer } from "../funcs/customerUpdateTicketingCustomer.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Customer extends ClientSDK {
    /**
     * Create a customer
     */
    async createTicketingCustomer(
        request: operations.CreateTicketingCustomerRequest,
        options?: RequestOptions
    ): Promise<shared.TicketingCustomer> {
        return unwrapAsync(customerCreateTicketingCustomer(this, request, options));
    }

    /**
     * Retrieve a customer
     */
    async getTicketingCustomer(
        request: operations.GetTicketingCustomerRequest,
        options?: RequestOptions
    ): Promise<shared.TicketingCustomer> {
        return unwrapAsync(customerGetTicketingCustomer(this, request, options));
    }

    /**
     * List all customers
     */
    async listTicketingCustomers(
        request: operations.ListTicketingCustomersRequest,
        options?: RequestOptions
    ): Promise<Array<shared.TicketingCustomer>> {
        return unwrapAsync(customerListTicketingCustomers(this, request, options));
    }

    /**
     * Update a customer
     */
    async patchTicketingCustomer(
        request: operations.PatchTicketingCustomerRequest,
        options?: RequestOptions
    ): Promise<shared.TicketingCustomer> {
        return unwrapAsync(customerPatchTicketingCustomer(this, request, options));
    }

    /**
     * Remove a customer
     */
    async removeTicketingCustomer(
        request: operations.RemoveTicketingCustomerRequest,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(customerRemoveTicketingCustomer(this, request, options));
    }

    /**
     * Update a customer
     */
    async updateTicketingCustomer(
        request: operations.UpdateTicketingCustomerRequest,
        options?: RequestOptions
    ): Promise<shared.TicketingCustomer> {
        return unwrapAsync(customerUpdateTicketingCustomer(this, request, options));
    }
}
