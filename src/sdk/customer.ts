/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ticketingCreateTicketingCustomer } from "../funcs/ticketingCreateTicketingCustomer.js";
import { ticketingGetTicketingCustomer } from "../funcs/ticketingGetTicketingCustomer.js";
import { ticketingListTicketingCustomers } from "../funcs/ticketingListTicketingCustomers.js";
import { ticketingPatchTicketingCustomer } from "../funcs/ticketingPatchTicketingCustomer.js";
import { ticketingRemoveTicketingCustomer } from "../funcs/ticketingRemoveTicketingCustomer.js";
import { ticketingUpdateTicketingCustomer } from "../funcs/ticketingUpdateTicketingCustomer.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Customer extends ClientSDK {
  /**
   * Create a customer
   */
  async createTicketingCustomer(
    request: operations.CreateTicketingCustomerRequest,
    options?: RequestOptions,
  ): Promise<shared.TicketingCustomer> {
    return unwrapAsync(ticketingCreateTicketingCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a customer
   */
  async getTicketingCustomer(
    request: operations.GetTicketingCustomerRequest,
    options?: RequestOptions,
  ): Promise<shared.TicketingCustomer> {
    return unwrapAsync(ticketingGetTicketingCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * List all customers
   */
  async listTicketingCustomers(
    request: operations.ListTicketingCustomersRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.TicketingCustomer>> {
    return unwrapAsync(ticketingListTicketingCustomers(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a customer
   */
  async patchTicketingCustomer(
    request: operations.PatchTicketingCustomerRequest,
    options?: RequestOptions,
  ): Promise<shared.TicketingCustomer> {
    return unwrapAsync(ticketingPatchTicketingCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a customer
   */
  async removeTicketingCustomer(
    request: operations.RemoveTicketingCustomerRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveTicketingCustomerResponse | undefined> {
    return unwrapAsync(ticketingRemoveTicketingCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a customer
   */
  async updateTicketingCustomer(
    request: operations.UpdateTicketingCustomerRequest,
    options?: RequestOptions,
  ): Promise<shared.TicketingCustomer> {
    return unwrapAsync(ticketingUpdateTicketingCustomer(
      this,
      request,
      options,
    ));
  }
}
