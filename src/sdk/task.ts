/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { commentCreateTaskComment } from "../funcs/commentCreateTaskComment.js";
import { commentGetTaskComment } from "../funcs/commentGetTaskComment.js";
import { commentListTaskComments } from "../funcs/commentListTaskComments.js";
import { commentPatchTaskComment } from "../funcs/commentPatchTaskComment.js";
import { commentRemoveTaskComment } from "../funcs/commentRemoveTaskComment.js";
import { commentUpdateTaskComment } from "../funcs/commentUpdateTaskComment.js";
import { taskCreateTaskProject } from "../funcs/taskCreateTaskProject.js";
import { taskCreateTaskTask } from "../funcs/taskCreateTaskTask.js";
import { taskGetTaskChange } from "../funcs/taskGetTaskChange.js";
import { taskGetTaskProject } from "../funcs/taskGetTaskProject.js";
import { taskGetTaskTask } from "../funcs/taskGetTaskTask.js";
import { taskListTaskChanges } from "../funcs/taskListTaskChanges.js";
import { taskListTaskProjects } from "../funcs/taskListTaskProjects.js";
import { taskListTaskTasks } from "../funcs/taskListTaskTasks.js";
import { taskPatchTaskProject } from "../funcs/taskPatchTaskProject.js";
import { taskPatchTaskTask } from "../funcs/taskPatchTaskTask.js";
import { taskRemoveTaskProject } from "../funcs/taskRemoveTaskProject.js";
import { taskRemoveTaskTask } from "../funcs/taskRemoveTaskTask.js";
import { taskUpdateTaskProject } from "../funcs/taskUpdateTaskProject.js";
import { taskUpdateTaskTask } from "../funcs/taskUpdateTaskTask.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Task extends ClientSDK {
  /**
   * Create a comment
   */
  async createTaskComment(
    request: operations.CreateTaskCommentRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskComment> {
    return unwrapAsync(commentCreateTaskComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a project
   */
  async createTaskProject(
    request: operations.CreateTaskProjectRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskProject> {
    return unwrapAsync(taskCreateTaskProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a task
   */
  async createTaskTask(
    request: operations.CreateTaskTaskRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskTask> {
    return unwrapAsync(taskCreateTaskTask(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a change
   */
  async getTaskChange(
    request: operations.GetTaskChangeRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskChange> {
    return unwrapAsync(taskGetTaskChange(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a comment
   */
  async getTaskComment(
    request: operations.GetTaskCommentRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskComment> {
    return unwrapAsync(commentGetTaskComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a project
   */
  async getTaskProject(
    request: operations.GetTaskProjectRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskProject> {
    return unwrapAsync(taskGetTaskProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a task
   */
  async getTaskTask(
    request: operations.GetTaskTaskRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskTask> {
    return unwrapAsync(taskGetTaskTask(
      this,
      request,
      options,
    ));
  }

  /**
   * List all changes
   */
  async listTaskChanges(
    request: operations.ListTaskChangesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.TaskChange>> {
    return unwrapAsync(taskListTaskChanges(
      this,
      request,
      options,
    ));
  }

  /**
   * List all comments
   */
  async listTaskComments(
    request: operations.ListTaskCommentsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.TaskComment>> {
    return unwrapAsync(commentListTaskComments(
      this,
      request,
      options,
    ));
  }

  /**
   * List all projects
   */
  async listTaskProjects(
    request: operations.ListTaskProjectsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.TaskProject>> {
    return unwrapAsync(taskListTaskProjects(
      this,
      request,
      options,
    ));
  }

  /**
   * List all tasks
   */
  async listTaskTasks(
    request: operations.ListTaskTasksRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.TaskTask>> {
    return unwrapAsync(taskListTaskTasks(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a comment
   */
  async patchTaskComment(
    request: operations.PatchTaskCommentRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskComment> {
    return unwrapAsync(commentPatchTaskComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a project
   */
  async patchTaskProject(
    request: operations.PatchTaskProjectRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskProject> {
    return unwrapAsync(taskPatchTaskProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a task
   */
  async patchTaskTask(
    request: operations.PatchTaskTaskRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskTask> {
    return unwrapAsync(taskPatchTaskTask(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a comment
   */
  async removeTaskComment(
    request: operations.RemoveTaskCommentRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveTaskCommentResponse | undefined> {
    return unwrapAsync(commentRemoveTaskComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a project
   */
  async removeTaskProject(
    request: operations.RemoveTaskProjectRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveTaskProjectResponse | undefined> {
    return unwrapAsync(taskRemoveTaskProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a task
   */
  async removeTaskTask(
    request: operations.RemoveTaskTaskRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveTaskTaskResponse | undefined> {
    return unwrapAsync(taskRemoveTaskTask(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a comment
   */
  async updateTaskComment(
    request: operations.UpdateTaskCommentRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskComment> {
    return unwrapAsync(commentUpdateTaskComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a project
   */
  async updateTaskProject(
    request: operations.UpdateTaskProjectRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskProject> {
    return unwrapAsync(taskUpdateTaskProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a task
   */
  async updateTaskTask(
    request: operations.UpdateTaskTaskRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskTask> {
    return unwrapAsync(taskUpdateTaskTask(
      this,
      request,
      options,
    ));
  }
}
