/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { commerceCreateCommerceItem } from "../funcs/commerceCreateCommerceItem.js";
import { commerceGetCommerceItem } from "../funcs/commerceGetCommerceItem.js";
import { commerceListCommerceItems } from "../funcs/commerceListCommerceItems.js";
import { commercePatchCommerceItem } from "../funcs/commercePatchCommerceItem.js";
import { commerceRemoveCommerceItem } from "../funcs/commerceRemoveCommerceItem.js";
import { commerceUpdateCommerceItem } from "../funcs/commerceUpdateCommerceItem.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Item extends ClientSDK {
  /**
   * Create an item
   */
  async createCommerceItem(
    request: operations.CreateCommerceItemRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceItem> {
    return unwrapAsync(commerceCreateCommerceItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an item
   */
  async getCommerceItem(
    request: operations.GetCommerceItemRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceItem> {
    return unwrapAsync(commerceGetCommerceItem(
      this,
      request,
      options,
    ));
  }

  /**
   * List all items
   */
  async listCommerceItems(
    request: operations.ListCommerceItemsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CommerceItem>> {
    return unwrapAsync(commerceListCommerceItems(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an item
   */
  async patchCommerceItem(
    request: operations.PatchCommerceItemRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceItem> {
    return unwrapAsync(commercePatchCommerceItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an item
   */
  async removeCommerceItem(
    request: operations.RemoveCommerceItemRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCommerceItemResponse | undefined> {
    return unwrapAsync(commerceRemoveCommerceItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an item
   */
  async updateCommerceItem(
    request: operations.UpdateCommerceItemRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceItem> {
    return unwrapAsync(commerceUpdateCommerceItem(
      this,
      request,
      options,
    ));
  }
}
