/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { subscriptionCreatePaymentSubscription } from "../funcs/subscriptionCreatePaymentSubscription.js";
import { subscriptionGetPaymentSubscription } from "../funcs/subscriptionGetPaymentSubscription.js";
import { subscriptionListPaymentSubscriptions } from "../funcs/subscriptionListPaymentSubscriptions.js";
import { subscriptionPatchPaymentSubscription } from "../funcs/subscriptionPatchPaymentSubscription.js";
import { subscriptionRemovePaymentSubscription } from "../funcs/subscriptionRemovePaymentSubscription.js";
import { subscriptionUpdatePaymentSubscription } from "../funcs/subscriptionUpdatePaymentSubscription.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Subscription extends ClientSDK {
  /**
   * Create a subscription
   */
  async createPaymentSubscription(
    request: operations.CreatePaymentSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentSubscription> {
    return unwrapAsync(subscriptionCreatePaymentSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a subscription
   */
  async getPaymentSubscription(
    request: operations.GetPaymentSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentSubscription> {
    return unwrapAsync(subscriptionGetPaymentSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * List all subscriptions
   */
  async listPaymentSubscriptions(
    request: operations.ListPaymentSubscriptionsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.PaymentSubscription>> {
    return unwrapAsync(subscriptionListPaymentSubscriptions(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a subscription
   */
  async patchPaymentSubscription(
    request: operations.PatchPaymentSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentSubscription> {
    return unwrapAsync(subscriptionPatchPaymentSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a subscription
   */
  async removePaymentSubscription(
    request: operations.RemovePaymentSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.RemovePaymentSubscriptionResponse | undefined> {
    return unwrapAsync(subscriptionRemovePaymentSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a subscription
   */
  async updatePaymentSubscription(
    request: operations.UpdatePaymentSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentSubscription> {
    return unwrapAsync(subscriptionUpdatePaymentSubscription(
      this,
      request,
      options,
    ));
  }
}
