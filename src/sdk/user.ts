/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { userCreateScimUsers } from "../funcs/userCreateScimUsers.js";
import { userGetScimUsers } from "../funcs/userGetScimUsers.js";
import { userListScimUsers } from "../funcs/userListScimUsers.js";
import { userPatchScimUsers } from "../funcs/userPatchScimUsers.js";
import { userRemoveScimUsers } from "../funcs/userRemoveScimUsers.js";
import { userUpdateScimUsers } from "../funcs/userUpdateScimUsers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class User extends ClientSDK {
  /**
   * Create user
   */
  async createScimUsers(
    request: operations.CreateScimUsersRequest,
    options?: RequestOptions,
  ): Promise<shared.ScimUser> {
    return unwrapAsync(userCreateScimUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Get user
   */
  async getScimUsers(
    request: operations.GetScimUsersRequest,
    options?: RequestOptions,
  ): Promise<shared.ScimUser> {
    return unwrapAsync(userGetScimUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * List users
   */
  async listScimUsers(
    request: operations.ListScimUsersRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.ScimUser>> {
    return unwrapAsync(userListScimUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   */
  async patchScimUsers(
    request: operations.PatchScimUsersRequest,
    options?: RequestOptions,
  ): Promise<shared.ScimUser> {
    return unwrapAsync(userPatchScimUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete user
   */
  async removeScimUsers(
    request: operations.RemoveScimUsersRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(userRemoveScimUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   */
  async updateScimUsers(
    request: operations.UpdateScimUsersRequest,
    options?: RequestOptions,
  ): Promise<shared.ScimUser> {
    return unwrapAsync(userUpdateScimUsers(
      this,
      request,
      options,
    ));
  }
}
