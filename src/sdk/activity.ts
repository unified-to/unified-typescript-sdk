/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atsCreateAtsActivity } from "../funcs/atsCreateAtsActivity.js";
import { atsGetAtsActivity } from "../funcs/atsGetAtsActivity.js";
import { atsListAtsActivities } from "../funcs/atsListAtsActivities.js";
import { atsPatchAtsActivity } from "../funcs/atsPatchAtsActivity.js";
import { atsRemoveAtsActivity } from "../funcs/atsRemoveAtsActivity.js";
import { atsUpdateAtsActivity } from "../funcs/atsUpdateAtsActivity.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Activity extends ClientSDK {
  /**
   * Create an activity
   */
  async createAtsActivity(
    request: operations.CreateAtsActivityRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsActivity> {
    return unwrapAsync(atsCreateAtsActivity(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an activity
   */
  async getAtsActivity(
    request: operations.GetAtsActivityRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsActivity> {
    return unwrapAsync(atsGetAtsActivity(
      this,
      request,
      options,
    ));
  }

  /**
   * List all activities
   */
  async listAtsActivities(
    request: operations.ListAtsActivitiesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AtsActivity>> {
    return unwrapAsync(atsListAtsActivities(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an activity
   */
  async patchAtsActivity(
    request: operations.PatchAtsActivityRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsActivity> {
    return unwrapAsync(atsPatchAtsActivity(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an activity
   */
  async removeAtsActivity(
    request: operations.RemoveAtsActivityRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAtsActivityResponse | undefined> {
    return unwrapAsync(atsRemoveAtsActivity(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an activity
   */
  async updateAtsActivity(
    request: operations.UpdateAtsActivityRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsActivity> {
    return unwrapAsync(atsUpdateAtsActivity(
      this,
      request,
      options,
    ));
  }
}
