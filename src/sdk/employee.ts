/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { hrisCreateHrisEmployee } from "../funcs/hrisCreateHrisEmployee.js";
import { hrisGetHrisEmployee } from "../funcs/hrisGetHrisEmployee.js";
import { hrisListHrisEmployees } from "../funcs/hrisListHrisEmployees.js";
import { hrisPatchHrisEmployee } from "../funcs/hrisPatchHrisEmployee.js";
import { hrisRemoveHrisEmployee } from "../funcs/hrisRemoveHrisEmployee.js";
import { hrisUpdateHrisEmployee } from "../funcs/hrisUpdateHrisEmployee.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Employee extends ClientSDK {
  /**
   * Create an employee
   */
  async createHrisEmployee(
    request: operations.CreateHrisEmployeeRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisEmployee> {
    return unwrapAsync(hrisCreateHrisEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an employee
   */
  async getHrisEmployee(
    request: operations.GetHrisEmployeeRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisEmployee> {
    return unwrapAsync(hrisGetHrisEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * List all employees
   */
  async listHrisEmployees(
    request: operations.ListHrisEmployeesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisEmployee>> {
    return unwrapAsync(hrisListHrisEmployees(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an employee
   */
  async patchHrisEmployee(
    request: operations.PatchHrisEmployeeRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisEmployee> {
    return unwrapAsync(hrisPatchHrisEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an employee
   */
  async removeHrisEmployee(
    request: operations.RemoveHrisEmployeeRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveHrisEmployeeResponse | undefined> {
    return unwrapAsync(hrisRemoveHrisEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an employee
   */
  async updateHrisEmployee(
    request: operations.UpdateHrisEmployeeRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisEmployee> {
    return unwrapAsync(hrisUpdateHrisEmployee(
      this,
      request,
      options,
    ));
  }
}
