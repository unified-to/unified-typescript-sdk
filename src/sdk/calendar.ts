/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { calendarCreateCalendarCalendar } from "../funcs/calendarCreateCalendarCalendar.js";
import { calendarCreateCalendarEvent } from "../funcs/calendarCreateCalendarEvent.js";
import { calendarCreateCalendarLink } from "../funcs/calendarCreateCalendarLink.js";
import { calendarGetCalendarCalendar } from "../funcs/calendarGetCalendarCalendar.js";
import { calendarGetCalendarEvent } from "../funcs/calendarGetCalendarEvent.js";
import { calendarGetCalendarLink } from "../funcs/calendarGetCalendarLink.js";
import { calendarGetCalendarRecording } from "../funcs/calendarGetCalendarRecording.js";
import { calendarListCalendarBusies } from "../funcs/calendarListCalendarBusies.js";
import { calendarListCalendarCalendars } from "../funcs/calendarListCalendarCalendars.js";
import { calendarListCalendarEvents } from "../funcs/calendarListCalendarEvents.js";
import { calendarListCalendarLinks } from "../funcs/calendarListCalendarLinks.js";
import { calendarListCalendarRecordings } from "../funcs/calendarListCalendarRecordings.js";
import { calendarPatchCalendarCalendar } from "../funcs/calendarPatchCalendarCalendar.js";
import { calendarPatchCalendarEvent } from "../funcs/calendarPatchCalendarEvent.js";
import { calendarPatchCalendarLink } from "../funcs/calendarPatchCalendarLink.js";
import { calendarRemoveCalendarCalendar } from "../funcs/calendarRemoveCalendarCalendar.js";
import { calendarRemoveCalendarEvent } from "../funcs/calendarRemoveCalendarEvent.js";
import { calendarRemoveCalendarLink } from "../funcs/calendarRemoveCalendarLink.js";
import { calendarUpdateCalendarCalendar } from "../funcs/calendarUpdateCalendarCalendar.js";
import { calendarUpdateCalendarEvent } from "../funcs/calendarUpdateCalendarEvent.js";
import { calendarUpdateCalendarLink } from "../funcs/calendarUpdateCalendarLink.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Calendar extends ClientSDK {
  /**
   * Create a calendar
   */
  async createCalendarCalendar(
    request: operations.CreateCalendarCalendarRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarCalendar> {
    return unwrapAsync(calendarCreateCalendarCalendar(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an event
   */
  async createCalendarEvent(
    request: operations.CreateCalendarEventRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarEvent> {
    return unwrapAsync(calendarCreateCalendarEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a link
   */
  async createCalendarLink(
    request: operations.CreateCalendarLinkRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarLink> {
    return unwrapAsync(calendarCreateCalendarLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a calendar
   */
  async getCalendarCalendar(
    request: operations.GetCalendarCalendarRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarCalendar> {
    return unwrapAsync(calendarGetCalendarCalendar(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an event
   */
  async getCalendarEvent(
    request: operations.GetCalendarEventRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarEvent> {
    return unwrapAsync(calendarGetCalendarEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a link
   */
  async getCalendarLink(
    request: operations.GetCalendarLinkRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarLink> {
    return unwrapAsync(calendarGetCalendarLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a recording
   */
  async getCalendarRecording(
    request: operations.GetCalendarRecordingRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarRecording> {
    return unwrapAsync(calendarGetCalendarRecording(
      this,
      request,
      options,
    ));
  }

  /**
   * List all busies
   */
  async listCalendarBusies(
    request: operations.ListCalendarBusiesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CalendarBusy>> {
    return unwrapAsync(calendarListCalendarBusies(
      this,
      request,
      options,
    ));
  }

  /**
   * List all calendars
   */
  async listCalendarCalendars(
    request: operations.ListCalendarCalendarsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CalendarCalendar>> {
    return unwrapAsync(calendarListCalendarCalendars(
      this,
      request,
      options,
    ));
  }

  /**
   * List all events
   */
  async listCalendarEvents(
    request: operations.ListCalendarEventsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CalendarEvent>> {
    return unwrapAsync(calendarListCalendarEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * List all links
   */
  async listCalendarLinks(
    request: operations.ListCalendarLinksRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CalendarLink>> {
    return unwrapAsync(calendarListCalendarLinks(
      this,
      request,
      options,
    ));
  }

  /**
   * List all recordings
   */
  async listCalendarRecordings(
    request: operations.ListCalendarRecordingsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CalendarRecording>> {
    return unwrapAsync(calendarListCalendarRecordings(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a calendar
   */
  async patchCalendarCalendar(
    request: operations.PatchCalendarCalendarRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarCalendar> {
    return unwrapAsync(calendarPatchCalendarCalendar(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an event
   */
  async patchCalendarEvent(
    request: operations.PatchCalendarEventRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarEvent> {
    return unwrapAsync(calendarPatchCalendarEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a link
   */
  async patchCalendarLink(
    request: operations.PatchCalendarLinkRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarLink> {
    return unwrapAsync(calendarPatchCalendarLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a calendar
   */
  async removeCalendarCalendar(
    request: operations.RemoveCalendarCalendarRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCalendarCalendarResponse | undefined> {
    return unwrapAsync(calendarRemoveCalendarCalendar(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an event
   */
  async removeCalendarEvent(
    request: operations.RemoveCalendarEventRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCalendarEventResponse | undefined> {
    return unwrapAsync(calendarRemoveCalendarEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a link
   */
  async removeCalendarLink(
    request: operations.RemoveCalendarLinkRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCalendarLinkResponse | undefined> {
    return unwrapAsync(calendarRemoveCalendarLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a calendar
   */
  async updateCalendarCalendar(
    request: operations.UpdateCalendarCalendarRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarCalendar> {
    return unwrapAsync(calendarUpdateCalendarCalendar(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an event
   */
  async updateCalendarEvent(
    request: operations.UpdateCalendarEventRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarEvent> {
    return unwrapAsync(calendarUpdateCalendarEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a link
   */
  async updateCalendarLink(
    request: operations.UpdateCalendarLinkRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarLink> {
    return unwrapAsync(calendarUpdateCalendarLink(
      this,
      request,
      options,
    ));
  }
}
