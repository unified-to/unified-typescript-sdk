/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { lmsCreateLmsCourse } from "../funcs/lmsCreateLmsCourse.js";
import { lmsGetLmsCourse } from "../funcs/lmsGetLmsCourse.js";
import { lmsListLmsCourses } from "../funcs/lmsListLmsCourses.js";
import { lmsPatchLmsCourse } from "../funcs/lmsPatchLmsCourse.js";
import { lmsRemoveLmsCourse } from "../funcs/lmsRemoveLmsCourse.js";
import { lmsUpdateLmsCourse } from "../funcs/lmsUpdateLmsCourse.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Course extends ClientSDK {
  /**
   * Create a course
   */
  async createLmsCourse(
    request: operations.CreateLmsCourseRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsCourse> {
    return unwrapAsync(lmsCreateLmsCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a course
   */
  async getLmsCourse(
    request: operations.GetLmsCourseRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsCourse> {
    return unwrapAsync(lmsGetLmsCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * List all courses
   */
  async listLmsCourses(
    request: operations.ListLmsCoursesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.LmsCourse>> {
    return unwrapAsync(lmsListLmsCourses(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a course
   */
  async patchLmsCourse(
    request: operations.PatchLmsCourseRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsCourse> {
    return unwrapAsync(lmsPatchLmsCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a course
   */
  async removeLmsCourse(
    request: operations.RemoveLmsCourseRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveLmsCourseResponse | undefined> {
    return unwrapAsync(lmsRemoveLmsCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a course
   */
  async updateLmsCourse(
    request: operations.UpdateLmsCourseRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsCourse> {
    return unwrapAsync(lmsUpdateLmsCourse(
      this,
      request,
      options,
    ));
  }
}
