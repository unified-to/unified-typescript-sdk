/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { leadCreateCrmLead } from "../funcs/leadCreateCrmLead.js";
import { leadGetCrmLead } from "../funcs/leadGetCrmLead.js";
import { leadListCrmLeads } from "../funcs/leadListCrmLeads.js";
import { leadPatchCrmLead } from "../funcs/leadPatchCrmLead.js";
import { leadRemoveCrmLead } from "../funcs/leadRemoveCrmLead.js";
import { leadUpdateCrmLead } from "../funcs/leadUpdateCrmLead.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Lead extends ClientSDK {
    /**
     * Create a lead
     */
    async createCrmLead(
        request: operations.CreateCrmLeadRequest,
        options?: RequestOptions
    ): Promise<shared.CrmLead> {
        return unwrapAsync(leadCreateCrmLead(this, request, options));
    }

    /**
     * Retrieve a lead
     */
    async getCrmLead(
        request: operations.GetCrmLeadRequest,
        options?: RequestOptions
    ): Promise<shared.CrmLead> {
        return unwrapAsync(leadGetCrmLead(this, request, options));
    }

    /**
     * List all leads
     */
    async listCrmLeads(
        request: operations.ListCrmLeadsRequest,
        options?: RequestOptions
    ): Promise<Array<shared.CrmLead>> {
        return unwrapAsync(leadListCrmLeads(this, request, options));
    }

    /**
     * Update a lead
     */
    async patchCrmLead(
        request: operations.PatchCrmLeadRequest,
        options?: RequestOptions
    ): Promise<shared.CrmLead> {
        return unwrapAsync(leadPatchCrmLead(this, request, options));
    }

    /**
     * Remove a lead
     */
    async removeCrmLead(
        request: operations.RemoveCrmLeadRequest,
        options?: RequestOptions
    ): Promise<string> {
        return unwrapAsync(leadRemoveCrmLead(this, request, options));
    }

    /**
     * Update a lead
     */
    async updateCrmLead(
        request: operations.UpdateCrmLeadRequest,
        options?: RequestOptions
    ): Promise<shared.CrmLead> {
        return unwrapAsync(leadUpdateCrmLead(this, request, options));
    }
}
