/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { crmCreateCrmLead } from "../funcs/crmCreateCrmLead.js";
import { crmGetCrmLead } from "../funcs/crmGetCrmLead.js";
import { crmListCrmLeads } from "../funcs/crmListCrmLeads.js";
import { crmPatchCrmLead } from "../funcs/crmPatchCrmLead.js";
import { crmRemoveCrmLead } from "../funcs/crmRemoveCrmLead.js";
import { crmUpdateCrmLead } from "../funcs/crmUpdateCrmLead.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Lead extends ClientSDK {
  /**
   * Create a lead
   */
  async createCrmLead(
    request: operations.CreateCrmLeadRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmLead> {
    return unwrapAsync(crmCreateCrmLead(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a lead
   */
  async getCrmLead(
    request: operations.GetCrmLeadRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmLead> {
    return unwrapAsync(crmGetCrmLead(
      this,
      request,
      options,
    ));
  }

  /**
   * List all leads
   */
  async listCrmLeads(
    request: operations.ListCrmLeadsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CrmLead>> {
    return unwrapAsync(crmListCrmLeads(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a lead
   */
  async patchCrmLead(
    request: operations.PatchCrmLeadRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmLead> {
    return unwrapAsync(crmPatchCrmLead(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a lead
   */
  async removeCrmLead(
    request: operations.RemoveCrmLeadRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCrmLeadResponse | undefined> {
    return unwrapAsync(crmRemoveCrmLead(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a lead
   */
  async updateCrmLead(
    request: operations.UpdateCrmLeadRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmLead> {
    return unwrapAsync(crmUpdateCrmLead(
      this,
      request,
      options,
    ));
  }
}
