/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { pipelineCreateCrmPipeline } from "../funcs/pipelineCreateCrmPipeline.js";
import { pipelineGetCrmPipeline } from "../funcs/pipelineGetCrmPipeline.js";
import { pipelineListCrmPipelines } from "../funcs/pipelineListCrmPipelines.js";
import { pipelinePatchCrmPipeline } from "../funcs/pipelinePatchCrmPipeline.js";
import { pipelineRemoveCrmPipeline } from "../funcs/pipelineRemoveCrmPipeline.js";
import { pipelineUpdateCrmPipeline } from "../funcs/pipelineUpdateCrmPipeline.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Pipeline extends ClientSDK {
    /**
     * Create a pipeline
     */
    async createCrmPipeline(
        request: operations.CreateCrmPipelineRequest,
        options?: RequestOptions
    ): Promise<shared.CrmPipeline> {
        return unwrapAsync(pipelineCreateCrmPipeline(this, request, options));
    }

    /**
     * Retrieve a pipeline
     */
    async getCrmPipeline(
        request: operations.GetCrmPipelineRequest,
        options?: RequestOptions
    ): Promise<shared.CrmPipeline> {
        return unwrapAsync(pipelineGetCrmPipeline(this, request, options));
    }

    /**
     * List all pipelines
     */
    async listCrmPipelines(
        request: operations.ListCrmPipelinesRequest,
        options?: RequestOptions
    ): Promise<Array<shared.CrmPipeline>> {
        return unwrapAsync(pipelineListCrmPipelines(this, request, options));
    }

    /**
     * Update a pipeline
     */
    async patchCrmPipeline(
        request: operations.PatchCrmPipelineRequest,
        options?: RequestOptions
    ): Promise<shared.CrmPipeline> {
        return unwrapAsync(pipelinePatchCrmPipeline(this, request, options));
    }

    /**
     * Remove a pipeline
     */
    async removeCrmPipeline(
        request: operations.RemoveCrmPipelineRequest,
        options?: RequestOptions
    ): Promise<string> {
        return unwrapAsync(pipelineRemoveCrmPipeline(this, request, options));
    }

    /**
     * Update a pipeline
     */
    async updateCrmPipeline(
        request: operations.UpdateCrmPipelineRequest,
        options?: RequestOptions
    ): Promise<shared.CrmPipeline> {
        return unwrapAsync(pipelineUpdateCrmPipeline(this, request, options));
    }
}
