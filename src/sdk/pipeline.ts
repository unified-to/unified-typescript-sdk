/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { crmCreateCrmPipeline } from "../funcs/crmCreateCrmPipeline.js";
import { crmGetCrmPipeline } from "../funcs/crmGetCrmPipeline.js";
import { crmListCrmPipelines } from "../funcs/crmListCrmPipelines.js";
import { crmPatchCrmPipeline } from "../funcs/crmPatchCrmPipeline.js";
import { crmRemoveCrmPipeline } from "../funcs/crmRemoveCrmPipeline.js";
import { crmUpdateCrmPipeline } from "../funcs/crmUpdateCrmPipeline.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Pipeline extends ClientSDK {
  /**
   * Create a pipeline
   */
  async createCrmPipeline(
    request: operations.CreateCrmPipelineRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmPipeline> {
    return unwrapAsync(crmCreateCrmPipeline(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a pipeline
   */
  async getCrmPipeline(
    request: operations.GetCrmPipelineRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmPipeline> {
    return unwrapAsync(crmGetCrmPipeline(
      this,
      request,
      options,
    ));
  }

  /**
   * List all pipelines
   */
  async listCrmPipelines(
    request: operations.ListCrmPipelinesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CrmPipeline>> {
    return unwrapAsync(crmListCrmPipelines(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a pipeline
   */
  async patchCrmPipeline(
    request: operations.PatchCrmPipelineRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmPipeline> {
    return unwrapAsync(crmPatchCrmPipeline(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a pipeline
   */
  async removeCrmPipeline(
    request: operations.RemoveCrmPipelineRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCrmPipelineResponse | undefined> {
    return unwrapAsync(crmRemoveCrmPipeline(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a pipeline
   */
  async updateCrmPipeline(
    request: operations.UpdateCrmPipelineRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmPipeline> {
    return unwrapAsync(crmUpdateCrmPipeline(
      this,
      request,
      options,
    ));
  }
}
