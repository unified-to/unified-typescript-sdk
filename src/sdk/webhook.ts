/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { unifiedCreateUnifiedWebhook } from "../funcs/unifiedCreateUnifiedWebhook.js";
import { unifiedGetUnifiedWebhook } from "../funcs/unifiedGetUnifiedWebhook.js";
import { unifiedListUnifiedWebhooks } from "../funcs/unifiedListUnifiedWebhooks.js";
import { unifiedPatchUnifiedWebhook } from "../funcs/unifiedPatchUnifiedWebhook.js";
import { unifiedPatchUnifiedWebhookTrigger } from "../funcs/unifiedPatchUnifiedWebhookTrigger.js";
import { unifiedRemoveUnifiedWebhook } from "../funcs/unifiedRemoveUnifiedWebhook.js";
import { unifiedUpdateUnifiedWebhook } from "../funcs/unifiedUpdateUnifiedWebhook.js";
import { unifiedUpdateUnifiedWebhookTrigger } from "../funcs/unifiedUpdateUnifiedWebhookTrigger.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Webhook extends ClientSDK {
  /**
   * Create webhook subscription
   *
   * @remarks
   * The data payload received by your server is described at https://docs.unified.to/unified/overview. The `interval` field can be set as low as 1 minute for paid accounts, and 60 minutes for free accounts.
   */
  async createUnifiedWebhook(
    request: operations.CreateUnifiedWebhookRequest,
    options?: RequestOptions,
  ): Promise<shared.Webhook> {
    return unwrapAsync(unifiedCreateUnifiedWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve webhook by its ID
   */
  async getUnifiedWebhook(
    request: operations.GetUnifiedWebhookRequest,
    options?: RequestOptions,
  ): Promise<shared.Webhook> {
    return unwrapAsync(unifiedGetUnifiedWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns all registered webhooks
   */
  async listUnifiedWebhooks(
    request: operations.ListUnifiedWebhooksRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.Webhook>> {
    return unwrapAsync(unifiedListUnifiedWebhooks(
      this,
      request,
      options,
    ));
  }

  /**
   * Update webhook subscription
   */
  async patchUnifiedWebhook(
    request: operations.PatchUnifiedWebhookRequest,
    options?: RequestOptions,
  ): Promise<shared.Webhook> {
    return unwrapAsync(unifiedPatchUnifiedWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Trigger webhook
   */
  async patchUnifiedWebhookTrigger(
    request: operations.PatchUnifiedWebhookTriggerRequest,
    options?: RequestOptions,
  ): Promise<operations.PatchUnifiedWebhookTriggerResponse | undefined> {
    return unwrapAsync(unifiedPatchUnifiedWebhookTrigger(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove webhook subscription
   */
  async removeUnifiedWebhook(
    request: operations.RemoveUnifiedWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveUnifiedWebhookResponse | undefined> {
    return unwrapAsync(unifiedRemoveUnifiedWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Update webhook subscription
   */
  async updateUnifiedWebhook(
    request: operations.UpdateUnifiedWebhookRequest,
    options?: RequestOptions,
  ): Promise<shared.Webhook> {
    return unwrapAsync(unifiedUpdateUnifiedWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Trigger webhook
   */
  async updateUnifiedWebhookTrigger(
    request: operations.UpdateUnifiedWebhookTriggerRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateUnifiedWebhookTriggerResponse | undefined> {
    return unwrapAsync(unifiedUpdateUnifiedWebhookTrigger(
      this,
      request,
      options,
    ));
  }
}
