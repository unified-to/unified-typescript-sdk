/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhookCreateUnifiedWebhook } from "../funcs/webhookCreateUnifiedWebhook.js";
import { webhookGetUnifiedWebhook } from "../funcs/webhookGetUnifiedWebhook.js";
import { webhookListUnifiedWebhooks } from "../funcs/webhookListUnifiedWebhooks.js";
import { webhookPatchUnifiedWebhookTrigger } from "../funcs/webhookPatchUnifiedWebhookTrigger.js";
import { webhookRemoveUnifiedWebhook } from "../funcs/webhookRemoveUnifiedWebhook.js";
import { webhookUpdateUnifiedWebhookTrigger } from "../funcs/webhookUpdateUnifiedWebhookTrigger.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Webhook extends ClientSDK {
    /**
     * Create webhook subscription
     *
     * @remarks
     * The data payload received by your server is described at https://docs.unified.to/unified/overview. The `interval` field can be set as low as 1 minute for paid accounts, and 60 minutes for free accounts.
     */
    async createUnifiedWebhook(
        request: operations.CreateUnifiedWebhookRequest,
        options?: RequestOptions
    ): Promise<shared.Webhook> {
        return unwrapAsync(webhookCreateUnifiedWebhook(this, request, options));
    }

    /**
     * Retrieve webhook by its ID
     */
    async getUnifiedWebhook(
        request: operations.GetUnifiedWebhookRequest,
        options?: RequestOptions
    ): Promise<shared.Webhook> {
        return unwrapAsync(webhookGetUnifiedWebhook(this, request, options));
    }

    /**
     * Returns all registered webhooks
     */
    async listUnifiedWebhooks(
        request: operations.ListUnifiedWebhooksRequest,
        options?: RequestOptions
    ): Promise<Array<shared.Webhook>> {
        return unwrapAsync(webhookListUnifiedWebhooks(this, request, options));
    }

    /**
     * Trigger webhook
     */
    async patchUnifiedWebhookTrigger(
        request: operations.PatchUnifiedWebhookTriggerRequest,
        options?: RequestOptions
    ): Promise<string> {
        return unwrapAsync(webhookPatchUnifiedWebhookTrigger(this, request, options));
    }

    /**
     * Remove webhook subscription
     */
    async removeUnifiedWebhook(
        request: operations.RemoveUnifiedWebhookRequest,
        options?: RequestOptions
    ): Promise<string> {
        return unwrapAsync(webhookRemoveUnifiedWebhook(this, request, options));
    }

    /**
     * Trigger webhook
     */
    async updateUnifiedWebhookTrigger(
        request: operations.UpdateUnifiedWebhookTriggerRequest,
        options?: RequestOptions
    ): Promise<string> {
        return unwrapAsync(webhookUpdateUnifiedWebhookTrigger(this, request, options));
    }
}
