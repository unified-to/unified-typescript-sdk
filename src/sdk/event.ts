/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventCreateCalendarEvent } from "../funcs/eventCreateCalendarEvent.js";
import { eventCreateCrmEvent } from "../funcs/eventCreateCrmEvent.js";
import { eventGetCalendarEvent } from "../funcs/eventGetCalendarEvent.js";
import { eventGetCrmEvent } from "../funcs/eventGetCrmEvent.js";
import { eventListCalendarEvents } from "../funcs/eventListCalendarEvents.js";
import { eventListCrmEvents } from "../funcs/eventListCrmEvents.js";
import { eventPatchCalendarEvent } from "../funcs/eventPatchCalendarEvent.js";
import { eventPatchCrmEvent } from "../funcs/eventPatchCrmEvent.js";
import { eventRemoveCalendarEvent } from "../funcs/eventRemoveCalendarEvent.js";
import { eventRemoveCrmEvent } from "../funcs/eventRemoveCrmEvent.js";
import { eventUpdateCalendarEvent } from "../funcs/eventUpdateCalendarEvent.js";
import { eventUpdateCrmEvent } from "../funcs/eventUpdateCrmEvent.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Event extends ClientSDK {
  /**
   * Create an event
   */
  async createCalendarEvent(
    request: operations.CreateCalendarEventRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarEvent> {
    return unwrapAsync(eventCreateCalendarEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an event
   */
  async createCrmEvent(
    request: operations.CreateCrmEventRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmEvent> {
    return unwrapAsync(eventCreateCrmEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an event
   */
  async getCalendarEvent(
    request: operations.GetCalendarEventRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarEvent> {
    return unwrapAsync(eventGetCalendarEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an event
   */
  async getCrmEvent(
    request: operations.GetCrmEventRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmEvent> {
    return unwrapAsync(eventGetCrmEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * List all events
   */
  async listCalendarEvents(
    request: operations.ListCalendarEventsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CalendarEvent>> {
    return unwrapAsync(eventListCalendarEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * List all events
   */
  async listCrmEvents(
    request: operations.ListCrmEventsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CrmEvent>> {
    return unwrapAsync(eventListCrmEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an event
   */
  async patchCalendarEvent(
    request: operations.PatchCalendarEventRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarEvent> {
    return unwrapAsync(eventPatchCalendarEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an event
   */
  async patchCrmEvent(
    request: operations.PatchCrmEventRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmEvent> {
    return unwrapAsync(eventPatchCrmEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an event
   */
  async removeCalendarEvent(
    request: operations.RemoveCalendarEventRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCalendarEventResponse | undefined> {
    return unwrapAsync(eventRemoveCalendarEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an event
   */
  async removeCrmEvent(
    request: operations.RemoveCrmEventRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCrmEventResponse | undefined> {
    return unwrapAsync(eventRemoveCrmEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an event
   */
  async updateCalendarEvent(
    request: operations.UpdateCalendarEventRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarEvent> {
    return unwrapAsync(eventUpdateCalendarEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an event
   */
  async updateCrmEvent(
    request: operations.UpdateCrmEventRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmEvent> {
    return unwrapAsync(eventUpdateCrmEvent(
      this,
      request,
      options,
    ));
  }
}
