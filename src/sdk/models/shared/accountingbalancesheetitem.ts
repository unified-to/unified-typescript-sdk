/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PropertyAccountingBalanceSheetItemSubItems,
  PropertyAccountingBalanceSheetItemSubItems$inboundSchema,
  PropertyAccountingBalanceSheetItemSubItems$Outbound,
  PropertyAccountingBalanceSheetItemSubItems$outboundSchema,
} from "./propertyaccountingbalancesheetitemsubitems.js";

export type AccountingBalanceSheetItem = {
  accountId?: string | undefined;
  amount?: number | undefined;
  name?: string | undefined;
  subItems?: Array<PropertyAccountingBalanceSheetItemSubItems> | undefined;
};

/** @internal */
export const AccountingBalanceSheetItem$inboundSchema: z.ZodType<
  AccountingBalanceSheetItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string().optional(),
  amount: z.number().optional(),
  name: z.string().optional(),
  sub_items: z.array(PropertyAccountingBalanceSheetItemSubItems$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "sub_items": "subItems",
  });
});

/** @internal */
export type AccountingBalanceSheetItem$Outbound = {
  account_id?: string | undefined;
  amount?: number | undefined;
  name?: string | undefined;
  sub_items?:
    | Array<PropertyAccountingBalanceSheetItemSubItems$Outbound>
    | undefined;
};

/** @internal */
export const AccountingBalanceSheetItem$outboundSchema: z.ZodType<
  AccountingBalanceSheetItem$Outbound,
  z.ZodTypeDef,
  AccountingBalanceSheetItem
> = z.object({
  accountId: z.string().optional(),
  amount: z.number().optional(),
  name: z.string().optional(),
  subItems: z.array(PropertyAccountingBalanceSheetItemSubItems$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    subItems: "sub_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBalanceSheetItem$ {
  /** @deprecated use `AccountingBalanceSheetItem$inboundSchema` instead. */
  export const inboundSchema = AccountingBalanceSheetItem$inboundSchema;
  /** @deprecated use `AccountingBalanceSheetItem$outboundSchema` instead. */
  export const outboundSchema = AccountingBalanceSheetItem$outboundSchema;
  /** @deprecated use `AccountingBalanceSheetItem$Outbound` instead. */
  export type Outbound = AccountingBalanceSheetItem$Outbound;
}

export function accountingBalanceSheetItemToJSON(
  accountingBalanceSheetItem: AccountingBalanceSheetItem,
): string {
  return JSON.stringify(
    AccountingBalanceSheetItem$outboundSchema.parse(accountingBalanceSheetItem),
  );
}

export function accountingBalanceSheetItemFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBalanceSheetItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBalanceSheetItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBalanceSheetItem' from JSON`,
  );
}
