/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  KmsPageMetadata,
  KmsPageMetadata$inboundSchema,
  KmsPageMetadata$Outbound,
  KmsPageMetadata$outboundSchema,
} from "./kmspagemetadata.js";

export const KmsPageType = {
  Html: "HTML",
  Markdown: "MARKDOWN",
  Text: "TEXT",
  Other: "OTHER",
} as const;
export type KmsPageType = ClosedEnum<typeof KmsPageType>;

export type KmsPage = {
  createdAt?: Date | undefined;
  downloadUrl?: string | undefined;
  hasChildren?: boolean | undefined;
  id?: string | undefined;
  isActive?: boolean | undefined;
  metadata?: Array<KmsPageMetadata> | undefined;
  parentPageId?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  spaceId?: string | undefined;
  title: string;
  type: KmsPageType;
  updatedAt?: Date | undefined;
  userId?: string | undefined;
  webUrl?: string | undefined;
};

/** @internal */
export const KmsPageType$inboundSchema: z.ZodNativeEnum<typeof KmsPageType> = z
  .nativeEnum(KmsPageType);

/** @internal */
export const KmsPageType$outboundSchema: z.ZodNativeEnum<typeof KmsPageType> =
  KmsPageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KmsPageType$ {
  /** @deprecated use `KmsPageType$inboundSchema` instead. */
  export const inboundSchema = KmsPageType$inboundSchema;
  /** @deprecated use `KmsPageType$outboundSchema` instead. */
  export const outboundSchema = KmsPageType$outboundSchema;
}

/** @internal */
export const KmsPage$inboundSchema: z.ZodType<KmsPage, z.ZodTypeDef, unknown> =
  z.object({
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    download_url: z.string().optional(),
    has_children: z.boolean().optional(),
    id: z.string().optional(),
    is_active: z.boolean().optional(),
    metadata: z.array(KmsPageMetadata$inboundSchema).optional(),
    parent_page_id: z.string().optional(),
    raw: z.record(z.any()).optional(),
    space_id: z.string().optional(),
    title: z.string(),
    type: KmsPageType$inboundSchema,
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    user_id: z.string().optional(),
    web_url: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "download_url": "downloadUrl",
      "has_children": "hasChildren",
      "is_active": "isActive",
      "parent_page_id": "parentPageId",
      "space_id": "spaceId",
      "updated_at": "updatedAt",
      "user_id": "userId",
      "web_url": "webUrl",
    });
  });

/** @internal */
export type KmsPage$Outbound = {
  created_at?: string | undefined;
  download_url?: string | undefined;
  has_children?: boolean | undefined;
  id?: string | undefined;
  is_active?: boolean | undefined;
  metadata?: Array<KmsPageMetadata$Outbound> | undefined;
  parent_page_id?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  space_id?: string | undefined;
  title: string;
  type: string;
  updated_at?: string | undefined;
  user_id?: string | undefined;
  web_url?: string | undefined;
};

/** @internal */
export const KmsPage$outboundSchema: z.ZodType<
  KmsPage$Outbound,
  z.ZodTypeDef,
  KmsPage
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  downloadUrl: z.string().optional(),
  hasChildren: z.boolean().optional(),
  id: z.string().optional(),
  isActive: z.boolean().optional(),
  metadata: z.array(KmsPageMetadata$outboundSchema).optional(),
  parentPageId: z.string().optional(),
  raw: z.record(z.any()).optional(),
  spaceId: z.string().optional(),
  title: z.string(),
  type: KmsPageType$outboundSchema,
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userId: z.string().optional(),
  webUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    downloadUrl: "download_url",
    hasChildren: "has_children",
    isActive: "is_active",
    parentPageId: "parent_page_id",
    spaceId: "space_id",
    updatedAt: "updated_at",
    userId: "user_id",
    webUrl: "web_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KmsPage$ {
  /** @deprecated use `KmsPage$inboundSchema` instead. */
  export const inboundSchema = KmsPage$inboundSchema;
  /** @deprecated use `KmsPage$outboundSchema` instead. */
  export const outboundSchema = KmsPage$outboundSchema;
  /** @deprecated use `KmsPage$Outbound` instead. */
  export type Outbound = KmsPage$Outbound;
}

export function kmsPageToJSON(kmsPage: KmsPage): string {
  return JSON.stringify(KmsPage$outboundSchema.parse(kmsPage));
}

export function kmsPageFromJSON(
  jsonString: string,
): SafeParseResult<KmsPage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KmsPage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KmsPage' from JSON`,
  );
}
