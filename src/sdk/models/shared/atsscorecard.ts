/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AtsScorecardQuestion,
  AtsScorecardQuestion$inboundSchema,
  AtsScorecardQuestion$Outbound,
  AtsScorecardQuestion$outboundSchema,
} from "./atsscorecardquestion.js";

export const Recommendation = {
  DefinitelyNo: "DEFINITELY_NO",
  No: "NO",
  Yes: "YES",
  StrongYes: "STRONG_YES",
} as const;
export type Recommendation = OpenEnum<typeof Recommendation>;

export type AtsScorecard = {
  applicationId?: string | undefined;
  candidateId?: string | undefined;
  comment?: string | undefined;
  createdAt?: Date | undefined;
  id?: string | undefined;
  interviewId?: string | undefined;
  interviewerId?: string | undefined;
  jobId?: string | undefined;
  questions?: Array<AtsScorecardQuestion> | undefined;
  raw?: { [k: string]: any } | undefined;
  recommendation?: Recommendation | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const Recommendation$inboundSchema: z.ZodType<
  Recommendation,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Recommendation),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Recommendation$outboundSchema: z.ZodType<
  Recommendation,
  z.ZodTypeDef,
  Recommendation
> = z.union([
  z.nativeEnum(Recommendation),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Recommendation$ {
  /** @deprecated use `Recommendation$inboundSchema` instead. */
  export const inboundSchema = Recommendation$inboundSchema;
  /** @deprecated use `Recommendation$outboundSchema` instead. */
  export const outboundSchema = Recommendation$outboundSchema;
}

/** @internal */
export const AtsScorecard$inboundSchema: z.ZodType<
  AtsScorecard,
  z.ZodTypeDef,
  unknown
> = z.object({
  application_id: z.string().optional(),
  candidate_id: z.string().optional(),
  comment: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  id: z.string().optional(),
  interview_id: z.string().optional(),
  interviewer_id: z.string().optional(),
  job_id: z.string().optional(),
  questions: z.array(AtsScorecardQuestion$inboundSchema).optional(),
  raw: z.record(z.any()).optional(),
  recommendation: Recommendation$inboundSchema.optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "application_id": "applicationId",
    "candidate_id": "candidateId",
    "created_at": "createdAt",
    "interview_id": "interviewId",
    "interviewer_id": "interviewerId",
    "job_id": "jobId",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AtsScorecard$Outbound = {
  application_id?: string | undefined;
  candidate_id?: string | undefined;
  comment?: string | undefined;
  created_at?: string | undefined;
  id?: string | undefined;
  interview_id?: string | undefined;
  interviewer_id?: string | undefined;
  job_id?: string | undefined;
  questions?: Array<AtsScorecardQuestion$Outbound> | undefined;
  raw?: { [k: string]: any } | undefined;
  recommendation?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const AtsScorecard$outboundSchema: z.ZodType<
  AtsScorecard$Outbound,
  z.ZodTypeDef,
  AtsScorecard
> = z.object({
  applicationId: z.string().optional(),
  candidateId: z.string().optional(),
  comment: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  id: z.string().optional(),
  interviewId: z.string().optional(),
  interviewerId: z.string().optional(),
  jobId: z.string().optional(),
  questions: z.array(AtsScorecardQuestion$outboundSchema).optional(),
  raw: z.record(z.any()).optional(),
  recommendation: Recommendation$outboundSchema.optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    applicationId: "application_id",
    candidateId: "candidate_id",
    createdAt: "created_at",
    interviewId: "interview_id",
    interviewerId: "interviewer_id",
    jobId: "job_id",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsScorecard$ {
  /** @deprecated use `AtsScorecard$inboundSchema` instead. */
  export const inboundSchema = AtsScorecard$inboundSchema;
  /** @deprecated use `AtsScorecard$outboundSchema` instead. */
  export const outboundSchema = AtsScorecard$outboundSchema;
  /** @deprecated use `AtsScorecard$Outbound` instead. */
  export type Outbound = AtsScorecard$Outbound;
}

export function atsScorecardToJSON(atsScorecard: AtsScorecard): string {
  return JSON.stringify(AtsScorecard$outboundSchema.parse(atsScorecard));
}

export function atsScorecardFromJSON(
  jsonString: string,
): SafeParseResult<AtsScorecard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsScorecard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsScorecard' from JSON`,
  );
}
