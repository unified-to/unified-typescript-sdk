/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  AccountingLineitem,
  AccountingLineitem$inboundSchema,
  AccountingLineitem$Outbound,
  AccountingLineitem$outboundSchema,
} from "./accountinglineitem.js";
import {
  PropertyAccountingOrderBillingAddress,
  PropertyAccountingOrderBillingAddress$inboundSchema,
  PropertyAccountingOrderBillingAddress$Outbound,
  PropertyAccountingOrderBillingAddress$outboundSchema,
} from "./propertyaccountingorderbillingaddress.js";
import {
  PropertyAccountingOrderShippingAddress,
  PropertyAccountingOrderShippingAddress$inboundSchema,
  PropertyAccountingOrderShippingAddress$Outbound,
  PropertyAccountingOrderShippingAddress$outboundSchema,
} from "./propertyaccountingordershippingaddress.js";

export const AccountingOrderStatus = {
  Draft: "DRAFT",
  Voided: "VOIDED",
  Authorized: "AUTHORIZED",
  Paid: "PAID",
  PartiallyPaid: "PARTIALLY_PAID",
  PartiallyRefunded: "PARTIALLY_REFUNDED",
  Refunded: "REFUNDED",
} as const;
export type AccountingOrderStatus = ClosedEnum<typeof AccountingOrderStatus>;

export const AccountingOrderType = {
  Sales: "SALES",
  Purchase: "PURCHASE",
} as const;
export type AccountingOrderType = ClosedEnum<typeof AccountingOrderType>;

export type AccountingOrder = {
  accountId?: string | undefined;
  billingAddress?: PropertyAccountingOrderBillingAddress | undefined;
  contactId?: string | undefined;
  createdAt?: Date | undefined;
  currency?: string | undefined;
  id?: string | undefined;
  lineitems?: Array<AccountingLineitem> | undefined;
  raw?: { [k: string]: any } | undefined;
  shippingAddress?: PropertyAccountingOrderShippingAddress | undefined;
  status?: AccountingOrderStatus | undefined;
  totalAmount?: number | undefined;
  type?: AccountingOrderType | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const AccountingOrderStatus$inboundSchema: z.ZodNativeEnum<
  typeof AccountingOrderStatus
> = z.nativeEnum(AccountingOrderStatus);

/** @internal */
export const AccountingOrderStatus$outboundSchema: z.ZodNativeEnum<
  typeof AccountingOrderStatus
> = AccountingOrderStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingOrderStatus$ {
  /** @deprecated use `AccountingOrderStatus$inboundSchema` instead. */
  export const inboundSchema = AccountingOrderStatus$inboundSchema;
  /** @deprecated use `AccountingOrderStatus$outboundSchema` instead. */
  export const outboundSchema = AccountingOrderStatus$outboundSchema;
}

/** @internal */
export const AccountingOrderType$inboundSchema: z.ZodNativeEnum<
  typeof AccountingOrderType
> = z.nativeEnum(AccountingOrderType);

/** @internal */
export const AccountingOrderType$outboundSchema: z.ZodNativeEnum<
  typeof AccountingOrderType
> = AccountingOrderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingOrderType$ {
  /** @deprecated use `AccountingOrderType$inboundSchema` instead. */
  export const inboundSchema = AccountingOrderType$inboundSchema;
  /** @deprecated use `AccountingOrderType$outboundSchema` instead. */
  export const outboundSchema = AccountingOrderType$outboundSchema;
}

/** @internal */
export const AccountingOrder$inboundSchema: z.ZodType<
  AccountingOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string().optional(),
  billing_address: PropertyAccountingOrderBillingAddress$inboundSchema
    .optional(),
  contact_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  lineitems: z.array(AccountingLineitem$inboundSchema).optional(),
  raw: z.record(z.any()).optional(),
  shipping_address: PropertyAccountingOrderShippingAddress$inboundSchema
    .optional(),
  status: AccountingOrderStatus$inboundSchema.optional(),
  total_amount: z.number().optional(),
  type: AccountingOrderType$inboundSchema.optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "billing_address": "billingAddress",
    "contact_id": "contactId",
    "created_at": "createdAt",
    "shipping_address": "shippingAddress",
    "total_amount": "totalAmount",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AccountingOrder$Outbound = {
  account_id?: string | undefined;
  billing_address?: PropertyAccountingOrderBillingAddress$Outbound | undefined;
  contact_id?: string | undefined;
  created_at?: string | undefined;
  currency?: string | undefined;
  id?: string | undefined;
  lineitems?: Array<AccountingLineitem$Outbound> | undefined;
  raw?: { [k: string]: any } | undefined;
  shipping_address?:
    | PropertyAccountingOrderShippingAddress$Outbound
    | undefined;
  status?: string | undefined;
  total_amount?: number | undefined;
  type?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const AccountingOrder$outboundSchema: z.ZodType<
  AccountingOrder$Outbound,
  z.ZodTypeDef,
  AccountingOrder
> = z.object({
  accountId: z.string().optional(),
  billingAddress: PropertyAccountingOrderBillingAddress$outboundSchema
    .optional(),
  contactId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  lineitems: z.array(AccountingLineitem$outboundSchema).optional(),
  raw: z.record(z.any()).optional(),
  shippingAddress: PropertyAccountingOrderShippingAddress$outboundSchema
    .optional(),
  status: AccountingOrderStatus$outboundSchema.optional(),
  totalAmount: z.number().optional(),
  type: AccountingOrderType$outboundSchema.optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    billingAddress: "billing_address",
    contactId: "contact_id",
    createdAt: "created_at",
    shippingAddress: "shipping_address",
    totalAmount: "total_amount",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingOrder$ {
  /** @deprecated use `AccountingOrder$inboundSchema` instead. */
  export const inboundSchema = AccountingOrder$inboundSchema;
  /** @deprecated use `AccountingOrder$outboundSchema` instead. */
  export const outboundSchema = AccountingOrder$outboundSchema;
  /** @deprecated use `AccountingOrder$Outbound` instead. */
  export type Outbound = AccountingOrder$Outbound;
}
