/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender =
  {
    Female: "Female",
    Male: "Male",
  } as const;
export type PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender =
  OpenEnum<
    typeof PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender
  >;

export type PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User = {
  dateOfBirth?: Date | undefined;
  gender?:
    | PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender
    | undefined;
  manager?: string | undefined;
  team?: string | undefined;
};

/** @internal */
export const PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender$inboundSchema:
  z.ZodType<
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender,
    z.ZodTypeDef,
    unknown
  > = z
    .union([
      z.nativeEnum(
        PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender,
      ),
      z.string().transform(catchUnrecognizedEnum),
    ]);

/** @internal */
export const PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender$outboundSchema:
  z.ZodType<
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender,
    z.ZodTypeDef,
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender
  > = z.union([
    z.nativeEnum(
      PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender,
    ),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender$ {
  /** @deprecated use `PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender$inboundSchema` instead. */
  export const inboundSchema =
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender$inboundSchema;
  /** @deprecated use `PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender$outboundSchema` instead. */
  export const outboundSchema =
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender$outboundSchema;
}

/** @internal */
export const PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$inboundSchema:
  z.ZodType<
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "Date of Birth": z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    Gender:
      PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender$inboundSchema
        .optional(),
    Manager: z.string().optional(),
    Team: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "Date of Birth": "dateOfBirth",
      "Gender": "gender",
      "Manager": "manager",
      "Team": "team",
    });
  });

/** @internal */
export type PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$Outbound =
  {
    "Date of Birth"?: string | undefined;
    Gender?: string | undefined;
    Manager?: string | undefined;
    Team?: string | undefined;
  };

/** @internal */
export const PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$outboundSchema:
  z.ZodType<
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$Outbound,
    z.ZodTypeDef,
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User
  > = z.object({
    dateOfBirth: z.date().transform(v => v.toISOString()).optional(),
    gender:
      PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserGender$outboundSchema
        .optional(),
    manager: z.string().optional(),
    team: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      dateOfBirth: "Date of Birth",
      gender: "Gender",
      manager: "Manager",
      team: "Team",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$ {
  /** @deprecated use `PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$inboundSchema` instead. */
  export const inboundSchema =
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$inboundSchema;
  /** @deprecated use `PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$outboundSchema` instead. */
  export const outboundSchema =
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$outboundSchema;
  /** @deprecated use `PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$Outbound` instead. */
  export type Outbound =
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$Outbound;
}

export function propertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserToJSON(
  propertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User:
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User,
): string {
  return JSON.stringify(
    PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$outboundSchema
      .parse(propertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User),
  );
}

export function propertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20UserFromJSON(
  jsonString: string,
): SafeParseResult<
  PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User' from JSON`,
  );
}
