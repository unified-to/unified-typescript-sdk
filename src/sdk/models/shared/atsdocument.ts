/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const AtsDocumentType = {
  Resume: "RESUME",
  CoverLetter: "COVER_LETTER",
  OfferPacket: "OFFER_PACKET",
  OfferLetter: "OFFER_LETTER",
  TakeHomeTest: "TAKE_HOME_TEST",
  Other: "OTHER",
} as const;
export type AtsDocumentType = ClosedEnum<typeof AtsDocumentType>;

export type AtsDocument = {
  applicationId?: string | undefined;
  candidateId?: string | undefined;
  createdAt?: Date | undefined;
  documentData?: string | undefined;
  documentUrl?: string | undefined;
  filename?: string | undefined;
  id?: string | undefined;
  jobId?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  type?: AtsDocumentType | undefined;
  updatedAt?: Date | undefined;
  userId?: string | undefined;
};

/** @internal */
export const AtsDocumentType$inboundSchema: z.ZodNativeEnum<
  typeof AtsDocumentType
> = z.nativeEnum(AtsDocumentType);

/** @internal */
export const AtsDocumentType$outboundSchema: z.ZodNativeEnum<
  typeof AtsDocumentType
> = AtsDocumentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsDocumentType$ {
  /** @deprecated use `AtsDocumentType$inboundSchema` instead. */
  export const inboundSchema = AtsDocumentType$inboundSchema;
  /** @deprecated use `AtsDocumentType$outboundSchema` instead. */
  export const outboundSchema = AtsDocumentType$outboundSchema;
}

/** @internal */
export const AtsDocument$inboundSchema: z.ZodType<
  AtsDocument,
  z.ZodTypeDef,
  unknown
> = z.object({
  application_id: z.string().optional(),
  candidate_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  document_data: z.string().optional(),
  document_url: z.string().optional(),
  filename: z.string().optional(),
  id: z.string().optional(),
  job_id: z.string().optional(),
  raw: z.record(z.any()).optional(),
  type: AtsDocumentType$inboundSchema.optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "application_id": "applicationId",
    "candidate_id": "candidateId",
    "created_at": "createdAt",
    "document_data": "documentData",
    "document_url": "documentUrl",
    "job_id": "jobId",
    "updated_at": "updatedAt",
    "user_id": "userId",
  });
});

/** @internal */
export type AtsDocument$Outbound = {
  application_id?: string | undefined;
  candidate_id?: string | undefined;
  created_at?: string | undefined;
  document_data?: string | undefined;
  document_url?: string | undefined;
  filename?: string | undefined;
  id?: string | undefined;
  job_id?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  type?: string | undefined;
  updated_at?: string | undefined;
  user_id?: string | undefined;
};

/** @internal */
export const AtsDocument$outboundSchema: z.ZodType<
  AtsDocument$Outbound,
  z.ZodTypeDef,
  AtsDocument
> = z.object({
  applicationId: z.string().optional(),
  candidateId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  documentData: z.string().optional(),
  documentUrl: z.string().optional(),
  filename: z.string().optional(),
  id: z.string().optional(),
  jobId: z.string().optional(),
  raw: z.record(z.any()).optional(),
  type: AtsDocumentType$outboundSchema.optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    applicationId: "application_id",
    candidateId: "candidate_id",
    createdAt: "created_at",
    documentData: "document_data",
    documentUrl: "document_url",
    jobId: "job_id",
    updatedAt: "updated_at",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsDocument$ {
  /** @deprecated use `AtsDocument$inboundSchema` instead. */
  export const inboundSchema = AtsDocument$inboundSchema;
  /** @deprecated use `AtsDocument$outboundSchema` instead. */
  export const outboundSchema = AtsDocument$outboundSchema;
  /** @deprecated use `AtsDocument$Outbound` instead. */
  export type Outbound = AtsDocument$Outbound;
}
