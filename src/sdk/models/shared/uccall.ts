/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  PropertyUcCallTelephone,
  PropertyUcCallTelephone$inboundSchema,
  PropertyUcCallTelephone$Outbound,
  PropertyUcCallTelephone$outboundSchema,
} from "./propertyuccalltelephone.js";

export type UcCall = {
  contactId?: string | undefined;
  createdAt?: Date | undefined;
  endAt?: Date | undefined;
  id?: string | undefined;
  /**
   * The raw data returned by the integration for this call
   */
  raw?: { [k: string]: any } | undefined;
  startAt?: Date | undefined;
  /**
   * The telephone number called
   */
  telephone?: PropertyUcCallTelephone | undefined;
  updatedAt?: Date | undefined;
  userId?: string | undefined;
};

/** @internal */
export const UcCall$inboundSchema: z.ZodType<UcCall, z.ZodTypeDef, unknown> = z
  .object({
    contact_id: z.string().optional(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    end_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    id: z.string().optional(),
    raw: z.record(z.any()).optional(),
    start_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    telephone: PropertyUcCallTelephone$inboundSchema.optional(),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    user_id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
      "created_at": "createdAt",
      "end_at": "endAt",
      "start_at": "startAt",
      "updated_at": "updatedAt",
      "user_id": "userId",
    });
  });

/** @internal */
export type UcCall$Outbound = {
  contact_id?: string | undefined;
  created_at?: string | undefined;
  end_at?: string | undefined;
  id?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  start_at?: string | undefined;
  telephone?: PropertyUcCallTelephone$Outbound | undefined;
  updated_at?: string | undefined;
  user_id?: string | undefined;
};

/** @internal */
export const UcCall$outboundSchema: z.ZodType<
  UcCall$Outbound,
  z.ZodTypeDef,
  UcCall
> = z.object({
  contactId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  endAt: z.date().transform(v => v.toISOString()).optional(),
  id: z.string().optional(),
  raw: z.record(z.any()).optional(),
  startAt: z.date().transform(v => v.toISOString()).optional(),
  telephone: PropertyUcCallTelephone$outboundSchema.optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    contactId: "contact_id",
    createdAt: "created_at",
    endAt: "end_at",
    startAt: "start_at",
    updatedAt: "updated_at",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UcCall$ {
  /** @deprecated use `UcCall$inboundSchema` instead. */
  export const inboundSchema = UcCall$inboundSchema;
  /** @deprecated use `UcCall$outboundSchema` instead. */
  export const outboundSchema = UcCall$outboundSchema;
  /** @deprecated use `UcCall$Outbound` instead. */
  export type Outbound = UcCall$Outbound;
}
