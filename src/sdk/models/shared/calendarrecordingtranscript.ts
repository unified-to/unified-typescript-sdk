/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PropertyCalendarRecordingTranscriptAttendee,
  PropertyCalendarRecordingTranscriptAttendee$inboundSchema,
  PropertyCalendarRecordingTranscriptAttendee$Outbound,
  PropertyCalendarRecordingTranscriptAttendee$outboundSchema,
} from "./propertycalendarrecordingtranscriptattendee.js";

export type CalendarRecordingTranscript = {
  attendee?: PropertyCalendarRecordingTranscriptAttendee | undefined;
  endAt?: Date | undefined;
  language?: string | undefined;
  startAt?: Date | undefined;
  text: string;
};

/** @internal */
export const CalendarRecordingTranscript$inboundSchema: z.ZodType<
  CalendarRecordingTranscript,
  z.ZodTypeDef,
  unknown
> = z.object({
  attendee: PropertyCalendarRecordingTranscriptAttendee$inboundSchema
    .optional(),
  end_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  language: z.string().optional(),
  start_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    "end_at": "endAt",
    "start_at": "startAt",
  });
});

/** @internal */
export type CalendarRecordingTranscript$Outbound = {
  attendee?: PropertyCalendarRecordingTranscriptAttendee$Outbound | undefined;
  end_at?: string | undefined;
  language?: string | undefined;
  start_at?: string | undefined;
  text: string;
};

/** @internal */
export const CalendarRecordingTranscript$outboundSchema: z.ZodType<
  CalendarRecordingTranscript$Outbound,
  z.ZodTypeDef,
  CalendarRecordingTranscript
> = z.object({
  attendee: PropertyCalendarRecordingTranscriptAttendee$outboundSchema
    .optional(),
  endAt: z.date().transform(v => v.toISOString()).optional(),
  language: z.string().optional(),
  startAt: z.date().transform(v => v.toISOString()).optional(),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    endAt: "end_at",
    startAt: "start_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CalendarRecordingTranscript$ {
  /** @deprecated use `CalendarRecordingTranscript$inboundSchema` instead. */
  export const inboundSchema = CalendarRecordingTranscript$inboundSchema;
  /** @deprecated use `CalendarRecordingTranscript$outboundSchema` instead. */
  export const outboundSchema = CalendarRecordingTranscript$outboundSchema;
  /** @deprecated use `CalendarRecordingTranscript$Outbound` instead. */
  export type Outbound = CalendarRecordingTranscript$Outbound;
}

export function calendarRecordingTranscriptToJSON(
  calendarRecordingTranscript: CalendarRecordingTranscript,
): string {
  return JSON.stringify(
    CalendarRecordingTranscript$outboundSchema.parse(
      calendarRecordingTranscript,
    ),
  );
}

export function calendarRecordingTranscriptFromJSON(
  jsonString: string,
): SafeParseResult<CalendarRecordingTranscript, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CalendarRecordingTranscript$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CalendarRecordingTranscript' from JSON`,
  );
}
