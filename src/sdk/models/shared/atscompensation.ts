/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Frequency = {
  OneTime: "ONE_TIME",
  Day: "DAY",
  Quarter: "QUARTER",
  Year: "YEAR",
  Hour: "HOUR",
  Month: "MONTH",
  Week: "WEEK",
} as const;
export type Frequency = OpenEnum<typeof Frequency>;

export const AtsCompensationType = {
  Salary: "SALARY",
  Bonus: "BONUS",
  StockOptions: "STOCK_OPTIONS",
  Equity: "EQUITY",
  Other: "OTHER",
} as const;
export type AtsCompensationType = OpenEnum<typeof AtsCompensationType>;

export type AtsCompensation = {
  currency?: string | undefined;
  frequency?: Frequency | undefined;
  max?: number | undefined;
  min?: number | undefined;
  type?: AtsCompensationType | undefined;
};

/** @internal */
export const Frequency$inboundSchema: z.ZodType<
  Frequency,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Frequency),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Frequency$outboundSchema: z.ZodType<
  Frequency,
  z.ZodTypeDef,
  Frequency
> = z.union([
  z.nativeEnum(Frequency),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Frequency$ {
  /** @deprecated use `Frequency$inboundSchema` instead. */
  export const inboundSchema = Frequency$inboundSchema;
  /** @deprecated use `Frequency$outboundSchema` instead. */
  export const outboundSchema = Frequency$outboundSchema;
}

/** @internal */
export const AtsCompensationType$inboundSchema: z.ZodType<
  AtsCompensationType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AtsCompensationType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AtsCompensationType$outboundSchema: z.ZodType<
  AtsCompensationType,
  z.ZodTypeDef,
  AtsCompensationType
> = z.union([
  z.nativeEnum(AtsCompensationType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsCompensationType$ {
  /** @deprecated use `AtsCompensationType$inboundSchema` instead. */
  export const inboundSchema = AtsCompensationType$inboundSchema;
  /** @deprecated use `AtsCompensationType$outboundSchema` instead. */
  export const outboundSchema = AtsCompensationType$outboundSchema;
}

/** @internal */
export const AtsCompensation$inboundSchema: z.ZodType<
  AtsCompensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  frequency: Frequency$inboundSchema.optional(),
  max: z.number().optional(),
  min: z.number().optional(),
  type: AtsCompensationType$inboundSchema.optional(),
});

/** @internal */
export type AtsCompensation$Outbound = {
  currency?: string | undefined;
  frequency?: string | undefined;
  max?: number | undefined;
  min?: number | undefined;
  type?: string | undefined;
};

/** @internal */
export const AtsCompensation$outboundSchema: z.ZodType<
  AtsCompensation$Outbound,
  z.ZodTypeDef,
  AtsCompensation
> = z.object({
  currency: z.string().optional(),
  frequency: Frequency$outboundSchema.optional(),
  max: z.number().optional(),
  min: z.number().optional(),
  type: AtsCompensationType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsCompensation$ {
  /** @deprecated use `AtsCompensation$inboundSchema` instead. */
  export const inboundSchema = AtsCompensation$inboundSchema;
  /** @deprecated use `AtsCompensation$outboundSchema` instead. */
  export const outboundSchema = AtsCompensation$outboundSchema;
  /** @deprecated use `AtsCompensation$Outbound` instead. */
  export type Outbound = AtsCompensation$Outbound;
}

export function atsCompensationToJSON(
  atsCompensation: AtsCompensation,
): string {
  return JSON.stringify(AtsCompensation$outboundSchema.parse(atsCompensation));
}

export function atsCompensationFromJSON(
  jsonString: string,
): SafeParseResult<AtsCompensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsCompensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsCompensation' from JSON`,
  );
}
