/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The call object, when type = call
 */
export type PropertyCrmEventCall = {
  description?: string | undefined;
  duration?: number | undefined;
  startAt?: Date | undefined;
};

/** @internal */
export const PropertyCrmEventCall$inboundSchema: z.ZodType<
  PropertyCrmEventCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  duration: z.number().optional(),
  start_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "start_at": "startAt",
  });
});

/** @internal */
export type PropertyCrmEventCall$Outbound = {
  description?: string | undefined;
  duration?: number | undefined;
  start_at?: string | undefined;
};

/** @internal */
export const PropertyCrmEventCall$outboundSchema: z.ZodType<
  PropertyCrmEventCall$Outbound,
  z.ZodTypeDef,
  PropertyCrmEventCall
> = z.object({
  description: z.string().optional(),
  duration: z.number().optional(),
  startAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    startAt: "start_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyCrmEventCall$ {
  /** @deprecated use `PropertyCrmEventCall$inboundSchema` instead. */
  export const inboundSchema = PropertyCrmEventCall$inboundSchema;
  /** @deprecated use `PropertyCrmEventCall$outboundSchema` instead. */
  export const outboundSchema = PropertyCrmEventCall$outboundSchema;
  /** @deprecated use `PropertyCrmEventCall$Outbound` instead. */
  export type Outbound = PropertyCrmEventCall$Outbound;
}

export function propertyCrmEventCallToJSON(
  propertyCrmEventCall: PropertyCrmEventCall,
): string {
  return JSON.stringify(
    PropertyCrmEventCall$outboundSchema.parse(propertyCrmEventCall),
  );
}

export function propertyCrmEventCallFromJSON(
  jsonString: string,
): SafeParseResult<PropertyCrmEventCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyCrmEventCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyCrmEventCall' from JSON`,
  );
}
