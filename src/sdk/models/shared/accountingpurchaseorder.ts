/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingLineitem,
  AccountingLineitem$inboundSchema,
  AccountingLineitem$Outbound,
  AccountingLineitem$outboundSchema,
} from "./accountinglineitem.js";
import {
  PropertyAccountingPurchaseorderBillingAddress,
  PropertyAccountingPurchaseorderBillingAddress$inboundSchema,
  PropertyAccountingPurchaseorderBillingAddress$Outbound,
  PropertyAccountingPurchaseorderBillingAddress$outboundSchema,
} from "./propertyaccountingpurchaseorderbillingaddress.js";
import {
  PropertyAccountingPurchaseorderShippingAddress,
  PropertyAccountingPurchaseorderShippingAddress$inboundSchema,
  PropertyAccountingPurchaseorderShippingAddress$Outbound,
  PropertyAccountingPurchaseorderShippingAddress$outboundSchema,
} from "./propertyaccountingpurchaseordershippingaddress.js";

export const AccountingPurchaseorderStatus = {
  Draft: "DRAFT",
  Voided: "VOIDED",
  Authorized: "AUTHORIZED",
  Paid: "PAID",
  PartiallyPaid: "PARTIALLY_PAID",
  PartiallyRefunded: "PARTIALLY_REFUNDED",
  Refunded: "REFUNDED",
} as const;
export type AccountingPurchaseorderStatus = OpenEnum<
  typeof AccountingPurchaseorderStatus
>;

export type AccountingPurchaseorder = {
  accountId?: string | undefined;
  billingAddress?: PropertyAccountingPurchaseorderBillingAddress | undefined;
  contactId?: string | undefined;
  createdAt?: Date | undefined;
  currency?: string | undefined;
  id?: string | undefined;
  lineitems?: Array<AccountingLineitem> | undefined;
  postedAt?: Date | undefined;
  raw?: { [k: string]: any } | undefined;
  shippingAddress?: PropertyAccountingPurchaseorderShippingAddress | undefined;
  status?: AccountingPurchaseorderStatus | undefined;
  totalAmount?: number | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const AccountingPurchaseorderStatus$inboundSchema: z.ZodType<
  AccountingPurchaseorderStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AccountingPurchaseorderStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AccountingPurchaseorderStatus$outboundSchema: z.ZodType<
  AccountingPurchaseorderStatus,
  z.ZodTypeDef,
  AccountingPurchaseorderStatus
> = z.union([
  z.nativeEnum(AccountingPurchaseorderStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingPurchaseorderStatus$ {
  /** @deprecated use `AccountingPurchaseorderStatus$inboundSchema` instead. */
  export const inboundSchema = AccountingPurchaseorderStatus$inboundSchema;
  /** @deprecated use `AccountingPurchaseorderStatus$outboundSchema` instead. */
  export const outboundSchema = AccountingPurchaseorderStatus$outboundSchema;
}

/** @internal */
export const AccountingPurchaseorder$inboundSchema: z.ZodType<
  AccountingPurchaseorder,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string().optional(),
  billing_address: PropertyAccountingPurchaseorderBillingAddress$inboundSchema
    .optional(),
  contact_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  lineitems: z.array(AccountingLineitem$inboundSchema).optional(),
  posted_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  raw: z.record(z.any()).optional(),
  shipping_address: PropertyAccountingPurchaseorderShippingAddress$inboundSchema
    .optional(),
  status: AccountingPurchaseorderStatus$inboundSchema.optional(),
  total_amount: z.number().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "billing_address": "billingAddress",
    "contact_id": "contactId",
    "created_at": "createdAt",
    "posted_at": "postedAt",
    "shipping_address": "shippingAddress",
    "total_amount": "totalAmount",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AccountingPurchaseorder$Outbound = {
  account_id?: string | undefined;
  billing_address?:
    | PropertyAccountingPurchaseorderBillingAddress$Outbound
    | undefined;
  contact_id?: string | undefined;
  created_at?: string | undefined;
  currency?: string | undefined;
  id?: string | undefined;
  lineitems?: Array<AccountingLineitem$Outbound> | undefined;
  posted_at?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  shipping_address?:
    | PropertyAccountingPurchaseorderShippingAddress$Outbound
    | undefined;
  status?: string | undefined;
  total_amount?: number | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const AccountingPurchaseorder$outboundSchema: z.ZodType<
  AccountingPurchaseorder$Outbound,
  z.ZodTypeDef,
  AccountingPurchaseorder
> = z.object({
  accountId: z.string().optional(),
  billingAddress: PropertyAccountingPurchaseorderBillingAddress$outboundSchema
    .optional(),
  contactId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  lineitems: z.array(AccountingLineitem$outboundSchema).optional(),
  postedAt: z.date().transform(v => v.toISOString()).optional(),
  raw: z.record(z.any()).optional(),
  shippingAddress: PropertyAccountingPurchaseorderShippingAddress$outboundSchema
    .optional(),
  status: AccountingPurchaseorderStatus$outboundSchema.optional(),
  totalAmount: z.number().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    billingAddress: "billing_address",
    contactId: "contact_id",
    createdAt: "created_at",
    postedAt: "posted_at",
    shippingAddress: "shipping_address",
    totalAmount: "total_amount",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingPurchaseorder$ {
  /** @deprecated use `AccountingPurchaseorder$inboundSchema` instead. */
  export const inboundSchema = AccountingPurchaseorder$inboundSchema;
  /** @deprecated use `AccountingPurchaseorder$outboundSchema` instead. */
  export const outboundSchema = AccountingPurchaseorder$outboundSchema;
  /** @deprecated use `AccountingPurchaseorder$Outbound` instead. */
  export type Outbound = AccountingPurchaseorder$Outbound;
}

export function accountingPurchaseorderToJSON(
  accountingPurchaseorder: AccountingPurchaseorder,
): string {
  return JSON.stringify(
    AccountingPurchaseorder$outboundSchema.parse(accountingPurchaseorder),
  );
}

export function accountingPurchaseorderFromJSON(
  jsonString: string,
): SafeParseResult<AccountingPurchaseorder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingPurchaseorder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingPurchaseorder' from JSON`,
  );
}
