/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PropertyCalendarEventRecurrenceOnDays,
  PropertyCalendarEventRecurrenceOnDays$inboundSchema,
  PropertyCalendarEventRecurrenceOnDays$outboundSchema,
} from "./propertycalendareventrecurrenceondays.js";

export const CalendarEventRecurrenceFrequency = {
  Daily: "DAILY",
  Weekly: "WEEKLY",
  Monthly: "MONTHLY",
  Yearly: "YEARLY",
} as const;
export type CalendarEventRecurrenceFrequency = ClosedEnum<
  typeof CalendarEventRecurrenceFrequency
>;

export type CalendarEventRecurrence = {
  count?: number | undefined;
  endAt?: Date | undefined;
  /**
   * dates to exclude from the recurrence, defaults to undefined (no exclusions)
   */
  excludedDates?: Array<string> | undefined;
  frequency: CalendarEventRecurrenceFrequency;
  interval?: number | undefined;
  /**
   * days of the week to repeat on, defaults to undefined (every day), only used if frequency is WEEKLY
   */
  onDays?: Array<PropertyCalendarEventRecurrenceOnDays> | undefined;
  /**
   * days of the month to repeat on, defaults to undefined (every day), only used if frequency is MONTHLY
   */
  onMonthDays?: Array<number> | undefined;
  /**
   * months of the year to repeat on, defaults to undefined (every month), only used if frequency is YEARLY, January is 1
   */
  onMonths?: Array<number> | undefined;
};

/** @internal */
export const CalendarEventRecurrenceFrequency$inboundSchema: z.ZodNativeEnum<
  typeof CalendarEventRecurrenceFrequency
> = z.nativeEnum(CalendarEventRecurrenceFrequency);

/** @internal */
export const CalendarEventRecurrenceFrequency$outboundSchema: z.ZodNativeEnum<
  typeof CalendarEventRecurrenceFrequency
> = CalendarEventRecurrenceFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CalendarEventRecurrenceFrequency$ {
  /** @deprecated use `CalendarEventRecurrenceFrequency$inboundSchema` instead. */
  export const inboundSchema = CalendarEventRecurrenceFrequency$inboundSchema;
  /** @deprecated use `CalendarEventRecurrenceFrequency$outboundSchema` instead. */
  export const outboundSchema = CalendarEventRecurrenceFrequency$outboundSchema;
}

/** @internal */
export const CalendarEventRecurrence$inboundSchema: z.ZodType<
  CalendarEventRecurrence,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().optional(),
  end_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  excluded_dates: z.array(z.string()).optional(),
  frequency: CalendarEventRecurrenceFrequency$inboundSchema,
  interval: z.number().optional(),
  on_days: z.array(PropertyCalendarEventRecurrenceOnDays$inboundSchema)
    .optional(),
  on_month_days: z.array(z.number()).optional(),
  on_months: z.array(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "end_at": "endAt",
    "excluded_dates": "excludedDates",
    "on_days": "onDays",
    "on_month_days": "onMonthDays",
    "on_months": "onMonths",
  });
});

/** @internal */
export type CalendarEventRecurrence$Outbound = {
  count?: number | undefined;
  end_at?: string | undefined;
  excluded_dates?: Array<string> | undefined;
  frequency: string;
  interval?: number | undefined;
  on_days?: Array<string> | undefined;
  on_month_days?: Array<number> | undefined;
  on_months?: Array<number> | undefined;
};

/** @internal */
export const CalendarEventRecurrence$outboundSchema: z.ZodType<
  CalendarEventRecurrence$Outbound,
  z.ZodTypeDef,
  CalendarEventRecurrence
> = z.object({
  count: z.number().optional(),
  endAt: z.date().transform(v => v.toISOString()).optional(),
  excludedDates: z.array(z.string()).optional(),
  frequency: CalendarEventRecurrenceFrequency$outboundSchema,
  interval: z.number().optional(),
  onDays: z.array(PropertyCalendarEventRecurrenceOnDays$outboundSchema)
    .optional(),
  onMonthDays: z.array(z.number()).optional(),
  onMonths: z.array(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    endAt: "end_at",
    excludedDates: "excluded_dates",
    onDays: "on_days",
    onMonthDays: "on_month_days",
    onMonths: "on_months",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CalendarEventRecurrence$ {
  /** @deprecated use `CalendarEventRecurrence$inboundSchema` instead. */
  export const inboundSchema = CalendarEventRecurrence$inboundSchema;
  /** @deprecated use `CalendarEventRecurrence$outboundSchema` instead. */
  export const outboundSchema = CalendarEventRecurrence$outboundSchema;
  /** @deprecated use `CalendarEventRecurrence$Outbound` instead. */
  export type Outbound = CalendarEventRecurrence$Outbound;
}

export function calendarEventRecurrenceToJSON(
  calendarEventRecurrence: CalendarEventRecurrence,
): string {
  return JSON.stringify(
    CalendarEventRecurrence$outboundSchema.parse(calendarEventRecurrence),
  );
}

export function calendarEventRecurrenceFromJSON(
  jsonString: string,
): SafeParseResult<CalendarEventRecurrence, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CalendarEventRecurrence$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CalendarEventRecurrence' from JSON`,
  );
}
