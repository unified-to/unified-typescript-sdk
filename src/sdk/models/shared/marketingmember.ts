/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MarketingEmail,
  MarketingEmail$inboundSchema,
  MarketingEmail$Outbound,
  MarketingEmail$outboundSchema,
} from "./marketingemail.js";

/**
 * A member represents a person
 */
export type MarketingMember = {
  createdAt?: Date | undefined;
  /**
   * An array of email addresses for this member
   */
  emails?: Array<MarketingEmail> | undefined;
  firstName?: string | undefined;
  id?: string | undefined;
  lastName?: string | undefined;
  /**
   * An array of list IDs associated with this member
   */
  listIds?: Array<string> | undefined;
  name?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  /**
   * An array of tags associated with this member
   */
  tags?: Array<string> | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const MarketingMember$inboundSchema: z.ZodType<
  MarketingMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  emails: z.array(MarketingEmail$inboundSchema).optional(),
  first_name: z.string().optional(),
  id: z.string().optional(),
  last_name: z.string().optional(),
  list_ids: z.array(z.string()).optional(),
  name: z.string().optional(),
  raw: z.record(z.any()).optional(),
  tags: z.array(z.string()).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "first_name": "firstName",
    "last_name": "lastName",
    "list_ids": "listIds",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type MarketingMember$Outbound = {
  created_at?: string | undefined;
  emails?: Array<MarketingEmail$Outbound> | undefined;
  first_name?: string | undefined;
  id?: string | undefined;
  last_name?: string | undefined;
  list_ids?: Array<string> | undefined;
  name?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  tags?: Array<string> | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const MarketingMember$outboundSchema: z.ZodType<
  MarketingMember$Outbound,
  z.ZodTypeDef,
  MarketingMember
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  emails: z.array(MarketingEmail$outboundSchema).optional(),
  firstName: z.string().optional(),
  id: z.string().optional(),
  lastName: z.string().optional(),
  listIds: z.array(z.string()).optional(),
  name: z.string().optional(),
  raw: z.record(z.any()).optional(),
  tags: z.array(z.string()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    firstName: "first_name",
    lastName: "last_name",
    listIds: "list_ids",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingMember$ {
  /** @deprecated use `MarketingMember$inboundSchema` instead. */
  export const inboundSchema = MarketingMember$inboundSchema;
  /** @deprecated use `MarketingMember$outboundSchema` instead. */
  export const outboundSchema = MarketingMember$outboundSchema;
  /** @deprecated use `MarketingMember$Outbound` instead. */
  export type Outbound = MarketingMember$Outbound;
}

export function marketingMemberToJSON(
  marketingMember: MarketingMember,
): string {
  return JSON.stringify(MarketingMember$outboundSchema.parse(marketingMember));
}

export function marketingMemberFromJSON(
  jsonString: string,
): SafeParseResult<MarketingMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MarketingMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MarketingMember' from JSON`,
  );
}
