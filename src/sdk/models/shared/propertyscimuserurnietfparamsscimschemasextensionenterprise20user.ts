/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import {
  PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager,
  PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$inboundSchema,
  PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$Outbound,
  PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$outboundSchema,
} from "./propertyscimuserurnietfparamsscimschemasextensionenterprise20usermanager.js";
import {
  ScimManager,
  ScimManager$inboundSchema,
  ScimManager$Outbound,
  ScimManager$outboundSchema,
} from "./scimmanager.js";

export const PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender =
  {
    Male: "male",
    Female: "female",
  } as const;
export type PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender =
  ClosedEnum<
    typeof PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender
  >;

/**
 * an organization.
 */
export type PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User =
  {
    additionalManagers?: Array<ScimManager> | undefined;
    birthday?: Date | undefined;
    costCenter?: string | undefined;
    department?: string | undefined;
    division?: string | undefined;
    employeeNumber?: string | undefined;
    endDate?: Date | undefined;
    gender?:
      | PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender
      | undefined;
    level?: string | undefined;
    location?: string | undefined;
    /**
     * "id" attribute of another User.
     */
    manager?:
      | PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager
      | undefined;
    organization?: string | undefined;
    startDate?: Date | undefined;
  };

/** @internal */
export const PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender$inboundSchema:
  z.ZodNativeEnum<
    typeof PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender
  > = z.nativeEnum(
    PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender,
  );

/** @internal */
export const PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender$outboundSchema:
  z.ZodNativeEnum<
    typeof PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender
  > =
    PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender$ {
  /** @deprecated use `PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender$inboundSchema` instead. */
  export const inboundSchema =
    PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender$inboundSchema;
  /** @deprecated use `PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender$outboundSchema` instead. */
  export const outboundSchema =
    PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender$outboundSchema;
}

/** @internal */
export const PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User$inboundSchema:
  z.ZodType<
    PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User,
    z.ZodTypeDef,
    unknown
  > = z.object({
    additionalManagers: z.array(ScimManager$inboundSchema).optional(),
    birthday: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    costCenter: z.string().optional(),
    department: z.string().optional(),
    division: z.string().optional(),
    employeeNumber: z.string().optional(),
    endDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    gender:
      PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender$inboundSchema
        .optional(),
    level: z.string().optional(),
    location: z.string().optional(),
    manager:
      PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$inboundSchema
        .optional(),
    organization: z.string().optional(),
    startDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User$Outbound =
  {
    additionalManagers?: Array<ScimManager$Outbound> | undefined;
    birthday?: string | undefined;
    costCenter?: string | undefined;
    department?: string | undefined;
    division?: string | undefined;
    employeeNumber?: string | undefined;
    endDate?: string | undefined;
    gender?: string | undefined;
    level?: string | undefined;
    location?: string | undefined;
    manager?:
      | PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$Outbound
      | undefined;
    organization?: string | undefined;
    startDate?: string | undefined;
  };

/** @internal */
export const PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User$outboundSchema:
  z.ZodType<
    PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User$Outbound,
    z.ZodTypeDef,
    PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User
  > = z.object({
    additionalManagers: z.array(ScimManager$outboundSchema).optional(),
    birthday: z.date().transform(v => v.toISOString()).optional(),
    costCenter: z.string().optional(),
    department: z.string().optional(),
    division: z.string().optional(),
    employeeNumber: z.string().optional(),
    endDate: z.date().transform(v => v.toISOString()).optional(),
    gender:
      PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender$outboundSchema
        .optional(),
    level: z.string().optional(),
    location: z.string().optional(),
    manager:
      PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$outboundSchema
        .optional(),
    organization: z.string().optional(),
    startDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User$ {
  /** @deprecated use `PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User$inboundSchema` instead. */
  export const inboundSchema =
    PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User$inboundSchema;
  /** @deprecated use `PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User$outboundSchema` instead. */
  export const outboundSchema =
    PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User$outboundSchema;
  /** @deprecated use `PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User$Outbound` instead. */
  export type Outbound =
    PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User$Outbound;
}
