/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AtsStatusRaw = {};

export const AtsStatusStatus = {
  New: "NEW",
  Reviewing: "REVIEWING",
  Screening: "SCREENING",
  Submitted: "SUBMITTED",
  FirstInterview: "FIRST_INTERVIEW",
  SecondInterview: "SECOND_INTERVIEW",
  ThirdInterview: "THIRD_INTERVIEW",
  BackgroundCheck: "BACKGROUND_CHECK",
  Offered: "OFFERED",
  Accepted: "ACCEPTED",
  Hired: "HIRED",
  Rejected: "REJECTED",
  Declined: "DECLINED",
  Withdrawn: "WITHDRAWN",
} as const;
export type AtsStatusStatus = ClosedEnum<typeof AtsStatusStatus>;

export type AtsStatus = {
  description?: string | undefined;
  id?: string | undefined;
  originalStatus?: string | undefined;
  raw?: AtsStatusRaw | undefined;
  status?: AtsStatusStatus | undefined;
};

/** @internal */
export const AtsStatusRaw$inboundSchema: z.ZodType<
  AtsStatusRaw,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AtsStatusRaw$Outbound = {};

/** @internal */
export const AtsStatusRaw$outboundSchema: z.ZodType<
  AtsStatusRaw$Outbound,
  z.ZodTypeDef,
  AtsStatusRaw
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsStatusRaw$ {
  /** @deprecated use `AtsStatusRaw$inboundSchema` instead. */
  export const inboundSchema = AtsStatusRaw$inboundSchema;
  /** @deprecated use `AtsStatusRaw$outboundSchema` instead. */
  export const outboundSchema = AtsStatusRaw$outboundSchema;
  /** @deprecated use `AtsStatusRaw$Outbound` instead. */
  export type Outbound = AtsStatusRaw$Outbound;
}

export function atsStatusRawToJSON(atsStatusRaw: AtsStatusRaw): string {
  return JSON.stringify(AtsStatusRaw$outboundSchema.parse(atsStatusRaw));
}

export function atsStatusRawFromJSON(
  jsonString: string,
): SafeParseResult<AtsStatusRaw, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsStatusRaw$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsStatusRaw' from JSON`,
  );
}

/** @internal */
export const AtsStatusStatus$inboundSchema: z.ZodNativeEnum<
  typeof AtsStatusStatus
> = z.nativeEnum(AtsStatusStatus);

/** @internal */
export const AtsStatusStatus$outboundSchema: z.ZodNativeEnum<
  typeof AtsStatusStatus
> = AtsStatusStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsStatusStatus$ {
  /** @deprecated use `AtsStatusStatus$inboundSchema` instead. */
  export const inboundSchema = AtsStatusStatus$inboundSchema;
  /** @deprecated use `AtsStatusStatus$outboundSchema` instead. */
  export const outboundSchema = AtsStatusStatus$outboundSchema;
}

/** @internal */
export const AtsStatus$inboundSchema: z.ZodType<
  AtsStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  id: z.string().optional(),
  original_status: z.string().optional(),
  raw: z.lazy(() => AtsStatusRaw$inboundSchema).optional(),
  status: AtsStatusStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "original_status": "originalStatus",
  });
});

/** @internal */
export type AtsStatus$Outbound = {
  description?: string | undefined;
  id?: string | undefined;
  original_status?: string | undefined;
  raw?: AtsStatusRaw$Outbound | undefined;
  status?: string | undefined;
};

/** @internal */
export const AtsStatus$outboundSchema: z.ZodType<
  AtsStatus$Outbound,
  z.ZodTypeDef,
  AtsStatus
> = z.object({
  description: z.string().optional(),
  id: z.string().optional(),
  originalStatus: z.string().optional(),
  raw: z.lazy(() => AtsStatusRaw$outboundSchema).optional(),
  status: AtsStatusStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    originalStatus: "original_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsStatus$ {
  /** @deprecated use `AtsStatus$inboundSchema` instead. */
  export const inboundSchema = AtsStatus$inboundSchema;
  /** @deprecated use `AtsStatus$outboundSchema` instead. */
  export const outboundSchema = AtsStatus$outboundSchema;
  /** @deprecated use `AtsStatus$Outbound` instead. */
  export type Outbound = AtsStatus$Outbound;
}

export function atsStatusToJSON(atsStatus: AtsStatus): string {
  return JSON.stringify(AtsStatus$outboundSchema.parse(atsStatus));
}

export function atsStatusFromJSON(
  jsonString: string,
): SafeParseResult<AtsStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsStatus' from JSON`,
  );
}
