/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LmsMedia,
  LmsMedia$inboundSchema,
  LmsMedia$Outbound,
  LmsMedia$outboundSchema,
} from "./lmsmedia.js";

export type LmsClass = {
  courseId: string;
  createdAt?: Date | undefined;
  description?: string | undefined;
  id?: string | undefined;
  instructorIds?: Array<string> | undefined;
  languages?: Array<string> | undefined;
  media?: Array<LmsMedia> | undefined;
  name: string;
  raw?: { [k: string]: any } | undefined;
  studentIds?: Array<string> | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const LmsClass$inboundSchema: z.ZodType<
  LmsClass,
  z.ZodTypeDef,
  unknown
> = z.object({
  course_id: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  instructor_ids: z.array(z.string()).optional(),
  languages: z.array(z.string()).optional(),
  media: z.array(LmsMedia$inboundSchema).optional(),
  name: z.string(),
  raw: z.record(z.any()).optional(),
  student_ids: z.array(z.string()).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "course_id": "courseId",
    "created_at": "createdAt",
    "instructor_ids": "instructorIds",
    "student_ids": "studentIds",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type LmsClass$Outbound = {
  course_id: string;
  created_at?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  instructor_ids?: Array<string> | undefined;
  languages?: Array<string> | undefined;
  media?: Array<LmsMedia$Outbound> | undefined;
  name: string;
  raw?: { [k: string]: any } | undefined;
  student_ids?: Array<string> | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const LmsClass$outboundSchema: z.ZodType<
  LmsClass$Outbound,
  z.ZodTypeDef,
  LmsClass
> = z.object({
  courseId: z.string(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  instructorIds: z.array(z.string()).optional(),
  languages: z.array(z.string()).optional(),
  media: z.array(LmsMedia$outboundSchema).optional(),
  name: z.string(),
  raw: z.record(z.any()).optional(),
  studentIds: z.array(z.string()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    courseId: "course_id",
    createdAt: "created_at",
    instructorIds: "instructor_ids",
    studentIds: "student_ids",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LmsClass$ {
  /** @deprecated use `LmsClass$inboundSchema` instead. */
  export const inboundSchema = LmsClass$inboundSchema;
  /** @deprecated use `LmsClass$outboundSchema` instead. */
  export const outboundSchema = LmsClass$outboundSchema;
  /** @deprecated use `LmsClass$Outbound` instead. */
  export type Outbound = LmsClass$Outbound;
}

export function lmsClassToJSON(lmsClass: LmsClass): string {
  return JSON.stringify(LmsClass$outboundSchema.parse(lmsClass));
}

export function lmsClassFromJSON(
  jsonString: string,
): SafeParseResult<LmsClass, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LmsClass$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LmsClass' from JSON`,
  );
}
