/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingProfitAndLossAccount = {
  accountId?: string | undefined;
  accountName?: string | undefined;
  totalAmount?: number | undefined;
  transactionIds?: Array<string> | undefined;
};

/** @internal */
export const AccountingProfitAndLossAccount$inboundSchema: z.ZodType<
  AccountingProfitAndLossAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string().optional(),
  account_name: z.string().optional(),
  total_amount: z.number().optional(),
  transaction_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "account_name": "accountName",
    "total_amount": "totalAmount",
    "transaction_ids": "transactionIds",
  });
});

/** @internal */
export type AccountingProfitAndLossAccount$Outbound = {
  account_id?: string | undefined;
  account_name?: string | undefined;
  total_amount?: number | undefined;
  transaction_ids?: Array<string> | undefined;
};

/** @internal */
export const AccountingProfitAndLossAccount$outboundSchema: z.ZodType<
  AccountingProfitAndLossAccount$Outbound,
  z.ZodTypeDef,
  AccountingProfitAndLossAccount
> = z.object({
  accountId: z.string().optional(),
  accountName: z.string().optional(),
  totalAmount: z.number().optional(),
  transactionIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    accountName: "account_name",
    totalAmount: "total_amount",
    transactionIds: "transaction_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingProfitAndLossAccount$ {
  /** @deprecated use `AccountingProfitAndLossAccount$inboundSchema` instead. */
  export const inboundSchema = AccountingProfitAndLossAccount$inboundSchema;
  /** @deprecated use `AccountingProfitAndLossAccount$outboundSchema` instead. */
  export const outboundSchema = AccountingProfitAndLossAccount$outboundSchema;
  /** @deprecated use `AccountingProfitAndLossAccount$Outbound` instead. */
  export type Outbound = AccountingProfitAndLossAccount$Outbound;
}

export function accountingProfitAndLossAccountToJSON(
  accountingProfitAndLossAccount: AccountingProfitAndLossAccount,
): string {
  return JSON.stringify(
    AccountingProfitAndLossAccount$outboundSchema.parse(
      accountingProfitAndLossAccount,
    ),
  );
}

export function accountingProfitAndLossAccountFromJSON(
  jsonString: string,
): SafeParseResult<AccountingProfitAndLossAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingProfitAndLossAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingProfitAndLossAccount' from JSON`,
  );
}
