/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TicketingTelephoneType = {
  Work: "WORK",
  Home: "HOME",
  Other: "OTHER",
  Fax: "FAX",
  Mobile: "MOBILE",
} as const;
export type TicketingTelephoneType = ClosedEnum<typeof TicketingTelephoneType>;

export type TicketingTelephone = {
  telephone: string;
  type?: TicketingTelephoneType | undefined;
};

/** @internal */
export const TicketingTelephoneType$inboundSchema: z.ZodNativeEnum<
  typeof TicketingTelephoneType
> = z.nativeEnum(TicketingTelephoneType);

/** @internal */
export const TicketingTelephoneType$outboundSchema: z.ZodNativeEnum<
  typeof TicketingTelephoneType
> = TicketingTelephoneType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTelephoneType$ {
  /** @deprecated use `TicketingTelephoneType$inboundSchema` instead. */
  export const inboundSchema = TicketingTelephoneType$inboundSchema;
  /** @deprecated use `TicketingTelephoneType$outboundSchema` instead. */
  export const outboundSchema = TicketingTelephoneType$outboundSchema;
}

/** @internal */
export const TicketingTelephone$inboundSchema: z.ZodType<
  TicketingTelephone,
  z.ZodTypeDef,
  unknown
> = z.object({
  telephone: z.string(),
  type: TicketingTelephoneType$inboundSchema.optional(),
});

/** @internal */
export type TicketingTelephone$Outbound = {
  telephone: string;
  type?: string | undefined;
};

/** @internal */
export const TicketingTelephone$outboundSchema: z.ZodType<
  TicketingTelephone$Outbound,
  z.ZodTypeDef,
  TicketingTelephone
> = z.object({
  telephone: z.string(),
  type: TicketingTelephoneType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTelephone$ {
  /** @deprecated use `TicketingTelephone$inboundSchema` instead. */
  export const inboundSchema = TicketingTelephone$inboundSchema;
  /** @deprecated use `TicketingTelephone$outboundSchema` instead. */
  export const outboundSchema = TicketingTelephone$outboundSchema;
  /** @deprecated use `TicketingTelephone$Outbound` instead. */
  export type Outbound = TicketingTelephone$Outbound;
}

export function ticketingTelephoneToJSON(
  ticketingTelephone: TicketingTelephone,
): string {
  return JSON.stringify(
    TicketingTelephone$outboundSchema.parse(ticketingTelephone),
  );
}

export function ticketingTelephoneFromJSON(
  jsonString: string,
): SafeParseResult<TicketingTelephone, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingTelephone$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingTelephone' from JSON`,
  );
}
