/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UcComment = {
  callId?: string | undefined;
  content: string;
  createdAt?: string | undefined;
  id?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  updatedAt?: string | undefined;
  userId?: string | undefined;
};

/** @internal */
export const UcComment$inboundSchema: z.ZodType<
  UcComment,
  z.ZodTypeDef,
  unknown
> = z.object({
  call_id: z.string().optional(),
  content: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  raw: z.record(z.any()).optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "user_id": "userId",
  });
});

/** @internal */
export type UcComment$Outbound = {
  call_id?: string | undefined;
  content: string;
  created_at?: string | undefined;
  id?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  updated_at?: string | undefined;
  user_id?: string | undefined;
};

/** @internal */
export const UcComment$outboundSchema: z.ZodType<
  UcComment$Outbound,
  z.ZodTypeDef,
  UcComment
> = z.object({
  callId: z.string().optional(),
  content: z.string(),
  createdAt: z.string().optional(),
  id: z.string().optional(),
  raw: z.record(z.any()).optional(),
  updatedAt: z.string().optional(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UcComment$ {
  /** @deprecated use `UcComment$inboundSchema` instead. */
  export const inboundSchema = UcComment$inboundSchema;
  /** @deprecated use `UcComment$outboundSchema` instead. */
  export const outboundSchema = UcComment$outboundSchema;
  /** @deprecated use `UcComment$Outbound` instead. */
  export type Outbound = UcComment$Outbound;
}

export function ucCommentToJSON(ucComment: UcComment): string {
  return JSON.stringify(UcComment$outboundSchema.parse(ucComment));
}

export function ucCommentFromJSON(
  jsonString: string,
): SafeParseResult<UcComment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UcComment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UcComment' from JSON`,
  );
}
