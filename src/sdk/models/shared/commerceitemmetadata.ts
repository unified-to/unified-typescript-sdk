/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ExtraData = {};

export type Value = {};

export type CommerceItemMetadata = {
  extraData?: ExtraData | undefined;
  id?: string | undefined;
  key: string;
  namespace?: string | undefined;
  type?: string | undefined;
  value?: Value | undefined;
};

/** @internal */
export const ExtraData$inboundSchema: z.ZodType<
  ExtraData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ExtraData$Outbound = {};

/** @internal */
export const ExtraData$outboundSchema: z.ZodType<
  ExtraData$Outbound,
  z.ZodTypeDef,
  ExtraData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExtraData$ {
  /** @deprecated use `ExtraData$inboundSchema` instead. */
  export const inboundSchema = ExtraData$inboundSchema;
  /** @deprecated use `ExtraData$outboundSchema` instead. */
  export const outboundSchema = ExtraData$outboundSchema;
  /** @deprecated use `ExtraData$Outbound` instead. */
  export type Outbound = ExtraData$Outbound;
}

export function extraDataToJSON(extraData: ExtraData): string {
  return JSON.stringify(ExtraData$outboundSchema.parse(extraData));
}

export function extraDataFromJSON(
  jsonString: string,
): SafeParseResult<ExtraData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExtraData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExtraData' from JSON`,
  );
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Value$Outbound = {};

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const CommerceItemMetadata$inboundSchema: z.ZodType<
  CommerceItemMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  extra_data: z.lazy(() => ExtraData$inboundSchema).optional(),
  id: z.string().optional(),
  key: z.string(),
  namespace: z.string().optional(),
  type: z.string().optional(),
  value: z.lazy(() => Value$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "extra_data": "extraData",
  });
});

/** @internal */
export type CommerceItemMetadata$Outbound = {
  extra_data?: ExtraData$Outbound | undefined;
  id?: string | undefined;
  key: string;
  namespace?: string | undefined;
  type?: string | undefined;
  value?: Value$Outbound | undefined;
};

/** @internal */
export const CommerceItemMetadata$outboundSchema: z.ZodType<
  CommerceItemMetadata$Outbound,
  z.ZodTypeDef,
  CommerceItemMetadata
> = z.object({
  extraData: z.lazy(() => ExtraData$outboundSchema).optional(),
  id: z.string().optional(),
  key: z.string(),
  namespace: z.string().optional(),
  type: z.string().optional(),
  value: z.lazy(() => Value$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    extraData: "extra_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceItemMetadata$ {
  /** @deprecated use `CommerceItemMetadata$inboundSchema` instead. */
  export const inboundSchema = CommerceItemMetadata$inboundSchema;
  /** @deprecated use `CommerceItemMetadata$outboundSchema` instead. */
  export const outboundSchema = CommerceItemMetadata$outboundSchema;
  /** @deprecated use `CommerceItemMetadata$Outbound` instead. */
  export type Outbound = CommerceItemMetadata$Outbound;
}

export function commerceItemMetadataToJSON(
  commerceItemMetadata: CommerceItemMetadata,
): string {
  return JSON.stringify(
    CommerceItemMetadata$outboundSchema.parse(commerceItemMetadata),
  );
}

export function commerceItemMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CommerceItemMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceItemMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceItemMetadata' from JSON`,
  );
}
