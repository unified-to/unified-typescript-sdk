/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CommerceItemMetadataExtraData = {};

export type CommerceItemMetadataValue = {};

export type CommerceItemMetadata = {
  extraData?: CommerceItemMetadataExtraData | undefined;
  id?: string | undefined;
  key: string;
  namespace?: string | undefined;
  type?: string | undefined;
  value?: CommerceItemMetadataValue | undefined;
};

/** @internal */
export const CommerceItemMetadataExtraData$inboundSchema: z.ZodType<
  CommerceItemMetadataExtraData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CommerceItemMetadataExtraData$Outbound = {};

/** @internal */
export const CommerceItemMetadataExtraData$outboundSchema: z.ZodType<
  CommerceItemMetadataExtraData$Outbound,
  z.ZodTypeDef,
  CommerceItemMetadataExtraData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceItemMetadataExtraData$ {
  /** @deprecated use `CommerceItemMetadataExtraData$inboundSchema` instead. */
  export const inboundSchema = CommerceItemMetadataExtraData$inboundSchema;
  /** @deprecated use `CommerceItemMetadataExtraData$outboundSchema` instead. */
  export const outboundSchema = CommerceItemMetadataExtraData$outboundSchema;
  /** @deprecated use `CommerceItemMetadataExtraData$Outbound` instead. */
  export type Outbound = CommerceItemMetadataExtraData$Outbound;
}

export function commerceItemMetadataExtraDataToJSON(
  commerceItemMetadataExtraData: CommerceItemMetadataExtraData,
): string {
  return JSON.stringify(
    CommerceItemMetadataExtraData$outboundSchema.parse(
      commerceItemMetadataExtraData,
    ),
  );
}

export function commerceItemMetadataExtraDataFromJSON(
  jsonString: string,
): SafeParseResult<CommerceItemMetadataExtraData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceItemMetadataExtraData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceItemMetadataExtraData' from JSON`,
  );
}

/** @internal */
export const CommerceItemMetadataValue$inboundSchema: z.ZodType<
  CommerceItemMetadataValue,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CommerceItemMetadataValue$Outbound = {};

/** @internal */
export const CommerceItemMetadataValue$outboundSchema: z.ZodType<
  CommerceItemMetadataValue$Outbound,
  z.ZodTypeDef,
  CommerceItemMetadataValue
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceItemMetadataValue$ {
  /** @deprecated use `CommerceItemMetadataValue$inboundSchema` instead. */
  export const inboundSchema = CommerceItemMetadataValue$inboundSchema;
  /** @deprecated use `CommerceItemMetadataValue$outboundSchema` instead. */
  export const outboundSchema = CommerceItemMetadataValue$outboundSchema;
  /** @deprecated use `CommerceItemMetadataValue$Outbound` instead. */
  export type Outbound = CommerceItemMetadataValue$Outbound;
}

export function commerceItemMetadataValueToJSON(
  commerceItemMetadataValue: CommerceItemMetadataValue,
): string {
  return JSON.stringify(
    CommerceItemMetadataValue$outboundSchema.parse(commerceItemMetadataValue),
  );
}

export function commerceItemMetadataValueFromJSON(
  jsonString: string,
): SafeParseResult<CommerceItemMetadataValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceItemMetadataValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceItemMetadataValue' from JSON`,
  );
}

/** @internal */
export const CommerceItemMetadata$inboundSchema: z.ZodType<
  CommerceItemMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  extra_data: z.lazy(() => CommerceItemMetadataExtraData$inboundSchema)
    .optional(),
  id: z.string().optional(),
  key: z.string(),
  namespace: z.string().optional(),
  type: z.string().optional(),
  value: z.lazy(() => CommerceItemMetadataValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "extra_data": "extraData",
  });
});

/** @internal */
export type CommerceItemMetadata$Outbound = {
  extra_data?: CommerceItemMetadataExtraData$Outbound | undefined;
  id?: string | undefined;
  key: string;
  namespace?: string | undefined;
  type?: string | undefined;
  value?: CommerceItemMetadataValue$Outbound | undefined;
};

/** @internal */
export const CommerceItemMetadata$outboundSchema: z.ZodType<
  CommerceItemMetadata$Outbound,
  z.ZodTypeDef,
  CommerceItemMetadata
> = z.object({
  extraData: z.lazy(() => CommerceItemMetadataExtraData$outboundSchema)
    .optional(),
  id: z.string().optional(),
  key: z.string(),
  namespace: z.string().optional(),
  type: z.string().optional(),
  value: z.lazy(() => CommerceItemMetadataValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    extraData: "extra_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceItemMetadata$ {
  /** @deprecated use `CommerceItemMetadata$inboundSchema` instead. */
  export const inboundSchema = CommerceItemMetadata$inboundSchema;
  /** @deprecated use `CommerceItemMetadata$outboundSchema` instead. */
  export const outboundSchema = CommerceItemMetadata$outboundSchema;
  /** @deprecated use `CommerceItemMetadata$Outbound` instead. */
  export type Outbound = CommerceItemMetadata$Outbound;
}

export function commerceItemMetadataToJSON(
  commerceItemMetadata: CommerceItemMetadata,
): string {
  return JSON.stringify(
    CommerceItemMetadata$outboundSchema.parse(commerceItemMetadata),
  );
}

export function commerceItemMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CommerceItemMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceItemMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceItemMetadata' from JSON`,
  );
}
