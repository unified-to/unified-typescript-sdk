/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type One = {};

export type Five = One | string | number | boolean;

export type ExtraData =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<One | string | number | boolean>;

export const Format = {
  Text: "TEXT",
  Number: "NUMBER",
  Date: "DATE",
  Boolean: "BOOLEAN",
  File: "FILE",
  Textarea: "TEXTAREA",
  SingleSelect: "SINGLE_SELECT",
  MultipleSelect: "MULTIPLE_SELECT",
  Measurement: "MEASUREMENT",
  Price: "PRICE",
  YesNo: "YES_NO",
  Currency: "CURRENCY",
  Url: "URL",
} as const;
export type Format = OpenEnum<typeof Format>;

export type AtsMetadata1 = {};

export type AtsMetadata5 = AtsMetadata1 | string | number | boolean;

export type Value =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<AtsMetadata1 | string | number | boolean>;

export type AtsMetadata = {
  extraData?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<One | string | number | boolean>
    | undefined;
  format?: Format | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<AtsMetadata1 | string | number | boolean>
    | undefined;
};

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type One$Outbound = {};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const Five$inboundSchema: z.ZodType<Five, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => One$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
  ]);

/** @internal */
export type Five$Outbound = One$Outbound | string | number | boolean;

/** @internal */
export const Five$outboundSchema: z.ZodType<Five$Outbound, z.ZodTypeDef, Five> =
  z.union([
    z.lazy(() => One$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Five$ {
  /** @deprecated use `Five$inboundSchema` instead. */
  export const inboundSchema = Five$inboundSchema;
  /** @deprecated use `Five$outboundSchema` instead. */
  export const outboundSchema = Five$outboundSchema;
  /** @deprecated use `Five$Outbound` instead. */
  export type Outbound = Five$Outbound;
}

export function fiveToJSON(five: Five): string {
  return JSON.stringify(Five$outboundSchema.parse(five));
}

export function fiveFromJSON(
  jsonString: string,
): SafeParseResult<Five, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Five$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Five' from JSON`,
  );
}

/** @internal */
export const ExtraData$inboundSchema: z.ZodType<
  ExtraData,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => One$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/** @internal */
export type ExtraData$Outbound =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<One$Outbound | string | number | boolean>;

/** @internal */
export const ExtraData$outboundSchema: z.ZodType<
  ExtraData$Outbound,
  z.ZodTypeDef,
  ExtraData
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => One$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExtraData$ {
  /** @deprecated use `ExtraData$inboundSchema` instead. */
  export const inboundSchema = ExtraData$inboundSchema;
  /** @deprecated use `ExtraData$outboundSchema` instead. */
  export const outboundSchema = ExtraData$outboundSchema;
  /** @deprecated use `ExtraData$Outbound` instead. */
  export type Outbound = ExtraData$Outbound;
}

export function extraDataToJSON(extraData: ExtraData): string {
  return JSON.stringify(ExtraData$outboundSchema.parse(extraData));
}

export function extraDataFromJSON(
  jsonString: string,
): SafeParseResult<ExtraData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExtraData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExtraData' from JSON`,
  );
}

/** @internal */
export const Format$inboundSchema: z.ZodType<Format, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Format),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Format$outboundSchema: z.ZodType<Format, z.ZodTypeDef, Format> = z
  .union([
    z.nativeEnum(Format),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const AtsMetadata1$inboundSchema: z.ZodType<
  AtsMetadata1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AtsMetadata1$Outbound = {};

/** @internal */
export const AtsMetadata1$outboundSchema: z.ZodType<
  AtsMetadata1$Outbound,
  z.ZodTypeDef,
  AtsMetadata1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsMetadata1$ {
  /** @deprecated use `AtsMetadata1$inboundSchema` instead. */
  export const inboundSchema = AtsMetadata1$inboundSchema;
  /** @deprecated use `AtsMetadata1$outboundSchema` instead. */
  export const outboundSchema = AtsMetadata1$outboundSchema;
  /** @deprecated use `AtsMetadata1$Outbound` instead. */
  export type Outbound = AtsMetadata1$Outbound;
}

export function atsMetadata1ToJSON(atsMetadata1: AtsMetadata1): string {
  return JSON.stringify(AtsMetadata1$outboundSchema.parse(atsMetadata1));
}

export function atsMetadata1FromJSON(
  jsonString: string,
): SafeParseResult<AtsMetadata1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsMetadata1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsMetadata1' from JSON`,
  );
}

/** @internal */
export const AtsMetadata5$inboundSchema: z.ZodType<
  AtsMetadata5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AtsMetadata1$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/** @internal */
export type AtsMetadata5$Outbound =
  | AtsMetadata1$Outbound
  | string
  | number
  | boolean;

/** @internal */
export const AtsMetadata5$outboundSchema: z.ZodType<
  AtsMetadata5$Outbound,
  z.ZodTypeDef,
  AtsMetadata5
> = z.union([
  z.lazy(() => AtsMetadata1$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsMetadata5$ {
  /** @deprecated use `AtsMetadata5$inboundSchema` instead. */
  export const inboundSchema = AtsMetadata5$inboundSchema;
  /** @deprecated use `AtsMetadata5$outboundSchema` instead. */
  export const outboundSchema = AtsMetadata5$outboundSchema;
  /** @deprecated use `AtsMetadata5$Outbound` instead. */
  export type Outbound = AtsMetadata5$Outbound;
}

export function atsMetadata5ToJSON(atsMetadata5: AtsMetadata5): string {
  return JSON.stringify(AtsMetadata5$outboundSchema.parse(atsMetadata5));
}

export function atsMetadata5FromJSON(
  jsonString: string,
): SafeParseResult<AtsMetadata5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsMetadata5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsMetadata5' from JSON`,
  );
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => AtsMetadata1$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]);

/** @internal */
export type Value$Outbound =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<AtsMetadata1$Outbound | string | number | boolean>;

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => AtsMetadata1$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const AtsMetadata$inboundSchema: z.ZodType<
  AtsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  extra_data: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => One$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
  format: Format$inboundSchema.optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => AtsMetadata1$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "extra_data": "extraData",
  });
});

/** @internal */
export type AtsMetadata$Outbound = {
  extra_data?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<One$Outbound | string | number | boolean>
    | undefined;
  format?: string | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<AtsMetadata1$Outbound | string | number | boolean>
    | undefined;
};

/** @internal */
export const AtsMetadata$outboundSchema: z.ZodType<
  AtsMetadata$Outbound,
  z.ZodTypeDef,
  AtsMetadata
> = z.object({
  extraData: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => One$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
  format: Format$outboundSchema.optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => AtsMetadata1$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    extraData: "extra_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsMetadata$ {
  /** @deprecated use `AtsMetadata$inboundSchema` instead. */
  export const inboundSchema = AtsMetadata$inboundSchema;
  /** @deprecated use `AtsMetadata$outboundSchema` instead. */
  export const outboundSchema = AtsMetadata$outboundSchema;
  /** @deprecated use `AtsMetadata$Outbound` instead. */
  export type Outbound = AtsMetadata$Outbound;
}

export function atsMetadataToJSON(atsMetadata: AtsMetadata): string {
  return JSON.stringify(AtsMetadata$outboundSchema.parse(atsMetadata));
}

export function atsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<AtsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsMetadata' from JSON`,
  );
}
