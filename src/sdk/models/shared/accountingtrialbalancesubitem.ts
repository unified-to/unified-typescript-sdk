/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingTrialbalanceSubItem = {
  accountId?: string | undefined;
  accountName?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const AccountingTrialbalanceSubItem$inboundSchema: z.ZodType<
  AccountingTrialbalanceSubItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string().optional(),
  account_name: z.string().optional(),
  amount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "account_name": "accountName",
  });
});

/** @internal */
export type AccountingTrialbalanceSubItem$Outbound = {
  account_id?: string | undefined;
  account_name?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const AccountingTrialbalanceSubItem$outboundSchema: z.ZodType<
  AccountingTrialbalanceSubItem$Outbound,
  z.ZodTypeDef,
  AccountingTrialbalanceSubItem
> = z.object({
  accountId: z.string().optional(),
  accountName: z.string().optional(),
  amount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    accountName: "account_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTrialbalanceSubItem$ {
  /** @deprecated use `AccountingTrialbalanceSubItem$inboundSchema` instead. */
  export const inboundSchema = AccountingTrialbalanceSubItem$inboundSchema;
  /** @deprecated use `AccountingTrialbalanceSubItem$outboundSchema` instead. */
  export const outboundSchema = AccountingTrialbalanceSubItem$outboundSchema;
  /** @deprecated use `AccountingTrialbalanceSubItem$Outbound` instead. */
  export type Outbound = AccountingTrialbalanceSubItem$Outbound;
}

export function accountingTrialbalanceSubItemToJSON(
  accountingTrialbalanceSubItem: AccountingTrialbalanceSubItem,
): string {
  return JSON.stringify(
    AccountingTrialbalanceSubItem$outboundSchema.parse(
      accountingTrialbalanceSubItem,
    ),
  );
}

export function accountingTrialbalanceSubItemFromJSON(
  jsonString: string,
): SafeParseResult<AccountingTrialbalanceSubItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingTrialbalanceSubItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingTrialbalanceSubItem' from JSON`,
  );
}
