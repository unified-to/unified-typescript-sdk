/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingTrialBalanceSubItem = {
  accountId?: string | undefined;
  accountName?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const AccountingTrialBalanceSubItem$inboundSchema: z.ZodType<
  AccountingTrialBalanceSubItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string().optional(),
  account_name: z.string().optional(),
  amount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "account_name": "accountName",
  });
});

/** @internal */
export type AccountingTrialBalanceSubItem$Outbound = {
  account_id?: string | undefined;
  account_name?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const AccountingTrialBalanceSubItem$outboundSchema: z.ZodType<
  AccountingTrialBalanceSubItem$Outbound,
  z.ZodTypeDef,
  AccountingTrialBalanceSubItem
> = z.object({
  accountId: z.string().optional(),
  accountName: z.string().optional(),
  amount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    accountName: "account_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTrialBalanceSubItem$ {
  /** @deprecated use `AccountingTrialBalanceSubItem$inboundSchema` instead. */
  export const inboundSchema = AccountingTrialBalanceSubItem$inboundSchema;
  /** @deprecated use `AccountingTrialBalanceSubItem$outboundSchema` instead. */
  export const outboundSchema = AccountingTrialBalanceSubItem$outboundSchema;
  /** @deprecated use `AccountingTrialBalanceSubItem$Outbound` instead. */
  export type Outbound = AccountingTrialBalanceSubItem$Outbound;
}

export function accountingTrialBalanceSubItemToJSON(
  accountingTrialBalanceSubItem: AccountingTrialBalanceSubItem,
): string {
  return JSON.stringify(
    AccountingTrialBalanceSubItem$outboundSchema.parse(
      accountingTrialBalanceSubItem,
    ),
  );
}

export function accountingTrialBalanceSubItemFromJSON(
  jsonString: string,
): SafeParseResult<AccountingTrialBalanceSubItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingTrialBalanceSubItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingTrialBalanceSubItem' from JSON`,
  );
}
