/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentLineitem,
  PaymentLineitem$inboundSchema,
  PaymentLineitem$Outbound,
  PaymentLineitem$outboundSchema,
} from "./paymentlineitem.js";

export const IntervalUnit = {
  Year: "YEAR",
  Month: "MONTH",
  Week: "WEEK",
  Day: "DAY",
} as const;
export type IntervalUnit = OpenEnum<typeof IntervalUnit>;

export const PaymentSubscriptionStatus = {
  Active: "ACTIVE",
  Inactive: "INACTIVE",
  Canceled: "CANCELED",
  Paused: "PAUSED",
} as const;
export type PaymentSubscriptionStatus = OpenEnum<
  typeof PaymentSubscriptionStatus
>;

export type PaymentSubscription = {
  canceledAt?: Date | undefined;
  contactId?: string | undefined;
  createdAt?: Date | undefined;
  currency?: string | undefined;
  currentPeriodEndAt?: Date | undefined;
  currentPeriodStartAt?: Date | undefined;
  dayOfMonth?: number | undefined;
  dayOfWeek?: number | undefined;
  description?: string | undefined;
  endAt?: Date | undefined;
  id?: string | undefined;
  interval?: number | undefined;
  intervalUnit?: IntervalUnit | undefined;
  invoiceId?: string | undefined;
  lineitems?: Array<PaymentLineitem> | undefined;
  month?: number | undefined;
  raw?: { [k: string]: any } | undefined;
  startAt?: Date | undefined;
  status?: PaymentSubscriptionStatus | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const IntervalUnit$inboundSchema: z.ZodType<
  IntervalUnit,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(IntervalUnit),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const IntervalUnit$outboundSchema: z.ZodType<
  IntervalUnit,
  z.ZodTypeDef,
  IntervalUnit
> = z.union([
  z.nativeEnum(IntervalUnit),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntervalUnit$ {
  /** @deprecated use `IntervalUnit$inboundSchema` instead. */
  export const inboundSchema = IntervalUnit$inboundSchema;
  /** @deprecated use `IntervalUnit$outboundSchema` instead. */
  export const outboundSchema = IntervalUnit$outboundSchema;
}

/** @internal */
export const PaymentSubscriptionStatus$inboundSchema: z.ZodType<
  PaymentSubscriptionStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PaymentSubscriptionStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PaymentSubscriptionStatus$outboundSchema: z.ZodType<
  PaymentSubscriptionStatus,
  z.ZodTypeDef,
  PaymentSubscriptionStatus
> = z.union([
  z.nativeEnum(PaymentSubscriptionStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentSubscriptionStatus$ {
  /** @deprecated use `PaymentSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema = PaymentSubscriptionStatus$inboundSchema;
  /** @deprecated use `PaymentSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema = PaymentSubscriptionStatus$outboundSchema;
}

/** @internal */
export const PaymentSubscription$inboundSchema: z.ZodType<
  PaymentSubscription,
  z.ZodTypeDef,
  unknown
> = z.object({
  canceled_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  contact_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  currency: z.string().optional(),
  current_period_end_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  current_period_start_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  day_of_month: z.number().optional(),
  day_of_week: z.number().optional(),
  description: z.string().optional(),
  end_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  id: z.string().optional(),
  interval: z.number().optional(),
  interval_unit: IntervalUnit$inboundSchema.optional(),
  invoice_id: z.string().optional(),
  lineitems: z.array(PaymentLineitem$inboundSchema).optional(),
  month: z.number().optional(),
  raw: z.record(z.any()).optional(),
  start_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  status: PaymentSubscriptionStatus$inboundSchema.optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "canceled_at": "canceledAt",
    "contact_id": "contactId",
    "created_at": "createdAt",
    "current_period_end_at": "currentPeriodEndAt",
    "current_period_start_at": "currentPeriodStartAt",
    "day_of_month": "dayOfMonth",
    "day_of_week": "dayOfWeek",
    "end_at": "endAt",
    "interval_unit": "intervalUnit",
    "invoice_id": "invoiceId",
    "start_at": "startAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PaymentSubscription$Outbound = {
  canceled_at?: string | undefined;
  contact_id?: string | undefined;
  created_at?: string | undefined;
  currency?: string | undefined;
  current_period_end_at?: string | undefined;
  current_period_start_at?: string | undefined;
  day_of_month?: number | undefined;
  day_of_week?: number | undefined;
  description?: string | undefined;
  end_at?: string | undefined;
  id?: string | undefined;
  interval?: number | undefined;
  interval_unit?: string | undefined;
  invoice_id?: string | undefined;
  lineitems?: Array<PaymentLineitem$Outbound> | undefined;
  month?: number | undefined;
  raw?: { [k: string]: any } | undefined;
  start_at?: string | undefined;
  status?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const PaymentSubscription$outboundSchema: z.ZodType<
  PaymentSubscription$Outbound,
  z.ZodTypeDef,
  PaymentSubscription
> = z.object({
  canceledAt: z.date().transform(v => v.toISOString()).optional(),
  contactId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  currency: z.string().optional(),
  currentPeriodEndAt: z.date().transform(v => v.toISOString()).optional(),
  currentPeriodStartAt: z.date().transform(v => v.toISOString()).optional(),
  dayOfMonth: z.number().optional(),
  dayOfWeek: z.number().optional(),
  description: z.string().optional(),
  endAt: z.date().transform(v => v.toISOString()).optional(),
  id: z.string().optional(),
  interval: z.number().optional(),
  intervalUnit: IntervalUnit$outboundSchema.optional(),
  invoiceId: z.string().optional(),
  lineitems: z.array(PaymentLineitem$outboundSchema).optional(),
  month: z.number().optional(),
  raw: z.record(z.any()).optional(),
  startAt: z.date().transform(v => v.toISOString()).optional(),
  status: PaymentSubscriptionStatus$outboundSchema.optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    canceledAt: "canceled_at",
    contactId: "contact_id",
    createdAt: "created_at",
    currentPeriodEndAt: "current_period_end_at",
    currentPeriodStartAt: "current_period_start_at",
    dayOfMonth: "day_of_month",
    dayOfWeek: "day_of_week",
    endAt: "end_at",
    intervalUnit: "interval_unit",
    invoiceId: "invoice_id",
    startAt: "start_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentSubscription$ {
  /** @deprecated use `PaymentSubscription$inboundSchema` instead. */
  export const inboundSchema = PaymentSubscription$inboundSchema;
  /** @deprecated use `PaymentSubscription$outboundSchema` instead. */
  export const outboundSchema = PaymentSubscription$outboundSchema;
  /** @deprecated use `PaymentSubscription$Outbound` instead. */
  export type Outbound = PaymentSubscription$Outbound;
}

export function paymentSubscriptionToJSON(
  paymentSubscription: PaymentSubscription,
): string {
  return JSON.stringify(
    PaymentSubscription$outboundSchema.parse(paymentSubscription),
  );
}

export function paymentSubscriptionFromJSON(
  jsonString: string,
): SafeParseResult<PaymentSubscription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentSubscription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentSubscription' from JSON`,
  );
}
