/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CommerceMetadata,
  CommerceMetadata$inboundSchema,
  CommerceMetadata$Outbound,
  CommerceMetadata$outboundSchema,
} from "./commercemetadata.js";

export const CommerceItemMediaType = {
  Image: "image",
  Video: "video",
} as const;
export type CommerceItemMediaType = ClosedEnum<typeof CommerceItemMediaType>;

export type CommerceItemMedia = {
  alt?: string | undefined;
  height?: number | undefined;
  id?: string | undefined;
  metadata?: Array<CommerceMetadata> | undefined;
  position?: number | undefined;
  type?: CommerceItemMediaType | undefined;
  url: string;
  width?: number | undefined;
};

/** @internal */
export const CommerceItemMediaType$inboundSchema: z.ZodNativeEnum<
  typeof CommerceItemMediaType
> = z.nativeEnum(CommerceItemMediaType);

/** @internal */
export const CommerceItemMediaType$outboundSchema: z.ZodNativeEnum<
  typeof CommerceItemMediaType
> = CommerceItemMediaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceItemMediaType$ {
  /** @deprecated use `CommerceItemMediaType$inboundSchema` instead. */
  export const inboundSchema = CommerceItemMediaType$inboundSchema;
  /** @deprecated use `CommerceItemMediaType$outboundSchema` instead. */
  export const outboundSchema = CommerceItemMediaType$outboundSchema;
}

/** @internal */
export const CommerceItemMedia$inboundSchema: z.ZodType<
  CommerceItemMedia,
  z.ZodTypeDef,
  unknown
> = z.object({
  alt: z.string().optional(),
  height: z.number().optional(),
  id: z.string().optional(),
  metadata: z.array(CommerceMetadata$inboundSchema).optional(),
  position: z.number().optional(),
  type: CommerceItemMediaType$inboundSchema.optional(),
  url: z.string(),
  width: z.number().optional(),
});

/** @internal */
export type CommerceItemMedia$Outbound = {
  alt?: string | undefined;
  height?: number | undefined;
  id?: string | undefined;
  metadata?: Array<CommerceMetadata$Outbound> | undefined;
  position?: number | undefined;
  type?: string | undefined;
  url: string;
  width?: number | undefined;
};

/** @internal */
export const CommerceItemMedia$outboundSchema: z.ZodType<
  CommerceItemMedia$Outbound,
  z.ZodTypeDef,
  CommerceItemMedia
> = z.object({
  alt: z.string().optional(),
  height: z.number().optional(),
  id: z.string().optional(),
  metadata: z.array(CommerceMetadata$outboundSchema).optional(),
  position: z.number().optional(),
  type: CommerceItemMediaType$outboundSchema.optional(),
  url: z.string(),
  width: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceItemMedia$ {
  /** @deprecated use `CommerceItemMedia$inboundSchema` instead. */
  export const inboundSchema = CommerceItemMedia$inboundSchema;
  /** @deprecated use `CommerceItemMedia$outboundSchema` instead. */
  export const outboundSchema = CommerceItemMedia$outboundSchema;
  /** @deprecated use `CommerceItemMedia$Outbound` instead. */
  export type Outbound = CommerceItemMedia$Outbound;
}

export function commerceItemMediaToJSON(
  commerceItemMedia: CommerceItemMedia,
): string {
  return JSON.stringify(
    CommerceItemMedia$outboundSchema.parse(commerceItemMedia),
  );
}

export function commerceItemMediaFromJSON(
  jsonString: string,
): SafeParseResult<CommerceItemMedia, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceItemMedia$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceItemMedia' from JSON`,
  );
}
