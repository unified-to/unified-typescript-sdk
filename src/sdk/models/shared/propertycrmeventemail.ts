/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The email object, when type = email
 */
export type PropertyCrmEventEmail = {
  attachmentFileIds?: Array<string> | undefined;
  body?: string | undefined;
  /**
   * The event email's cc name & email (name <test@test.com>)
   */
  cc?: Array<string> | undefined;
  from?: string | undefined;
  subject?: string | undefined;
  /**
   * The event email's "to" name & email (name <test@test.com>)
   */
  to?: Array<string> | undefined;
};

/** @internal */
export const PropertyCrmEventEmail$inboundSchema: z.ZodType<
  PropertyCrmEventEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachment_file_ids: z.array(z.string()).optional(),
  body: z.string().optional(),
  cc: z.array(z.string()).optional(),
  from: z.string().optional(),
  subject: z.string().optional(),
  to: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "attachment_file_ids": "attachmentFileIds",
  });
});

/** @internal */
export type PropertyCrmEventEmail$Outbound = {
  attachment_file_ids?: Array<string> | undefined;
  body?: string | undefined;
  cc?: Array<string> | undefined;
  from?: string | undefined;
  subject?: string | undefined;
  to?: Array<string> | undefined;
};

/** @internal */
export const PropertyCrmEventEmail$outboundSchema: z.ZodType<
  PropertyCrmEventEmail$Outbound,
  z.ZodTypeDef,
  PropertyCrmEventEmail
> = z.object({
  attachmentFileIds: z.array(z.string()).optional(),
  body: z.string().optional(),
  cc: z.array(z.string()).optional(),
  from: z.string().optional(),
  subject: z.string().optional(),
  to: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    attachmentFileIds: "attachment_file_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyCrmEventEmail$ {
  /** @deprecated use `PropertyCrmEventEmail$inboundSchema` instead. */
  export const inboundSchema = PropertyCrmEventEmail$inboundSchema;
  /** @deprecated use `PropertyCrmEventEmail$outboundSchema` instead. */
  export const outboundSchema = PropertyCrmEventEmail$outboundSchema;
  /** @deprecated use `PropertyCrmEventEmail$Outbound` instead. */
  export type Outbound = PropertyCrmEventEmail$Outbound;
}

export function propertyCrmEventEmailToJSON(
  propertyCrmEventEmail: PropertyCrmEventEmail,
): string {
  return JSON.stringify(
    PropertyCrmEventEmail$outboundSchema.parse(propertyCrmEventEmail),
  );
}

export function propertyCrmEventEmailFromJSON(
  jsonString: string,
): SafeParseResult<PropertyCrmEventEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyCrmEventEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyCrmEventEmail' from JSON`,
  );
}
