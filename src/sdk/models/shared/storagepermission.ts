/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import {
    PropertyStoragePermissionRoles,
    PropertyStoragePermissionRoles$inboundSchema,
    PropertyStoragePermissionRoles$outboundSchema,
} from "./propertystoragepermissionroles.js";
import * as z from "zod";

export type StoragePermission = {
    groupId?: string | undefined;
    roles: Array<PropertyStoragePermissionRoles>;
    userId?: string | undefined;
};

/** @internal */
export const StoragePermission$inboundSchema: z.ZodType<StoragePermission, z.ZodTypeDef, unknown> =
    z
        .object({
            group_id: z.string().optional(),
            roles: z.array(PropertyStoragePermissionRoles$inboundSchema),
            user_id: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                group_id: "groupId",
                user_id: "userId",
            });
        });

/** @internal */
export type StoragePermission$Outbound = {
    group_id?: string | undefined;
    roles: Array<string>;
    user_id?: string | undefined;
};

/** @internal */
export const StoragePermission$outboundSchema: z.ZodType<
    StoragePermission$Outbound,
    z.ZodTypeDef,
    StoragePermission
> = z
    .object({
        groupId: z.string().optional(),
        roles: z.array(PropertyStoragePermissionRoles$outboundSchema),
        userId: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            groupId: "group_id",
            userId: "user_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StoragePermission$ {
    /** @deprecated use `StoragePermission$inboundSchema` instead. */
    export const inboundSchema = StoragePermission$inboundSchema;
    /** @deprecated use `StoragePermission$outboundSchema` instead. */
    export const outboundSchema = StoragePermission$outboundSchema;
    /** @deprecated use `StoragePermission$Outbound` instead. */
    export type Outbound = StoragePermission$Outbound;
}
