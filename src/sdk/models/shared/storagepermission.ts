/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PropertyStoragePermissionRoles,
  PropertyStoragePermissionRoles$inboundSchema,
  PropertyStoragePermissionRoles$outboundSchema,
} from "./propertystoragepermissionroles.js";

export type StoragePermission = {
  groupId?: string | undefined;
  isHidden?: boolean | undefined;
  isPublic?: boolean | undefined;
  roles: Array<PropertyStoragePermissionRoles>;
  userId?: string | undefined;
};

/** @internal */
export const StoragePermission$inboundSchema: z.ZodType<
  StoragePermission,
  z.ZodTypeDef,
  unknown
> = z.object({
  group_id: z.string().optional(),
  is_hidden: z.boolean().optional(),
  is_public: z.boolean().optional(),
  roles: z.array(PropertyStoragePermissionRoles$inboundSchema),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
    "is_hidden": "isHidden",
    "is_public": "isPublic",
    "user_id": "userId",
  });
});

/** @internal */
export type StoragePermission$Outbound = {
  group_id?: string | undefined;
  is_hidden?: boolean | undefined;
  is_public?: boolean | undefined;
  roles: Array<string>;
  user_id?: string | undefined;
};

/** @internal */
export const StoragePermission$outboundSchema: z.ZodType<
  StoragePermission$Outbound,
  z.ZodTypeDef,
  StoragePermission
> = z.object({
  groupId: z.string().optional(),
  isHidden: z.boolean().optional(),
  isPublic: z.boolean().optional(),
  roles: z.array(PropertyStoragePermissionRoles$outboundSchema),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
    isHidden: "is_hidden",
    isPublic: "is_public",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StoragePermission$ {
  /** @deprecated use `StoragePermission$inboundSchema` instead. */
  export const inboundSchema = StoragePermission$inboundSchema;
  /** @deprecated use `StoragePermission$outboundSchema` instead. */
  export const outboundSchema = StoragePermission$outboundSchema;
  /** @deprecated use `StoragePermission$Outbound` instead. */
  export type Outbound = StoragePermission$Outbound;
}

export function storagePermissionToJSON(
  storagePermission: StoragePermission,
): string {
  return JSON.stringify(
    StoragePermission$outboundSchema.parse(storagePermission),
  );
}

export function storagePermissionFromJSON(
  jsonString: string,
): SafeParseResult<StoragePermission, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StoragePermission$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StoragePermission' from JSON`,
  );
}
