/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  VerificationAddress,
  VerificationAddress$inboundSchema,
  VerificationAddress$Outbound,
  VerificationAddress$outboundSchema,
} from "./verificationaddress.js";
import {
  VerificationParameterInput,
  VerificationParameterInput$inboundSchema,
  VerificationParameterInput$Outbound,
  VerificationParameterInput$outboundSchema,
} from "./verificationparameterinput.js";
import {
  VerificationResponseDetail,
  VerificationResponseDetail$inboundSchema,
  VerificationResponseDetail$Outbound,
  VerificationResponseDetail$outboundSchema,
} from "./verificationresponsedetail.js";

export const ProfileGender = {
  Male: "MALE",
  Female: "FEMALE",
  Intersex: "INTERSEX",
  Trans: "TRANS",
  NonBinary: "NON_BINARY",
} as const;
export type ProfileGender = OpenEnum<typeof ProfileGender>;

export const ResponseStatus = {
  Completed: "COMPLETED",
  Failed: "FAILED",
  Passed: "PASSED",
  Pending: "PENDING",
} as const;
export type ResponseStatus = OpenEnum<typeof ResponseStatus>;

export type VerificationRequest = {
  candidateId?: string | undefined;
  createdAt?: Date | undefined;
  id?: string | undefined;
  packageId?: string | undefined;
  parameters?: Array<VerificationParameterInput> | undefined;
  profileAddresses?: Array<VerificationAddress> | undefined;
  profileDateOfBirth?: string | undefined;
  profileEmails?: Array<string> | undefined;
  profileGender?: ProfileGender | undefined;
  profileIpAddress?: string | undefined;
  profileName?: string | undefined;
  profileNationalIdentifier?: string | undefined;
  profileTelephones?: Array<string> | undefined;
  raw?: { [k: string]: any } | undefined;
  responseCompletedAt?: Date | undefined;
  responseDetails?: Array<VerificationResponseDetail> | undefined;
  /**
   * report download
   */
  responseDownloadUrls?: Array<string> | undefined;
  responseExpiresAt?: Date | undefined;
  responseIssuedAt?: Date | undefined;
  responseRedirectUrl?: string | undefined;
  responseScore?: number | undefined;
  responseSource?: string | undefined;
  responseStatus?: ResponseStatus | undefined;
  targetUrl?: string | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const ProfileGender$inboundSchema: z.ZodType<
  ProfileGender,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ProfileGender),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ProfileGender$outboundSchema: z.ZodType<
  ProfileGender,
  z.ZodTypeDef,
  ProfileGender
> = z.union([
  z.nativeEnum(ProfileGender),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProfileGender$ {
  /** @deprecated use `ProfileGender$inboundSchema` instead. */
  export const inboundSchema = ProfileGender$inboundSchema;
  /** @deprecated use `ProfileGender$outboundSchema` instead. */
  export const outboundSchema = ProfileGender$outboundSchema;
}

/** @internal */
export const ResponseStatus$inboundSchema: z.ZodType<
  ResponseStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ResponseStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ResponseStatus$outboundSchema: z.ZodType<
  ResponseStatus,
  z.ZodTypeDef,
  ResponseStatus
> = z.union([
  z.nativeEnum(ResponseStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseStatus$ {
  /** @deprecated use `ResponseStatus$inboundSchema` instead. */
  export const inboundSchema = ResponseStatus$inboundSchema;
  /** @deprecated use `ResponseStatus$outboundSchema` instead. */
  export const outboundSchema = ResponseStatus$outboundSchema;
}

/** @internal */
export const VerificationRequest$inboundSchema: z.ZodType<
  VerificationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  candidate_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  id: z.string().optional(),
  package_id: z.string().optional(),
  parameters: z.array(VerificationParameterInput$inboundSchema).optional(),
  profile_addresses: z.array(VerificationAddress$inboundSchema).optional(),
  profile_date_of_birth: z.string().optional(),
  profile_emails: z.array(z.string()).optional(),
  profile_gender: ProfileGender$inboundSchema.optional(),
  profile_ip_address: z.string().optional(),
  profile_name: z.string().optional(),
  profile_national_identifier: z.string().optional(),
  profile_telephones: z.array(z.string()).optional(),
  raw: z.record(z.any()).optional(),
  response_completed_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  response_details: z.array(VerificationResponseDetail$inboundSchema)
    .optional(),
  response_download_urls: z.array(z.string()).optional(),
  response_expires_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  response_issued_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  response_redirect_url: z.string().optional(),
  response_score: z.number().optional(),
  response_source: z.string().optional(),
  response_status: ResponseStatus$inboundSchema.optional(),
  target_url: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "candidate_id": "candidateId",
    "created_at": "createdAt",
    "package_id": "packageId",
    "profile_addresses": "profileAddresses",
    "profile_date_of_birth": "profileDateOfBirth",
    "profile_emails": "profileEmails",
    "profile_gender": "profileGender",
    "profile_ip_address": "profileIpAddress",
    "profile_name": "profileName",
    "profile_national_identifier": "profileNationalIdentifier",
    "profile_telephones": "profileTelephones",
    "response_completed_at": "responseCompletedAt",
    "response_details": "responseDetails",
    "response_download_urls": "responseDownloadUrls",
    "response_expires_at": "responseExpiresAt",
    "response_issued_at": "responseIssuedAt",
    "response_redirect_url": "responseRedirectUrl",
    "response_score": "responseScore",
    "response_source": "responseSource",
    "response_status": "responseStatus",
    "target_url": "targetUrl",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type VerificationRequest$Outbound = {
  candidate_id?: string | undefined;
  created_at?: string | undefined;
  id?: string | undefined;
  package_id?: string | undefined;
  parameters?: Array<VerificationParameterInput$Outbound> | undefined;
  profile_addresses?: Array<VerificationAddress$Outbound> | undefined;
  profile_date_of_birth?: string | undefined;
  profile_emails?: Array<string> | undefined;
  profile_gender?: string | undefined;
  profile_ip_address?: string | undefined;
  profile_name?: string | undefined;
  profile_national_identifier?: string | undefined;
  profile_telephones?: Array<string> | undefined;
  raw?: { [k: string]: any } | undefined;
  response_completed_at?: string | undefined;
  response_details?: Array<VerificationResponseDetail$Outbound> | undefined;
  response_download_urls?: Array<string> | undefined;
  response_expires_at?: string | undefined;
  response_issued_at?: string | undefined;
  response_redirect_url?: string | undefined;
  response_score?: number | undefined;
  response_source?: string | undefined;
  response_status?: string | undefined;
  target_url?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const VerificationRequest$outboundSchema: z.ZodType<
  VerificationRequest$Outbound,
  z.ZodTypeDef,
  VerificationRequest
> = z.object({
  candidateId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  id: z.string().optional(),
  packageId: z.string().optional(),
  parameters: z.array(VerificationParameterInput$outboundSchema).optional(),
  profileAddresses: z.array(VerificationAddress$outboundSchema).optional(),
  profileDateOfBirth: z.string().optional(),
  profileEmails: z.array(z.string()).optional(),
  profileGender: ProfileGender$outboundSchema.optional(),
  profileIpAddress: z.string().optional(),
  profileName: z.string().optional(),
  profileNationalIdentifier: z.string().optional(),
  profileTelephones: z.array(z.string()).optional(),
  raw: z.record(z.any()).optional(),
  responseCompletedAt: z.date().transform(v => v.toISOString()).optional(),
  responseDetails: z.array(VerificationResponseDetail$outboundSchema)
    .optional(),
  responseDownloadUrls: z.array(z.string()).optional(),
  responseExpiresAt: z.date().transform(v => v.toISOString()).optional(),
  responseIssuedAt: z.date().transform(v => v.toISOString()).optional(),
  responseRedirectUrl: z.string().optional(),
  responseScore: z.number().optional(),
  responseSource: z.string().optional(),
  responseStatus: ResponseStatus$outboundSchema.optional(),
  targetUrl: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    candidateId: "candidate_id",
    createdAt: "created_at",
    packageId: "package_id",
    profileAddresses: "profile_addresses",
    profileDateOfBirth: "profile_date_of_birth",
    profileEmails: "profile_emails",
    profileGender: "profile_gender",
    profileIpAddress: "profile_ip_address",
    profileName: "profile_name",
    profileNationalIdentifier: "profile_national_identifier",
    profileTelephones: "profile_telephones",
    responseCompletedAt: "response_completed_at",
    responseDetails: "response_details",
    responseDownloadUrls: "response_download_urls",
    responseExpiresAt: "response_expires_at",
    responseIssuedAt: "response_issued_at",
    responseRedirectUrl: "response_redirect_url",
    responseScore: "response_score",
    responseSource: "response_source",
    responseStatus: "response_status",
    targetUrl: "target_url",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerificationRequest$ {
  /** @deprecated use `VerificationRequest$inboundSchema` instead. */
  export const inboundSchema = VerificationRequest$inboundSchema;
  /** @deprecated use `VerificationRequest$outboundSchema` instead. */
  export const outboundSchema = VerificationRequest$outboundSchema;
  /** @deprecated use `VerificationRequest$Outbound` instead. */
  export type Outbound = VerificationRequest$Outbound;
}

export function verificationRequestToJSON(
  verificationRequest: VerificationRequest,
): string {
  return JSON.stringify(
    VerificationRequest$outboundSchema.parse(verificationRequest),
  );
}

export function verificationRequestFromJSON(
  jsonString: string,
): SafeParseResult<VerificationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerificationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerificationRequest' from JSON`,
  );
}
