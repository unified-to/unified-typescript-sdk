/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type RepoRepository = {
  createdAt?: Date | undefined;
  description?: string | undefined;
  id?: string | undefined;
  isPrivate?: boolean | undefined;
  name: string;
  orgId?: string | undefined;
  owner?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  updatedAt?: Date | undefined;
  webUrl?: string | undefined;
};

/** @internal */
export const RepoRepository$inboundSchema: z.ZodType<
  RepoRepository,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  is_private: z.boolean().optional(),
  name: z.string(),
  org_id: z.string().optional(),
  owner: z.string().optional(),
  raw: z.record(z.any()).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  web_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "is_private": "isPrivate",
    "org_id": "orgId",
    "updated_at": "updatedAt",
    "web_url": "webUrl",
  });
});

/** @internal */
export type RepoRepository$Outbound = {
  created_at?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  is_private?: boolean | undefined;
  name: string;
  org_id?: string | undefined;
  owner?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  updated_at?: string | undefined;
  web_url?: string | undefined;
};

/** @internal */
export const RepoRepository$outboundSchema: z.ZodType<
  RepoRepository$Outbound,
  z.ZodTypeDef,
  RepoRepository
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  isPrivate: z.boolean().optional(),
  name: z.string(),
  orgId: z.string().optional(),
  owner: z.string().optional(),
  raw: z.record(z.any()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  webUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    isPrivate: "is_private",
    orgId: "org_id",
    updatedAt: "updated_at",
    webUrl: "web_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepoRepository$ {
  /** @deprecated use `RepoRepository$inboundSchema` instead. */
  export const inboundSchema = RepoRepository$inboundSchema;
  /** @deprecated use `RepoRepository$outboundSchema` instead. */
  export const outboundSchema = RepoRepository$outboundSchema;
  /** @deprecated use `RepoRepository$Outbound` instead. */
  export type Outbound = RepoRepository$Outbound;
}
