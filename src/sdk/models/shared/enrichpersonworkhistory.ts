/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EnrichPersonWorkHistory = {
  companyDomain?: string | undefined;
  companyId?: string | undefined;
  companyName?: string | undefined;
  endAt?: Date | undefined;
  location?: string | undefined;
  startAt?: Date | undefined;
  title: string;
};

/** @internal */
export const EnrichPersonWorkHistory$inboundSchema: z.ZodType<
  EnrichPersonWorkHistory,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_domain: z.string().optional(),
  company_id: z.string().optional(),
  company_name: z.string().optional(),
  end_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  location: z.string().optional(),
  start_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    "company_domain": "companyDomain",
    "company_id": "companyId",
    "company_name": "companyName",
    "end_at": "endAt",
    "start_at": "startAt",
  });
});

/** @internal */
export type EnrichPersonWorkHistory$Outbound = {
  company_domain?: string | undefined;
  company_id?: string | undefined;
  company_name?: string | undefined;
  end_at?: string | undefined;
  location?: string | undefined;
  start_at?: string | undefined;
  title: string;
};

/** @internal */
export const EnrichPersonWorkHistory$outboundSchema: z.ZodType<
  EnrichPersonWorkHistory$Outbound,
  z.ZodTypeDef,
  EnrichPersonWorkHistory
> = z.object({
  companyDomain: z.string().optional(),
  companyId: z.string().optional(),
  companyName: z.string().optional(),
  endAt: z.date().transform(v => v.toISOString()).optional(),
  location: z.string().optional(),
  startAt: z.date().transform(v => v.toISOString()).optional(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    companyDomain: "company_domain",
    companyId: "company_id",
    companyName: "company_name",
    endAt: "end_at",
    startAt: "start_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrichPersonWorkHistory$ {
  /** @deprecated use `EnrichPersonWorkHistory$inboundSchema` instead. */
  export const inboundSchema = EnrichPersonWorkHistory$inboundSchema;
  /** @deprecated use `EnrichPersonWorkHistory$outboundSchema` instead. */
  export const outboundSchema = EnrichPersonWorkHistory$outboundSchema;
  /** @deprecated use `EnrichPersonWorkHistory$Outbound` instead. */
  export type Outbound = EnrichPersonWorkHistory$Outbound;
}

export function enrichPersonWorkHistoryToJSON(
  enrichPersonWorkHistory: EnrichPersonWorkHistory,
): string {
  return JSON.stringify(
    EnrichPersonWorkHistory$outboundSchema.parse(enrichPersonWorkHistory),
  );
}

export function enrichPersonWorkHistoryFromJSON(
  jsonString: string,
): SafeParseResult<EnrichPersonWorkHistory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnrichPersonWorkHistory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnrichPersonWorkHistory' from JSON`,
  );
}
