/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  PropertyGroupMeta,
  PropertyGroupMeta$inboundSchema,
  PropertyGroupMeta$Outbound,
  PropertyGroupMeta$outboundSchema,
} from "./propertygroupmeta.js";
import {
  PropertyGroupSchemas,
  PropertyGroupSchemas$inboundSchema,
  PropertyGroupSchemas$outboundSchema,
} from "./propertygroupschemas.js";
import {
  Undefined,
  Undefined$inboundSchema,
  Undefined$Outbound,
  Undefined$outboundSchema,
} from "./undefined.js";

export type Group = {
  displayName?: string | undefined;
  externalId?: string | undefined;
  groupType?: string | undefined;
  id?: string | undefined;
  members?: Array<Undefined> | undefined;
  meta?: PropertyGroupMeta | undefined;
  schemas?: Array<PropertyGroupSchemas> | undefined;
};

/** @internal */
export const Group$inboundSchema: z.ZodType<Group, z.ZodTypeDef, unknown> = z
  .object({
    displayName: z.string().optional(),
    externalId: z.string().optional(),
    groupType: z.string().optional(),
    id: z.string().optional(),
    members: z.array(Undefined$inboundSchema).optional(),
    meta: PropertyGroupMeta$inboundSchema.optional(),
    schemas: z.array(PropertyGroupSchemas$inboundSchema).optional(),
  });

/** @internal */
export type Group$Outbound = {
  displayName?: string | undefined;
  externalId?: string | undefined;
  groupType?: string | undefined;
  id?: string | undefined;
  members?: Array<Undefined$Outbound> | undefined;
  meta?: PropertyGroupMeta$Outbound | undefined;
  schemas?: Array<string> | undefined;
};

/** @internal */
export const Group$outboundSchema: z.ZodType<
  Group$Outbound,
  z.ZodTypeDef,
  Group
> = z.object({
  displayName: z.string().optional(),
  externalId: z.string().optional(),
  groupType: z.string().optional(),
  id: z.string().optional(),
  members: z.array(Undefined$outboundSchema).optional(),
  meta: PropertyGroupMeta$outboundSchema.optional(),
  schemas: z.array(PropertyGroupSchemas$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Group$ {
  /** @deprecated use `Group$inboundSchema` instead. */
  export const inboundSchema = Group$inboundSchema;
  /** @deprecated use `Group$outboundSchema` instead. */
  export const outboundSchema = Group$outboundSchema;
  /** @deprecated use `Group$Outbound` instead. */
  export type Outbound = Group$Outbound;
}
