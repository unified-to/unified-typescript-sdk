/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmMetadata1 = {};

export type CrmMetadata5 = CrmMetadata1 | string | number | boolean;

export type CrmMetadataExtraData =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<CrmMetadata1 | string | number | boolean>;

export const CrmMetadataFormat = {
  Text: "TEXT",
  Number: "NUMBER",
  Date: "DATE",
  Boolean: "BOOLEAN",
  File: "FILE",
  Textarea: "TEXTAREA",
  SingleSelect: "SINGLE_SELECT",
  MultipleSelect: "MULTIPLE_SELECT",
  Measurement: "MEASUREMENT",
  Price: "PRICE",
  YesNo: "YES_NO",
  Currency: "CURRENCY",
  Url: "URL",
} as const;
export type CrmMetadataFormat = OpenEnum<typeof CrmMetadataFormat>;

export type CrmMetadataSchemas1 = {};

export type CrmMetadataSchemas5 =
  | CrmMetadataSchemas1
  | string
  | number
  | boolean;

export type CrmMetadataValue =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<CrmMetadataSchemas1 | string | number | boolean>;

export type CrmMetadata = {
  extraData?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<CrmMetadata1 | string | number | boolean>
    | undefined;
  format?: CrmMetadataFormat | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<CrmMetadataSchemas1 | string | number | boolean>
    | undefined;
};

/** @internal */
export const CrmMetadata1$inboundSchema: z.ZodType<
  CrmMetadata1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CrmMetadata1$Outbound = {};

/** @internal */
export const CrmMetadata1$outboundSchema: z.ZodType<
  CrmMetadata1$Outbound,
  z.ZodTypeDef,
  CrmMetadata1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmMetadata1$ {
  /** @deprecated use `CrmMetadata1$inboundSchema` instead. */
  export const inboundSchema = CrmMetadata1$inboundSchema;
  /** @deprecated use `CrmMetadata1$outboundSchema` instead. */
  export const outboundSchema = CrmMetadata1$outboundSchema;
  /** @deprecated use `CrmMetadata1$Outbound` instead. */
  export type Outbound = CrmMetadata1$Outbound;
}

export function crmMetadata1ToJSON(crmMetadata1: CrmMetadata1): string {
  return JSON.stringify(CrmMetadata1$outboundSchema.parse(crmMetadata1));
}

export function crmMetadata1FromJSON(
  jsonString: string,
): SafeParseResult<CrmMetadata1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmMetadata1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmMetadata1' from JSON`,
  );
}

/** @internal */
export const CrmMetadata5$inboundSchema: z.ZodType<
  CrmMetadata5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CrmMetadata1$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/** @internal */
export type CrmMetadata5$Outbound =
  | CrmMetadata1$Outbound
  | string
  | number
  | boolean;

/** @internal */
export const CrmMetadata5$outboundSchema: z.ZodType<
  CrmMetadata5$Outbound,
  z.ZodTypeDef,
  CrmMetadata5
> = z.union([
  z.lazy(() => CrmMetadata1$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmMetadata5$ {
  /** @deprecated use `CrmMetadata5$inboundSchema` instead. */
  export const inboundSchema = CrmMetadata5$inboundSchema;
  /** @deprecated use `CrmMetadata5$outboundSchema` instead. */
  export const outboundSchema = CrmMetadata5$outboundSchema;
  /** @deprecated use `CrmMetadata5$Outbound` instead. */
  export type Outbound = CrmMetadata5$Outbound;
}

export function crmMetadata5ToJSON(crmMetadata5: CrmMetadata5): string {
  return JSON.stringify(CrmMetadata5$outboundSchema.parse(crmMetadata5));
}

export function crmMetadata5FromJSON(
  jsonString: string,
): SafeParseResult<CrmMetadata5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmMetadata5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmMetadata5' from JSON`,
  );
}

/** @internal */
export const CrmMetadataExtraData$inboundSchema: z.ZodType<
  CrmMetadataExtraData,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => CrmMetadata1$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/** @internal */
export type CrmMetadataExtraData$Outbound =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<CrmMetadata1$Outbound | string | number | boolean>;

/** @internal */
export const CrmMetadataExtraData$outboundSchema: z.ZodType<
  CrmMetadataExtraData$Outbound,
  z.ZodTypeDef,
  CrmMetadataExtraData
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => CrmMetadata1$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmMetadataExtraData$ {
  /** @deprecated use `CrmMetadataExtraData$inboundSchema` instead. */
  export const inboundSchema = CrmMetadataExtraData$inboundSchema;
  /** @deprecated use `CrmMetadataExtraData$outboundSchema` instead. */
  export const outboundSchema = CrmMetadataExtraData$outboundSchema;
  /** @deprecated use `CrmMetadataExtraData$Outbound` instead. */
  export type Outbound = CrmMetadataExtraData$Outbound;
}

export function crmMetadataExtraDataToJSON(
  crmMetadataExtraData: CrmMetadataExtraData,
): string {
  return JSON.stringify(
    CrmMetadataExtraData$outboundSchema.parse(crmMetadataExtraData),
  );
}

export function crmMetadataExtraDataFromJSON(
  jsonString: string,
): SafeParseResult<CrmMetadataExtraData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmMetadataExtraData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmMetadataExtraData' from JSON`,
  );
}

/** @internal */
export const CrmMetadataFormat$inboundSchema: z.ZodType<
  CrmMetadataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CrmMetadataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CrmMetadataFormat$outboundSchema: z.ZodType<
  CrmMetadataFormat,
  z.ZodTypeDef,
  CrmMetadataFormat
> = z.union([
  z.nativeEnum(CrmMetadataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmMetadataFormat$ {
  /** @deprecated use `CrmMetadataFormat$inboundSchema` instead. */
  export const inboundSchema = CrmMetadataFormat$inboundSchema;
  /** @deprecated use `CrmMetadataFormat$outboundSchema` instead. */
  export const outboundSchema = CrmMetadataFormat$outboundSchema;
}

/** @internal */
export const CrmMetadataSchemas1$inboundSchema: z.ZodType<
  CrmMetadataSchemas1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CrmMetadataSchemas1$Outbound = {};

/** @internal */
export const CrmMetadataSchemas1$outboundSchema: z.ZodType<
  CrmMetadataSchemas1$Outbound,
  z.ZodTypeDef,
  CrmMetadataSchemas1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmMetadataSchemas1$ {
  /** @deprecated use `CrmMetadataSchemas1$inboundSchema` instead. */
  export const inboundSchema = CrmMetadataSchemas1$inboundSchema;
  /** @deprecated use `CrmMetadataSchemas1$outboundSchema` instead. */
  export const outboundSchema = CrmMetadataSchemas1$outboundSchema;
  /** @deprecated use `CrmMetadataSchemas1$Outbound` instead. */
  export type Outbound = CrmMetadataSchemas1$Outbound;
}

export function crmMetadataSchemas1ToJSON(
  crmMetadataSchemas1: CrmMetadataSchemas1,
): string {
  return JSON.stringify(
    CrmMetadataSchemas1$outboundSchema.parse(crmMetadataSchemas1),
  );
}

export function crmMetadataSchemas1FromJSON(
  jsonString: string,
): SafeParseResult<CrmMetadataSchemas1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmMetadataSchemas1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmMetadataSchemas1' from JSON`,
  );
}

/** @internal */
export const CrmMetadataSchemas5$inboundSchema: z.ZodType<
  CrmMetadataSchemas5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CrmMetadataSchemas1$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/** @internal */
export type CrmMetadataSchemas5$Outbound =
  | CrmMetadataSchemas1$Outbound
  | string
  | number
  | boolean;

/** @internal */
export const CrmMetadataSchemas5$outboundSchema: z.ZodType<
  CrmMetadataSchemas5$Outbound,
  z.ZodTypeDef,
  CrmMetadataSchemas5
> = z.union([
  z.lazy(() => CrmMetadataSchemas1$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmMetadataSchemas5$ {
  /** @deprecated use `CrmMetadataSchemas5$inboundSchema` instead. */
  export const inboundSchema = CrmMetadataSchemas5$inboundSchema;
  /** @deprecated use `CrmMetadataSchemas5$outboundSchema` instead. */
  export const outboundSchema = CrmMetadataSchemas5$outboundSchema;
  /** @deprecated use `CrmMetadataSchemas5$Outbound` instead. */
  export type Outbound = CrmMetadataSchemas5$Outbound;
}

export function crmMetadataSchemas5ToJSON(
  crmMetadataSchemas5: CrmMetadataSchemas5,
): string {
  return JSON.stringify(
    CrmMetadataSchemas5$outboundSchema.parse(crmMetadataSchemas5),
  );
}

export function crmMetadataSchemas5FromJSON(
  jsonString: string,
): SafeParseResult<CrmMetadataSchemas5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmMetadataSchemas5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmMetadataSchemas5' from JSON`,
  );
}

/** @internal */
export const CrmMetadataValue$inboundSchema: z.ZodType<
  CrmMetadataValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => CrmMetadataSchemas1$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/** @internal */
export type CrmMetadataValue$Outbound =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<CrmMetadataSchemas1$Outbound | string | number | boolean>;

/** @internal */
export const CrmMetadataValue$outboundSchema: z.ZodType<
  CrmMetadataValue$Outbound,
  z.ZodTypeDef,
  CrmMetadataValue
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => CrmMetadataSchemas1$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmMetadataValue$ {
  /** @deprecated use `CrmMetadataValue$inboundSchema` instead. */
  export const inboundSchema = CrmMetadataValue$inboundSchema;
  /** @deprecated use `CrmMetadataValue$outboundSchema` instead. */
  export const outboundSchema = CrmMetadataValue$outboundSchema;
  /** @deprecated use `CrmMetadataValue$Outbound` instead. */
  export type Outbound = CrmMetadataValue$Outbound;
}

export function crmMetadataValueToJSON(
  crmMetadataValue: CrmMetadataValue,
): string {
  return JSON.stringify(
    CrmMetadataValue$outboundSchema.parse(crmMetadataValue),
  );
}

export function crmMetadataValueFromJSON(
  jsonString: string,
): SafeParseResult<CrmMetadataValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmMetadataValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmMetadataValue' from JSON`,
  );
}

/** @internal */
export const CrmMetadata$inboundSchema: z.ZodType<
  CrmMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  extra_data: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => CrmMetadata1$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
  format: CrmMetadataFormat$inboundSchema.optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => CrmMetadataSchemas1$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "extra_data": "extraData",
  });
});

/** @internal */
export type CrmMetadata$Outbound = {
  extra_data?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<CrmMetadata1$Outbound | string | number | boolean>
    | undefined;
  format?: string | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<CrmMetadataSchemas1$Outbound | string | number | boolean>
    | undefined;
};

/** @internal */
export const CrmMetadata$outboundSchema: z.ZodType<
  CrmMetadata$Outbound,
  z.ZodTypeDef,
  CrmMetadata
> = z.object({
  extraData: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => CrmMetadata1$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
  format: CrmMetadataFormat$outboundSchema.optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => CrmMetadataSchemas1$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    extraData: "extra_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmMetadata$ {
  /** @deprecated use `CrmMetadata$inboundSchema` instead. */
  export const inboundSchema = CrmMetadata$inboundSchema;
  /** @deprecated use `CrmMetadata$outboundSchema` instead. */
  export const outboundSchema = CrmMetadata$outboundSchema;
  /** @deprecated use `CrmMetadata$Outbound` instead. */
  export type Outbound = CrmMetadata$Outbound;
}

export function crmMetadataToJSON(crmMetadata: CrmMetadata): string {
  return JSON.stringify(CrmMetadata$outboundSchema.parse(crmMetadata));
}

export function crmMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CrmMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmMetadata' from JSON`,
  );
}
