/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmMetadataExtraData = {};

export type CrmMetadataValue = {};

export type CrmMetadata = {
  extraData?: CrmMetadataExtraData | undefined;
  id?: string | undefined;
  key: string;
  namespace?: string | undefined;
  type?: string | undefined;
  value?: CrmMetadataValue | undefined;
};

/** @internal */
export const CrmMetadataExtraData$inboundSchema: z.ZodType<
  CrmMetadataExtraData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CrmMetadataExtraData$Outbound = {};

/** @internal */
export const CrmMetadataExtraData$outboundSchema: z.ZodType<
  CrmMetadataExtraData$Outbound,
  z.ZodTypeDef,
  CrmMetadataExtraData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmMetadataExtraData$ {
  /** @deprecated use `CrmMetadataExtraData$inboundSchema` instead. */
  export const inboundSchema = CrmMetadataExtraData$inboundSchema;
  /** @deprecated use `CrmMetadataExtraData$outboundSchema` instead. */
  export const outboundSchema = CrmMetadataExtraData$outboundSchema;
  /** @deprecated use `CrmMetadataExtraData$Outbound` instead. */
  export type Outbound = CrmMetadataExtraData$Outbound;
}

export function crmMetadataExtraDataToJSON(
  crmMetadataExtraData: CrmMetadataExtraData,
): string {
  return JSON.stringify(
    CrmMetadataExtraData$outboundSchema.parse(crmMetadataExtraData),
  );
}

export function crmMetadataExtraDataFromJSON(
  jsonString: string,
): SafeParseResult<CrmMetadataExtraData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmMetadataExtraData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmMetadataExtraData' from JSON`,
  );
}

/** @internal */
export const CrmMetadataValue$inboundSchema: z.ZodType<
  CrmMetadataValue,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CrmMetadataValue$Outbound = {};

/** @internal */
export const CrmMetadataValue$outboundSchema: z.ZodType<
  CrmMetadataValue$Outbound,
  z.ZodTypeDef,
  CrmMetadataValue
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmMetadataValue$ {
  /** @deprecated use `CrmMetadataValue$inboundSchema` instead. */
  export const inboundSchema = CrmMetadataValue$inboundSchema;
  /** @deprecated use `CrmMetadataValue$outboundSchema` instead. */
  export const outboundSchema = CrmMetadataValue$outboundSchema;
  /** @deprecated use `CrmMetadataValue$Outbound` instead. */
  export type Outbound = CrmMetadataValue$Outbound;
}

export function crmMetadataValueToJSON(
  crmMetadataValue: CrmMetadataValue,
): string {
  return JSON.stringify(
    CrmMetadataValue$outboundSchema.parse(crmMetadataValue),
  );
}

export function crmMetadataValueFromJSON(
  jsonString: string,
): SafeParseResult<CrmMetadataValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmMetadataValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmMetadataValue' from JSON`,
  );
}

/** @internal */
export const CrmMetadata$inboundSchema: z.ZodType<
  CrmMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  extra_data: z.lazy(() => CrmMetadataExtraData$inboundSchema).optional(),
  id: z.string().optional(),
  key: z.string(),
  namespace: z.string().optional(),
  type: z.string().optional(),
  value: z.lazy(() => CrmMetadataValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "extra_data": "extraData",
  });
});

/** @internal */
export type CrmMetadata$Outbound = {
  extra_data?: CrmMetadataExtraData$Outbound | undefined;
  id?: string | undefined;
  key: string;
  namespace?: string | undefined;
  type?: string | undefined;
  value?: CrmMetadataValue$Outbound | undefined;
};

/** @internal */
export const CrmMetadata$outboundSchema: z.ZodType<
  CrmMetadata$Outbound,
  z.ZodTypeDef,
  CrmMetadata
> = z.object({
  extraData: z.lazy(() => CrmMetadataExtraData$outboundSchema).optional(),
  id: z.string().optional(),
  key: z.string(),
  namespace: z.string().optional(),
  type: z.string().optional(),
  value: z.lazy(() => CrmMetadataValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    extraData: "extra_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmMetadata$ {
  /** @deprecated use `CrmMetadata$inboundSchema` instead. */
  export const inboundSchema = CrmMetadata$inboundSchema;
  /** @deprecated use `CrmMetadata$outboundSchema` instead. */
  export const outboundSchema = CrmMetadata$outboundSchema;
  /** @deprecated use `CrmMetadata$Outbound` instead. */
  export type Outbound = CrmMetadata$Outbound;
}

export function crmMetadataToJSON(crmMetadata: CrmMetadata): string {
  return JSON.stringify(CrmMetadata$outboundSchema.parse(crmMetadata));
}

export function crmMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CrmMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmMetadata' from JSON`,
  );
}
