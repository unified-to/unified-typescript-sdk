/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type MessagingMember = {
    email?: string | undefined;
    name?: string | undefined;
    userId?: string | undefined;
};

/** @internal */
export const MessagingMember$inboundSchema: z.ZodType<MessagingMember, z.ZodTypeDef, unknown> = z
    .object({
        email: z.string().optional(),
        name: z.string().optional(),
        user_id: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            user_id: "userId",
        });
    });

/** @internal */
export type MessagingMember$Outbound = {
    email?: string | undefined;
    name?: string | undefined;
    user_id?: string | undefined;
};

/** @internal */
export const MessagingMember$outboundSchema: z.ZodType<
    MessagingMember$Outbound,
    z.ZodTypeDef,
    MessagingMember
> = z
    .object({
        email: z.string().optional(),
        name: z.string().optional(),
        userId: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            userId: "user_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingMember$ {
    /** @deprecated use `MessagingMember$inboundSchema` instead. */
    export const inboundSchema = MessagingMember$inboundSchema;
    /** @deprecated use `MessagingMember$outboundSchema` instead. */
    export const outboundSchema = MessagingMember$outboundSchema;
    /** @deprecated use `MessagingMember$Outbound` instead. */
    export type Outbound = MessagingMember$Outbound;
}
