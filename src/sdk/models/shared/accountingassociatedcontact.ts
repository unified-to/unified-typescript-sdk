/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingEmail,
  AccountingEmail$inboundSchema,
  AccountingEmail$Outbound,
  AccountingEmail$outboundSchema,
} from "./accountingemail.js";

export type AccountingAssociatedContact = {
  emails?: Array<AccountingEmail> | undefined;
  id?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const AccountingAssociatedContact$inboundSchema: z.ZodType<
  AccountingAssociatedContact,
  z.ZodTypeDef,
  unknown
> = z.object({
  emails: z.array(AccountingEmail$inboundSchema).optional(),
  id: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type AccountingAssociatedContact$Outbound = {
  emails?: Array<AccountingEmail$Outbound> | undefined;
  id?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const AccountingAssociatedContact$outboundSchema: z.ZodType<
  AccountingAssociatedContact$Outbound,
  z.ZodTypeDef,
  AccountingAssociatedContact
> = z.object({
  emails: z.array(AccountingEmail$outboundSchema).optional(),
  id: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAssociatedContact$ {
  /** @deprecated use `AccountingAssociatedContact$inboundSchema` instead. */
  export const inboundSchema = AccountingAssociatedContact$inboundSchema;
  /** @deprecated use `AccountingAssociatedContact$outboundSchema` instead. */
  export const outboundSchema = AccountingAssociatedContact$outboundSchema;
  /** @deprecated use `AccountingAssociatedContact$Outbound` instead. */
  export type Outbound = AccountingAssociatedContact$Outbound;
}

export function accountingAssociatedContactToJSON(
  accountingAssociatedContact: AccountingAssociatedContact,
): string {
  return JSON.stringify(
    AccountingAssociatedContact$outboundSchema.parse(
      accountingAssociatedContact,
    ),
  );
}

export function accountingAssociatedContactFromJSON(
  jsonString: string,
): SafeParseResult<AccountingAssociatedContact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingAssociatedContact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingAssociatedContact' from JSON`,
  );
}
