/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AtsEmailType = {
  Work: "WORK",
  Home: "HOME",
  Other: "OTHER",
} as const;
export type AtsEmailType = ClosedEnum<typeof AtsEmailType>;

export type AtsEmail = {
  email: string;
  name?: string | undefined;
  type?: AtsEmailType | undefined;
};

/** @internal */
export const AtsEmailType$inboundSchema: z.ZodNativeEnum<typeof AtsEmailType> =
  z.nativeEnum(AtsEmailType);

/** @internal */
export const AtsEmailType$outboundSchema: z.ZodNativeEnum<typeof AtsEmailType> =
  AtsEmailType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsEmailType$ {
  /** @deprecated use `AtsEmailType$inboundSchema` instead. */
  export const inboundSchema = AtsEmailType$inboundSchema;
  /** @deprecated use `AtsEmailType$outboundSchema` instead. */
  export const outboundSchema = AtsEmailType$outboundSchema;
}

/** @internal */
export const AtsEmail$inboundSchema: z.ZodType<
  AtsEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  name: z.string().optional(),
  type: AtsEmailType$inboundSchema.optional(),
});

/** @internal */
export type AtsEmail$Outbound = {
  email: string;
  name?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const AtsEmail$outboundSchema: z.ZodType<
  AtsEmail$Outbound,
  z.ZodTypeDef,
  AtsEmail
> = z.object({
  email: z.string(),
  name: z.string().optional(),
  type: AtsEmailType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsEmail$ {
  /** @deprecated use `AtsEmail$inboundSchema` instead. */
  export const inboundSchema = AtsEmail$inboundSchema;
  /** @deprecated use `AtsEmail$outboundSchema` instead. */
  export const outboundSchema = AtsEmail$outboundSchema;
  /** @deprecated use `AtsEmail$Outbound` instead. */
  export type Outbound = AtsEmail$Outbound;
}

export function atsEmailToJSON(atsEmail: AtsEmail): string {
  return JSON.stringify(AtsEmail$outboundSchema.parse(atsEmail));
}

export function atsEmailFromJSON(
  jsonString: string,
): SafeParseResult<AtsEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsEmail' from JSON`,
  );
}
