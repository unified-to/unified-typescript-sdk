/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Role = {
  System: "SYSTEM",
  User: "USER",
} as const;
export type Role = OpenEnum<typeof Role>;

export type GenaiContent = {
  content: string;
  role?: Role | undefined;
};

/** @internal */
export const Role$inboundSchema: z.ZodType<Role, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Role),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Role$outboundSchema: z.ZodType<Role, z.ZodTypeDef, Role> = z.union(
  [
    z.nativeEnum(Role),
    z.string().and(z.custom<Unrecognized<string>>()),
  ],
);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const GenaiContent$inboundSchema: z.ZodType<
  GenaiContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string(),
  role: Role$inboundSchema.optional(),
});

/** @internal */
export type GenaiContent$Outbound = {
  content: string;
  role?: string | undefined;
};

/** @internal */
export const GenaiContent$outboundSchema: z.ZodType<
  GenaiContent$Outbound,
  z.ZodTypeDef,
  GenaiContent
> = z.object({
  content: z.string(),
  role: Role$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenaiContent$ {
  /** @deprecated use `GenaiContent$inboundSchema` instead. */
  export const inboundSchema = GenaiContent$inboundSchema;
  /** @deprecated use `GenaiContent$outboundSchema` instead. */
  export const outboundSchema = GenaiContent$outboundSchema;
  /** @deprecated use `GenaiContent$Outbound` instead. */
  export type Outbound = GenaiContent$Outbound;
}

export function genaiContentToJSON(genaiContent: GenaiContent): string {
  return JSON.stringify(GenaiContent$outboundSchema.parse(genaiContent));
}

export function genaiContentFromJSON(
  jsonString: string,
): SafeParseResult<GenaiContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenaiContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenaiContent' from JSON`,
  );
}
