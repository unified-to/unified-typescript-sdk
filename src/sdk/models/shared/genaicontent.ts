/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

export const Role = {
  System: "SYSTEM",
  User: "USER",
} as const;
export type Role = ClosedEnum<typeof Role>;

export type GenaiContent = {
  content: string;
  role?: Role | undefined;
};

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const GenaiContent$inboundSchema: z.ZodType<
  GenaiContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string(),
  role: Role$inboundSchema.optional(),
});

/** @internal */
export type GenaiContent$Outbound = {
  content: string;
  role?: string | undefined;
};

/** @internal */
export const GenaiContent$outboundSchema: z.ZodType<
  GenaiContent$Outbound,
  z.ZodTypeDef,
  GenaiContent
> = z.object({
  content: z.string(),
  role: Role$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenaiContent$ {
  /** @deprecated use `GenaiContent$inboundSchema` instead. */
  export const inboundSchema = GenaiContent$inboundSchema;
  /** @deprecated use `GenaiContent$outboundSchema` instead. */
  export const outboundSchema = GenaiContent$outboundSchema;
  /** @deprecated use `GenaiContent$Outbound` instead. */
  export type Outbound = GenaiContent$Outbound;
}
