/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingJournalLineitem = {
  accountId?: string | undefined;
  contactId?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  invoiceId?: string | undefined;
  paymentId?: string | undefined;
  taxAmount?: number | undefined;
  totalAmount?: number | undefined;
};

/** @internal */
export const AccountingJournalLineitem$inboundSchema: z.ZodType<
  AccountingJournalLineitem,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string().optional(),
  contact_id: z.string().optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  invoice_id: z.string().optional(),
  payment_id: z.string().optional(),
  tax_amount: z.number().optional(),
  total_amount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "contact_id": "contactId",
    "invoice_id": "invoiceId",
    "payment_id": "paymentId",
    "tax_amount": "taxAmount",
    "total_amount": "totalAmount",
  });
});

/** @internal */
export type AccountingJournalLineitem$Outbound = {
  account_id?: string | undefined;
  contact_id?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  invoice_id?: string | undefined;
  payment_id?: string | undefined;
  tax_amount?: number | undefined;
  total_amount?: number | undefined;
};

/** @internal */
export const AccountingJournalLineitem$outboundSchema: z.ZodType<
  AccountingJournalLineitem$Outbound,
  z.ZodTypeDef,
  AccountingJournalLineitem
> = z.object({
  accountId: z.string().optional(),
  contactId: z.string().optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  invoiceId: z.string().optional(),
  paymentId: z.string().optional(),
  taxAmount: z.number().optional(),
  totalAmount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    contactId: "contact_id",
    invoiceId: "invoice_id",
    paymentId: "payment_id",
    taxAmount: "tax_amount",
    totalAmount: "total_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingJournalLineitem$ {
  /** @deprecated use `AccountingJournalLineitem$inboundSchema` instead. */
  export const inboundSchema = AccountingJournalLineitem$inboundSchema;
  /** @deprecated use `AccountingJournalLineitem$outboundSchema` instead. */
  export const outboundSchema = AccountingJournalLineitem$outboundSchema;
  /** @deprecated use `AccountingJournalLineitem$Outbound` instead. */
  export type Outbound = AccountingJournalLineitem$Outbound;
}

export function accountingJournalLineitemToJSON(
  accountingJournalLineitem: AccountingJournalLineitem,
): string {
  return JSON.stringify(
    AccountingJournalLineitem$outboundSchema.parse(accountingJournalLineitem),
  );
}

export function accountingJournalLineitemFromJSON(
  jsonString: string,
): SafeParseResult<AccountingJournalLineitem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingJournalLineitem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingJournalLineitem' from JSON`,
  );
}
