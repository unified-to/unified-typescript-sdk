/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingTransactionContact,
  AccountingTransactionContact$inboundSchema,
  AccountingTransactionContact$Outbound,
  AccountingTransactionContact$outboundSchema,
} from "./accountingtransactioncontact.js";
import {
  AccountingTransactionLineItem,
  AccountingTransactionLineItem$inboundSchema,
  AccountingTransactionLineItem$Outbound,
  AccountingTransactionLineItem$outboundSchema,
} from "./accountingtransactionlineitem.js";

export type AccountingTransaction = {
  accountId?: string | undefined;
  contactId?: string | undefined;
  contacts?: Array<AccountingTransactionContact> | undefined;
  createdAt?: Date | undefined;
  currency?: string | undefined;
  customerMessage?: string | undefined;
  id?: string | undefined;
  lineitems?: Array<AccountingTransactionLineItem> | undefined;
  memo?: string | undefined;
  paymentMethod?: string | undefined;
  paymentTerms?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  reference?: string | undefined;
  splitAccountId?: string | undefined;
  subTotalAmount?: number | undefined;
  taxAmount?: number | undefined;
  totalAmount?: number | undefined;
  type?: string | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const AccountingTransaction$inboundSchema: z.ZodType<
  AccountingTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string().optional(),
  contact_id: z.string().optional(),
  contacts: z.array(AccountingTransactionContact$inboundSchema).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  currency: z.string().optional(),
  customer_message: z.string().optional(),
  id: z.string().optional(),
  lineitems: z.array(AccountingTransactionLineItem$inboundSchema).optional(),
  memo: z.string().optional(),
  payment_method: z.string().optional(),
  payment_terms: z.string().optional(),
  raw: z.record(z.any()).optional(),
  reference: z.string().optional(),
  split_account_id: z.string().optional(),
  sub_total_amount: z.number().optional(),
  tax_amount: z.number().optional(),
  total_amount: z.number().optional(),
  type: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "contact_id": "contactId",
    "created_at": "createdAt",
    "customer_message": "customerMessage",
    "payment_method": "paymentMethod",
    "payment_terms": "paymentTerms",
    "split_account_id": "splitAccountId",
    "sub_total_amount": "subTotalAmount",
    "tax_amount": "taxAmount",
    "total_amount": "totalAmount",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AccountingTransaction$Outbound = {
  account_id?: string | undefined;
  contact_id?: string | undefined;
  contacts?: Array<AccountingTransactionContact$Outbound> | undefined;
  created_at?: string | undefined;
  currency?: string | undefined;
  customer_message?: string | undefined;
  id?: string | undefined;
  lineitems?: Array<AccountingTransactionLineItem$Outbound> | undefined;
  memo?: string | undefined;
  payment_method?: string | undefined;
  payment_terms?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  reference?: string | undefined;
  split_account_id?: string | undefined;
  sub_total_amount?: number | undefined;
  tax_amount?: number | undefined;
  total_amount?: number | undefined;
  type?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const AccountingTransaction$outboundSchema: z.ZodType<
  AccountingTransaction$Outbound,
  z.ZodTypeDef,
  AccountingTransaction
> = z.object({
  accountId: z.string().optional(),
  contactId: z.string().optional(),
  contacts: z.array(AccountingTransactionContact$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  currency: z.string().optional(),
  customerMessage: z.string().optional(),
  id: z.string().optional(),
  lineitems: z.array(AccountingTransactionLineItem$outboundSchema).optional(),
  memo: z.string().optional(),
  paymentMethod: z.string().optional(),
  paymentTerms: z.string().optional(),
  raw: z.record(z.any()).optional(),
  reference: z.string().optional(),
  splitAccountId: z.string().optional(),
  subTotalAmount: z.number().optional(),
  taxAmount: z.number().optional(),
  totalAmount: z.number().optional(),
  type: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    contactId: "contact_id",
    createdAt: "created_at",
    customerMessage: "customer_message",
    paymentMethod: "payment_method",
    paymentTerms: "payment_terms",
    splitAccountId: "split_account_id",
    subTotalAmount: "sub_total_amount",
    taxAmount: "tax_amount",
    totalAmount: "total_amount",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTransaction$ {
  /** @deprecated use `AccountingTransaction$inboundSchema` instead. */
  export const inboundSchema = AccountingTransaction$inboundSchema;
  /** @deprecated use `AccountingTransaction$outboundSchema` instead. */
  export const outboundSchema = AccountingTransaction$outboundSchema;
  /** @deprecated use `AccountingTransaction$Outbound` instead. */
  export type Outbound = AccountingTransaction$Outbound;
}

export function accountingTransactionToJSON(
  accountingTransaction: AccountingTransaction,
): string {
  return JSON.stringify(
    AccountingTransaction$outboundSchema.parse(accountingTransaction),
  );
}

export function accountingTransactionFromJSON(
  jsonString: string,
): SafeParseResult<AccountingTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingTransaction' from JSON`,
  );
}
