/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisMetadata1 = {};

export type HrisMetadata5 = HrisMetadata1 | string | number | boolean;

export type HrisMetadataExtraData =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<HrisMetadata1 | string | number | boolean>;

export const HrisMetadataFormat = {
  Text: "TEXT",
  Number: "NUMBER",
  Date: "DATE",
  Boolean: "BOOLEAN",
  File: "FILE",
  Textarea: "TEXTAREA",
  SingleSelect: "SINGLE_SELECT",
  MultipleSelect: "MULTIPLE_SELECT",
  Measurement: "MEASUREMENT",
  Price: "PRICE",
  YesNo: "YES_NO",
  Currency: "CURRENCY",
  Url: "URL",
} as const;
export type HrisMetadataFormat = OpenEnum<typeof HrisMetadataFormat>;

export type HrisMetadataSchemas1 = {};

export type HrisMetadataSchemas5 =
  | HrisMetadataSchemas1
  | string
  | number
  | boolean;

export type HrisMetadataValue =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<HrisMetadataSchemas1 | string | number | boolean>;

export type HrisMetadata = {
  extraData?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<HrisMetadata1 | string | number | boolean>
    | undefined;
  format?: HrisMetadataFormat | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<HrisMetadataSchemas1 | string | number | boolean>
    | undefined;
};

/** @internal */
export const HrisMetadata1$inboundSchema: z.ZodType<
  HrisMetadata1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisMetadata1$Outbound = {};

/** @internal */
export const HrisMetadata1$outboundSchema: z.ZodType<
  HrisMetadata1$Outbound,
  z.ZodTypeDef,
  HrisMetadata1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisMetadata1$ {
  /** @deprecated use `HrisMetadata1$inboundSchema` instead. */
  export const inboundSchema = HrisMetadata1$inboundSchema;
  /** @deprecated use `HrisMetadata1$outboundSchema` instead. */
  export const outboundSchema = HrisMetadata1$outboundSchema;
  /** @deprecated use `HrisMetadata1$Outbound` instead. */
  export type Outbound = HrisMetadata1$Outbound;
}

export function hrisMetadata1ToJSON(hrisMetadata1: HrisMetadata1): string {
  return JSON.stringify(HrisMetadata1$outboundSchema.parse(hrisMetadata1));
}

export function hrisMetadata1FromJSON(
  jsonString: string,
): SafeParseResult<HrisMetadata1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisMetadata1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisMetadata1' from JSON`,
  );
}

/** @internal */
export const HrisMetadata5$inboundSchema: z.ZodType<
  HrisMetadata5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisMetadata1$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/** @internal */
export type HrisMetadata5$Outbound =
  | HrisMetadata1$Outbound
  | string
  | number
  | boolean;

/** @internal */
export const HrisMetadata5$outboundSchema: z.ZodType<
  HrisMetadata5$Outbound,
  z.ZodTypeDef,
  HrisMetadata5
> = z.union([
  z.lazy(() => HrisMetadata1$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisMetadata5$ {
  /** @deprecated use `HrisMetadata5$inboundSchema` instead. */
  export const inboundSchema = HrisMetadata5$inboundSchema;
  /** @deprecated use `HrisMetadata5$outboundSchema` instead. */
  export const outboundSchema = HrisMetadata5$outboundSchema;
  /** @deprecated use `HrisMetadata5$Outbound` instead. */
  export type Outbound = HrisMetadata5$Outbound;
}

export function hrisMetadata5ToJSON(hrisMetadata5: HrisMetadata5): string {
  return JSON.stringify(HrisMetadata5$outboundSchema.parse(hrisMetadata5));
}

export function hrisMetadata5FromJSON(
  jsonString: string,
): SafeParseResult<HrisMetadata5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisMetadata5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisMetadata5' from JSON`,
  );
}

/** @internal */
export const HrisMetadataExtraData$inboundSchema: z.ZodType<
  HrisMetadataExtraData,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => HrisMetadata1$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/** @internal */
export type HrisMetadataExtraData$Outbound =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<HrisMetadata1$Outbound | string | number | boolean>;

/** @internal */
export const HrisMetadataExtraData$outboundSchema: z.ZodType<
  HrisMetadataExtraData$Outbound,
  z.ZodTypeDef,
  HrisMetadataExtraData
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => HrisMetadata1$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisMetadataExtraData$ {
  /** @deprecated use `HrisMetadataExtraData$inboundSchema` instead. */
  export const inboundSchema = HrisMetadataExtraData$inboundSchema;
  /** @deprecated use `HrisMetadataExtraData$outboundSchema` instead. */
  export const outboundSchema = HrisMetadataExtraData$outboundSchema;
  /** @deprecated use `HrisMetadataExtraData$Outbound` instead. */
  export type Outbound = HrisMetadataExtraData$Outbound;
}

export function hrisMetadataExtraDataToJSON(
  hrisMetadataExtraData: HrisMetadataExtraData,
): string {
  return JSON.stringify(
    HrisMetadataExtraData$outboundSchema.parse(hrisMetadataExtraData),
  );
}

export function hrisMetadataExtraDataFromJSON(
  jsonString: string,
): SafeParseResult<HrisMetadataExtraData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisMetadataExtraData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisMetadataExtraData' from JSON`,
  );
}

/** @internal */
export const HrisMetadataFormat$inboundSchema: z.ZodType<
  HrisMetadataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HrisMetadataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HrisMetadataFormat$outboundSchema: z.ZodType<
  HrisMetadataFormat,
  z.ZodTypeDef,
  HrisMetadataFormat
> = z.union([
  z.nativeEnum(HrisMetadataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisMetadataFormat$ {
  /** @deprecated use `HrisMetadataFormat$inboundSchema` instead. */
  export const inboundSchema = HrisMetadataFormat$inboundSchema;
  /** @deprecated use `HrisMetadataFormat$outboundSchema` instead. */
  export const outboundSchema = HrisMetadataFormat$outboundSchema;
}

/** @internal */
export const HrisMetadataSchemas1$inboundSchema: z.ZodType<
  HrisMetadataSchemas1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisMetadataSchemas1$Outbound = {};

/** @internal */
export const HrisMetadataSchemas1$outboundSchema: z.ZodType<
  HrisMetadataSchemas1$Outbound,
  z.ZodTypeDef,
  HrisMetadataSchemas1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisMetadataSchemas1$ {
  /** @deprecated use `HrisMetadataSchemas1$inboundSchema` instead. */
  export const inboundSchema = HrisMetadataSchemas1$inboundSchema;
  /** @deprecated use `HrisMetadataSchemas1$outboundSchema` instead. */
  export const outboundSchema = HrisMetadataSchemas1$outboundSchema;
  /** @deprecated use `HrisMetadataSchemas1$Outbound` instead. */
  export type Outbound = HrisMetadataSchemas1$Outbound;
}

export function hrisMetadataSchemas1ToJSON(
  hrisMetadataSchemas1: HrisMetadataSchemas1,
): string {
  return JSON.stringify(
    HrisMetadataSchemas1$outboundSchema.parse(hrisMetadataSchemas1),
  );
}

export function hrisMetadataSchemas1FromJSON(
  jsonString: string,
): SafeParseResult<HrisMetadataSchemas1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisMetadataSchemas1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisMetadataSchemas1' from JSON`,
  );
}

/** @internal */
export const HrisMetadataSchemas5$inboundSchema: z.ZodType<
  HrisMetadataSchemas5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => HrisMetadataSchemas1$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/** @internal */
export type HrisMetadataSchemas5$Outbound =
  | HrisMetadataSchemas1$Outbound
  | string
  | number
  | boolean;

/** @internal */
export const HrisMetadataSchemas5$outboundSchema: z.ZodType<
  HrisMetadataSchemas5$Outbound,
  z.ZodTypeDef,
  HrisMetadataSchemas5
> = z.union([
  z.lazy(() => HrisMetadataSchemas1$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisMetadataSchemas5$ {
  /** @deprecated use `HrisMetadataSchemas5$inboundSchema` instead. */
  export const inboundSchema = HrisMetadataSchemas5$inboundSchema;
  /** @deprecated use `HrisMetadataSchemas5$outboundSchema` instead. */
  export const outboundSchema = HrisMetadataSchemas5$outboundSchema;
  /** @deprecated use `HrisMetadataSchemas5$Outbound` instead. */
  export type Outbound = HrisMetadataSchemas5$Outbound;
}

export function hrisMetadataSchemas5ToJSON(
  hrisMetadataSchemas5: HrisMetadataSchemas5,
): string {
  return JSON.stringify(
    HrisMetadataSchemas5$outboundSchema.parse(hrisMetadataSchemas5),
  );
}

export function hrisMetadataSchemas5FromJSON(
  jsonString: string,
): SafeParseResult<HrisMetadataSchemas5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisMetadataSchemas5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisMetadataSchemas5' from JSON`,
  );
}

/** @internal */
export const HrisMetadataValue$inboundSchema: z.ZodType<
  HrisMetadataValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => HrisMetadataSchemas1$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/** @internal */
export type HrisMetadataValue$Outbound =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<HrisMetadataSchemas1$Outbound | string | number | boolean>;

/** @internal */
export const HrisMetadataValue$outboundSchema: z.ZodType<
  HrisMetadataValue$Outbound,
  z.ZodTypeDef,
  HrisMetadataValue
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => HrisMetadataSchemas1$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisMetadataValue$ {
  /** @deprecated use `HrisMetadataValue$inboundSchema` instead. */
  export const inboundSchema = HrisMetadataValue$inboundSchema;
  /** @deprecated use `HrisMetadataValue$outboundSchema` instead. */
  export const outboundSchema = HrisMetadataValue$outboundSchema;
  /** @deprecated use `HrisMetadataValue$Outbound` instead. */
  export type Outbound = HrisMetadataValue$Outbound;
}

export function hrisMetadataValueToJSON(
  hrisMetadataValue: HrisMetadataValue,
): string {
  return JSON.stringify(
    HrisMetadataValue$outboundSchema.parse(hrisMetadataValue),
  );
}

export function hrisMetadataValueFromJSON(
  jsonString: string,
): SafeParseResult<HrisMetadataValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisMetadataValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisMetadataValue' from JSON`,
  );
}

/** @internal */
export const HrisMetadata$inboundSchema: z.ZodType<
  HrisMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  extra_data: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => HrisMetadata1$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
  format: HrisMetadataFormat$inboundSchema.optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => HrisMetadataSchemas1$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "extra_data": "extraData",
  });
});

/** @internal */
export type HrisMetadata$Outbound = {
  extra_data?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<HrisMetadata1$Outbound | string | number | boolean>
    | undefined;
  format?: string | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<HrisMetadataSchemas1$Outbound | string | number | boolean>
    | undefined;
};

/** @internal */
export const HrisMetadata$outboundSchema: z.ZodType<
  HrisMetadata$Outbound,
  z.ZodTypeDef,
  HrisMetadata
> = z.object({
  extraData: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => HrisMetadata1$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
  format: HrisMetadataFormat$outboundSchema.optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => HrisMetadataSchemas1$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    extraData: "extra_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisMetadata$ {
  /** @deprecated use `HrisMetadata$inboundSchema` instead. */
  export const inboundSchema = HrisMetadata$inboundSchema;
  /** @deprecated use `HrisMetadata$outboundSchema` instead. */
  export const outboundSchema = HrisMetadata$outboundSchema;
  /** @deprecated use `HrisMetadata$Outbound` instead. */
  export type Outbound = HrisMetadata$Outbound;
}

export function hrisMetadataToJSON(hrisMetadata: HrisMetadata): string {
  return JSON.stringify(HrisMetadata$outboundSchema.parse(hrisMetadata));
}

export function hrisMetadataFromJSON(
  jsonString: string,
): SafeParseResult<HrisMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisMetadata' from JSON`,
  );
}
