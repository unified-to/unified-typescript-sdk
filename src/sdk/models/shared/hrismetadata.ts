/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisMetadataExtraData = {};

export type HrisMetadataValue = {};

export type HrisMetadata = {
  extraData?: HrisMetadataExtraData | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?: HrisMetadataValue | undefined;
};

/** @internal */
export const HrisMetadataExtraData$inboundSchema: z.ZodType<
  HrisMetadataExtraData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisMetadataExtraData$Outbound = {};

/** @internal */
export const HrisMetadataExtraData$outboundSchema: z.ZodType<
  HrisMetadataExtraData$Outbound,
  z.ZodTypeDef,
  HrisMetadataExtraData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisMetadataExtraData$ {
  /** @deprecated use `HrisMetadataExtraData$inboundSchema` instead. */
  export const inboundSchema = HrisMetadataExtraData$inboundSchema;
  /** @deprecated use `HrisMetadataExtraData$outboundSchema` instead. */
  export const outboundSchema = HrisMetadataExtraData$outboundSchema;
  /** @deprecated use `HrisMetadataExtraData$Outbound` instead. */
  export type Outbound = HrisMetadataExtraData$Outbound;
}

export function hrisMetadataExtraDataToJSON(
  hrisMetadataExtraData: HrisMetadataExtraData,
): string {
  return JSON.stringify(
    HrisMetadataExtraData$outboundSchema.parse(hrisMetadataExtraData),
  );
}

export function hrisMetadataExtraDataFromJSON(
  jsonString: string,
): SafeParseResult<HrisMetadataExtraData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisMetadataExtraData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisMetadataExtraData' from JSON`,
  );
}

/** @internal */
export const HrisMetadataValue$inboundSchema: z.ZodType<
  HrisMetadataValue,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HrisMetadataValue$Outbound = {};

/** @internal */
export const HrisMetadataValue$outboundSchema: z.ZodType<
  HrisMetadataValue$Outbound,
  z.ZodTypeDef,
  HrisMetadataValue
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisMetadataValue$ {
  /** @deprecated use `HrisMetadataValue$inboundSchema` instead. */
  export const inboundSchema = HrisMetadataValue$inboundSchema;
  /** @deprecated use `HrisMetadataValue$outboundSchema` instead. */
  export const outboundSchema = HrisMetadataValue$outboundSchema;
  /** @deprecated use `HrisMetadataValue$Outbound` instead. */
  export type Outbound = HrisMetadataValue$Outbound;
}

export function hrisMetadataValueToJSON(
  hrisMetadataValue: HrisMetadataValue,
): string {
  return JSON.stringify(
    HrisMetadataValue$outboundSchema.parse(hrisMetadataValue),
  );
}

export function hrisMetadataValueFromJSON(
  jsonString: string,
): SafeParseResult<HrisMetadataValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisMetadataValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisMetadataValue' from JSON`,
  );
}

/** @internal */
export const HrisMetadata$inboundSchema: z.ZodType<
  HrisMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  extra_data: z.lazy(() => HrisMetadataExtraData$inboundSchema).optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.lazy(() => HrisMetadataValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "extra_data": "extraData",
  });
});

/** @internal */
export type HrisMetadata$Outbound = {
  extra_data?: HrisMetadataExtraData$Outbound | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?: HrisMetadataValue$Outbound | undefined;
};

/** @internal */
export const HrisMetadata$outboundSchema: z.ZodType<
  HrisMetadata$Outbound,
  z.ZodTypeDef,
  HrisMetadata
> = z.object({
  extraData: z.lazy(() => HrisMetadataExtraData$outboundSchema).optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.lazy(() => HrisMetadataValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    extraData: "extra_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisMetadata$ {
  /** @deprecated use `HrisMetadata$inboundSchema` instead. */
  export const inboundSchema = HrisMetadata$inboundSchema;
  /** @deprecated use `HrisMetadata$outboundSchema` instead. */
  export const outboundSchema = HrisMetadata$outboundSchema;
  /** @deprecated use `HrisMetadata$Outbound` instead. */
  export type Outbound = HrisMetadata$Outbound;
}

export function hrisMetadataToJSON(hrisMetadata: HrisMetadata): string {
  return JSON.stringify(HrisMetadata$outboundSchema.parse(hrisMetadata));
}

export function hrisMetadataFromJSON(
  jsonString: string,
): SafeParseResult<HrisMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisMetadata' from JSON`,
  );
}
