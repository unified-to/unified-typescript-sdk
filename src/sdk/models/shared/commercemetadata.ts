/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CommerceMetadataExtraData = {};

export type CommerceMetadataValue = {};

export type CommerceMetadata = {
  extraData?: CommerceMetadataExtraData | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?: CommerceMetadataValue | undefined;
};

/** @internal */
export const CommerceMetadataExtraData$inboundSchema: z.ZodType<
  CommerceMetadataExtraData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CommerceMetadataExtraData$Outbound = {};

/** @internal */
export const CommerceMetadataExtraData$outboundSchema: z.ZodType<
  CommerceMetadataExtraData$Outbound,
  z.ZodTypeDef,
  CommerceMetadataExtraData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceMetadataExtraData$ {
  /** @deprecated use `CommerceMetadataExtraData$inboundSchema` instead. */
  export const inboundSchema = CommerceMetadataExtraData$inboundSchema;
  /** @deprecated use `CommerceMetadataExtraData$outboundSchema` instead. */
  export const outboundSchema = CommerceMetadataExtraData$outboundSchema;
  /** @deprecated use `CommerceMetadataExtraData$Outbound` instead. */
  export type Outbound = CommerceMetadataExtraData$Outbound;
}

export function commerceMetadataExtraDataToJSON(
  commerceMetadataExtraData: CommerceMetadataExtraData,
): string {
  return JSON.stringify(
    CommerceMetadataExtraData$outboundSchema.parse(commerceMetadataExtraData),
  );
}

export function commerceMetadataExtraDataFromJSON(
  jsonString: string,
): SafeParseResult<CommerceMetadataExtraData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceMetadataExtraData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceMetadataExtraData' from JSON`,
  );
}

/** @internal */
export const CommerceMetadataValue$inboundSchema: z.ZodType<
  CommerceMetadataValue,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CommerceMetadataValue$Outbound = {};

/** @internal */
export const CommerceMetadataValue$outboundSchema: z.ZodType<
  CommerceMetadataValue$Outbound,
  z.ZodTypeDef,
  CommerceMetadataValue
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceMetadataValue$ {
  /** @deprecated use `CommerceMetadataValue$inboundSchema` instead. */
  export const inboundSchema = CommerceMetadataValue$inboundSchema;
  /** @deprecated use `CommerceMetadataValue$outboundSchema` instead. */
  export const outboundSchema = CommerceMetadataValue$outboundSchema;
  /** @deprecated use `CommerceMetadataValue$Outbound` instead. */
  export type Outbound = CommerceMetadataValue$Outbound;
}

export function commerceMetadataValueToJSON(
  commerceMetadataValue: CommerceMetadataValue,
): string {
  return JSON.stringify(
    CommerceMetadataValue$outboundSchema.parse(commerceMetadataValue),
  );
}

export function commerceMetadataValueFromJSON(
  jsonString: string,
): SafeParseResult<CommerceMetadataValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceMetadataValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceMetadataValue' from JSON`,
  );
}

/** @internal */
export const CommerceMetadata$inboundSchema: z.ZodType<
  CommerceMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  extra_data: z.lazy(() => CommerceMetadataExtraData$inboundSchema).optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.lazy(() => CommerceMetadataValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "extra_data": "extraData",
  });
});

/** @internal */
export type CommerceMetadata$Outbound = {
  extra_data?: CommerceMetadataExtraData$Outbound | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?: CommerceMetadataValue$Outbound | undefined;
};

/** @internal */
export const CommerceMetadata$outboundSchema: z.ZodType<
  CommerceMetadata$Outbound,
  z.ZodTypeDef,
  CommerceMetadata
> = z.object({
  extraData: z.lazy(() => CommerceMetadataExtraData$outboundSchema).optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.lazy(() => CommerceMetadataValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    extraData: "extra_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceMetadata$ {
  /** @deprecated use `CommerceMetadata$inboundSchema` instead. */
  export const inboundSchema = CommerceMetadata$inboundSchema;
  /** @deprecated use `CommerceMetadata$outboundSchema` instead. */
  export const outboundSchema = CommerceMetadata$outboundSchema;
  /** @deprecated use `CommerceMetadata$Outbound` instead. */
  export type Outbound = CommerceMetadata$Outbound;
}

export function commerceMetadataToJSON(
  commerceMetadata: CommerceMetadata,
): string {
  return JSON.stringify(
    CommerceMetadata$outboundSchema.parse(commerceMetadata),
  );
}

export function commerceMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CommerceMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceMetadata' from JSON`,
  );
}
