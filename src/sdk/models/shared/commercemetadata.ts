/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CommerceMetadata1 = {};

export type CommerceMetadata5 = CommerceMetadata1 | string | number | boolean;

export type CommerceMetadataExtraData =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<CommerceMetadata1 | string | number | boolean>;

export const CommerceMetadataFormat = {
  Text: "TEXT",
  Number: "NUMBER",
  Date: "DATE",
  Boolean: "BOOLEAN",
  File: "FILE",
  Textarea: "TEXTAREA",
  SingleSelect: "SINGLE_SELECT",
  MultipleSelect: "MULTIPLE_SELECT",
  Measurement: "MEASUREMENT",
  Price: "PRICE",
  YesNo: "YES_NO",
  Currency: "CURRENCY",
  Url: "URL",
} as const;
export type CommerceMetadataFormat = OpenEnum<typeof CommerceMetadataFormat>;

export type CommerceMetadataSchemas1 = {};

export type CommerceMetadataSchemas5 =
  | CommerceMetadataSchemas1
  | string
  | number
  | boolean;

export type CommerceMetadataValue =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<CommerceMetadataSchemas1 | string | number | boolean>;

export type CommerceMetadata = {
  extraData?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<CommerceMetadata1 | string | number | boolean>
    | undefined;
  format?: CommerceMetadataFormat | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<CommerceMetadataSchemas1 | string | number | boolean>
    | undefined;
};

/** @internal */
export const CommerceMetadata1$inboundSchema: z.ZodType<
  CommerceMetadata1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CommerceMetadata1$Outbound = {};

/** @internal */
export const CommerceMetadata1$outboundSchema: z.ZodType<
  CommerceMetadata1$Outbound,
  z.ZodTypeDef,
  CommerceMetadata1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceMetadata1$ {
  /** @deprecated use `CommerceMetadata1$inboundSchema` instead. */
  export const inboundSchema = CommerceMetadata1$inboundSchema;
  /** @deprecated use `CommerceMetadata1$outboundSchema` instead. */
  export const outboundSchema = CommerceMetadata1$outboundSchema;
  /** @deprecated use `CommerceMetadata1$Outbound` instead. */
  export type Outbound = CommerceMetadata1$Outbound;
}

export function commerceMetadata1ToJSON(
  commerceMetadata1: CommerceMetadata1,
): string {
  return JSON.stringify(
    CommerceMetadata1$outboundSchema.parse(commerceMetadata1),
  );
}

export function commerceMetadata1FromJSON(
  jsonString: string,
): SafeParseResult<CommerceMetadata1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceMetadata1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceMetadata1' from JSON`,
  );
}

/** @internal */
export const CommerceMetadata5$inboundSchema: z.ZodType<
  CommerceMetadata5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CommerceMetadata1$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/** @internal */
export type CommerceMetadata5$Outbound =
  | CommerceMetadata1$Outbound
  | string
  | number
  | boolean;

/** @internal */
export const CommerceMetadata5$outboundSchema: z.ZodType<
  CommerceMetadata5$Outbound,
  z.ZodTypeDef,
  CommerceMetadata5
> = z.union([
  z.lazy(() => CommerceMetadata1$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceMetadata5$ {
  /** @deprecated use `CommerceMetadata5$inboundSchema` instead. */
  export const inboundSchema = CommerceMetadata5$inboundSchema;
  /** @deprecated use `CommerceMetadata5$outboundSchema` instead. */
  export const outboundSchema = CommerceMetadata5$outboundSchema;
  /** @deprecated use `CommerceMetadata5$Outbound` instead. */
  export type Outbound = CommerceMetadata5$Outbound;
}

export function commerceMetadata5ToJSON(
  commerceMetadata5: CommerceMetadata5,
): string {
  return JSON.stringify(
    CommerceMetadata5$outboundSchema.parse(commerceMetadata5),
  );
}

export function commerceMetadata5FromJSON(
  jsonString: string,
): SafeParseResult<CommerceMetadata5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceMetadata5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceMetadata5' from JSON`,
  );
}

/** @internal */
export const CommerceMetadataExtraData$inboundSchema: z.ZodType<
  CommerceMetadataExtraData,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => CommerceMetadata1$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/** @internal */
export type CommerceMetadataExtraData$Outbound =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<CommerceMetadata1$Outbound | string | number | boolean>;

/** @internal */
export const CommerceMetadataExtraData$outboundSchema: z.ZodType<
  CommerceMetadataExtraData$Outbound,
  z.ZodTypeDef,
  CommerceMetadataExtraData
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => CommerceMetadata1$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceMetadataExtraData$ {
  /** @deprecated use `CommerceMetadataExtraData$inboundSchema` instead. */
  export const inboundSchema = CommerceMetadataExtraData$inboundSchema;
  /** @deprecated use `CommerceMetadataExtraData$outboundSchema` instead. */
  export const outboundSchema = CommerceMetadataExtraData$outboundSchema;
  /** @deprecated use `CommerceMetadataExtraData$Outbound` instead. */
  export type Outbound = CommerceMetadataExtraData$Outbound;
}

export function commerceMetadataExtraDataToJSON(
  commerceMetadataExtraData: CommerceMetadataExtraData,
): string {
  return JSON.stringify(
    CommerceMetadataExtraData$outboundSchema.parse(commerceMetadataExtraData),
  );
}

export function commerceMetadataExtraDataFromJSON(
  jsonString: string,
): SafeParseResult<CommerceMetadataExtraData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceMetadataExtraData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceMetadataExtraData' from JSON`,
  );
}

/** @internal */
export const CommerceMetadataFormat$inboundSchema: z.ZodType<
  CommerceMetadataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CommerceMetadataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CommerceMetadataFormat$outboundSchema: z.ZodType<
  CommerceMetadataFormat,
  z.ZodTypeDef,
  CommerceMetadataFormat
> = z.union([
  z.nativeEnum(CommerceMetadataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceMetadataFormat$ {
  /** @deprecated use `CommerceMetadataFormat$inboundSchema` instead. */
  export const inboundSchema = CommerceMetadataFormat$inboundSchema;
  /** @deprecated use `CommerceMetadataFormat$outboundSchema` instead. */
  export const outboundSchema = CommerceMetadataFormat$outboundSchema;
}

/** @internal */
export const CommerceMetadataSchemas1$inboundSchema: z.ZodType<
  CommerceMetadataSchemas1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CommerceMetadataSchemas1$Outbound = {};

/** @internal */
export const CommerceMetadataSchemas1$outboundSchema: z.ZodType<
  CommerceMetadataSchemas1$Outbound,
  z.ZodTypeDef,
  CommerceMetadataSchemas1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceMetadataSchemas1$ {
  /** @deprecated use `CommerceMetadataSchemas1$inboundSchema` instead. */
  export const inboundSchema = CommerceMetadataSchemas1$inboundSchema;
  /** @deprecated use `CommerceMetadataSchemas1$outboundSchema` instead. */
  export const outboundSchema = CommerceMetadataSchemas1$outboundSchema;
  /** @deprecated use `CommerceMetadataSchemas1$Outbound` instead. */
  export type Outbound = CommerceMetadataSchemas1$Outbound;
}

export function commerceMetadataSchemas1ToJSON(
  commerceMetadataSchemas1: CommerceMetadataSchemas1,
): string {
  return JSON.stringify(
    CommerceMetadataSchemas1$outboundSchema.parse(commerceMetadataSchemas1),
  );
}

export function commerceMetadataSchemas1FromJSON(
  jsonString: string,
): SafeParseResult<CommerceMetadataSchemas1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceMetadataSchemas1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceMetadataSchemas1' from JSON`,
  );
}

/** @internal */
export const CommerceMetadataSchemas5$inboundSchema: z.ZodType<
  CommerceMetadataSchemas5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CommerceMetadataSchemas1$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/** @internal */
export type CommerceMetadataSchemas5$Outbound =
  | CommerceMetadataSchemas1$Outbound
  | string
  | number
  | boolean;

/** @internal */
export const CommerceMetadataSchemas5$outboundSchema: z.ZodType<
  CommerceMetadataSchemas5$Outbound,
  z.ZodTypeDef,
  CommerceMetadataSchemas5
> = z.union([
  z.lazy(() => CommerceMetadataSchemas1$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceMetadataSchemas5$ {
  /** @deprecated use `CommerceMetadataSchemas5$inboundSchema` instead. */
  export const inboundSchema = CommerceMetadataSchemas5$inboundSchema;
  /** @deprecated use `CommerceMetadataSchemas5$outboundSchema` instead. */
  export const outboundSchema = CommerceMetadataSchemas5$outboundSchema;
  /** @deprecated use `CommerceMetadataSchemas5$Outbound` instead. */
  export type Outbound = CommerceMetadataSchemas5$Outbound;
}

export function commerceMetadataSchemas5ToJSON(
  commerceMetadataSchemas5: CommerceMetadataSchemas5,
): string {
  return JSON.stringify(
    CommerceMetadataSchemas5$outboundSchema.parse(commerceMetadataSchemas5),
  );
}

export function commerceMetadataSchemas5FromJSON(
  jsonString: string,
): SafeParseResult<CommerceMetadataSchemas5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceMetadataSchemas5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceMetadataSchemas5' from JSON`,
  );
}

/** @internal */
export const CommerceMetadataValue$inboundSchema: z.ZodType<
  CommerceMetadataValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => CommerceMetadataSchemas1$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/** @internal */
export type CommerceMetadataValue$Outbound =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<CommerceMetadataSchemas1$Outbound | string | number | boolean>;

/** @internal */
export const CommerceMetadataValue$outboundSchema: z.ZodType<
  CommerceMetadataValue$Outbound,
  z.ZodTypeDef,
  CommerceMetadataValue
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => CommerceMetadataSchemas1$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceMetadataValue$ {
  /** @deprecated use `CommerceMetadataValue$inboundSchema` instead. */
  export const inboundSchema = CommerceMetadataValue$inboundSchema;
  /** @deprecated use `CommerceMetadataValue$outboundSchema` instead. */
  export const outboundSchema = CommerceMetadataValue$outboundSchema;
  /** @deprecated use `CommerceMetadataValue$Outbound` instead. */
  export type Outbound = CommerceMetadataValue$Outbound;
}

export function commerceMetadataValueToJSON(
  commerceMetadataValue: CommerceMetadataValue,
): string {
  return JSON.stringify(
    CommerceMetadataValue$outboundSchema.parse(commerceMetadataValue),
  );
}

export function commerceMetadataValueFromJSON(
  jsonString: string,
): SafeParseResult<CommerceMetadataValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceMetadataValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceMetadataValue' from JSON`,
  );
}

/** @internal */
export const CommerceMetadata$inboundSchema: z.ZodType<
  CommerceMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  extra_data: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => CommerceMetadata1$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
  format: CommerceMetadataFormat$inboundSchema.optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => CommerceMetadataSchemas1$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "extra_data": "extraData",
  });
});

/** @internal */
export type CommerceMetadata$Outbound = {
  extra_data?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<CommerceMetadata1$Outbound | string | number | boolean>
    | undefined;
  format?: string | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<CommerceMetadataSchemas1$Outbound | string | number | boolean>
    | undefined;
};

/** @internal */
export const CommerceMetadata$outboundSchema: z.ZodType<
  CommerceMetadata$Outbound,
  z.ZodTypeDef,
  CommerceMetadata
> = z.object({
  extraData: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => CommerceMetadata1$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
  format: CommerceMetadataFormat$outboundSchema.optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => CommerceMetadataSchemas1$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    extraData: "extra_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceMetadata$ {
  /** @deprecated use `CommerceMetadata$inboundSchema` instead. */
  export const inboundSchema = CommerceMetadata$inboundSchema;
  /** @deprecated use `CommerceMetadata$outboundSchema` instead. */
  export const outboundSchema = CommerceMetadata$outboundSchema;
  /** @deprecated use `CommerceMetadata$Outbound` instead. */
  export type Outbound = CommerceMetadata$Outbound;
}

export function commerceMetadataToJSON(
  commerceMetadata: CommerceMetadata,
): string {
  return JSON.stringify(
    CommerceMetadata$outboundSchema.parse(commerceMetadata),
  );
}

export function commerceMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CommerceMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceMetadata' from JSON`,
  );
}
