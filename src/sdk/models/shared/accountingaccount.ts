/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Status = {
    Active: "ACTIVE",
    Archived: "ARCHIVED",
} as const;
export type Status = ClosedEnum<typeof Status>;

export const Type = {
    AccountsPayable: "ACCOUNTS_PAYABLE",
    AccountsReceivable: "ACCOUNTS_RECEIVABLE",
    Bank: "BANK",
    CreditCard: "CREDIT_CARD",
    FixedAsset: "FIXED_ASSET",
    Liability: "LIABILITY",
    Equity: "EQUITY",
    Expense: "EXPENSE",
    Revenue: "REVENUE",
    Other: "OTHER",
} as const;
export type Type = ClosedEnum<typeof Type>;

/**
 * Chart of accounts
 */
export type AccountingAccount = {
    balance?: number | undefined;
    createdAt?: Date | undefined;
    currency?: string | undefined;
    customerDefinedCode?: string | undefined;
    description?: string | undefined;
    group?: string | undefined;
    id?: string | undefined;
    isPayable?: boolean | undefined;
    name?: string | undefined;
    parentAccountId?: string | undefined;
    /**
     * The original data from the integration's API
     */
    raw?: { [k: string]: any } | undefined;
    section?: string | undefined;
    status?: Status | undefined;
    subgroup?: string | undefined;
    subsection?: string | undefined;
    type?: Type | undefined;
    updatedAt?: Date | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z.nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> = Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
    /** @deprecated use `Status$inboundSchema` instead. */
    export const inboundSchema = Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> = Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    export const inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const AccountingAccount$inboundSchema: z.ZodType<AccountingAccount, z.ZodTypeDef, unknown> =
    z
        .object({
            balance: z.number().optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            currency: z.string().optional(),
            customer_defined_code: z.string().optional(),
            description: z.string().optional(),
            group: z.string().optional(),
            id: z.string().optional(),
            is_payable: z.boolean().optional(),
            name: z.string().optional(),
            parent_account_id: z.string().optional(),
            raw: z.record(z.any()).optional(),
            section: z.string().optional(),
            status: Status$inboundSchema.optional(),
            subgroup: z.string().optional(),
            subsection: z.string().optional(),
            type: Type$inboundSchema.optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
                customer_defined_code: "customerDefinedCode",
                is_payable: "isPayable",
                parent_account_id: "parentAccountId",
                updated_at: "updatedAt",
            });
        });

/** @internal */
export type AccountingAccount$Outbound = {
    balance?: number | undefined;
    created_at?: string | undefined;
    currency?: string | undefined;
    customer_defined_code?: string | undefined;
    description?: string | undefined;
    group?: string | undefined;
    id?: string | undefined;
    is_payable?: boolean | undefined;
    name?: string | undefined;
    parent_account_id?: string | undefined;
    raw?: { [k: string]: any } | undefined;
    section?: string | undefined;
    status?: string | undefined;
    subgroup?: string | undefined;
    subsection?: string | undefined;
    type?: string | undefined;
    updated_at?: string | undefined;
};

/** @internal */
export const AccountingAccount$outboundSchema: z.ZodType<
    AccountingAccount$Outbound,
    z.ZodTypeDef,
    AccountingAccount
> = z
    .object({
        balance: z.number().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        currency: z.string().optional(),
        customerDefinedCode: z.string().optional(),
        description: z.string().optional(),
        group: z.string().optional(),
        id: z.string().optional(),
        isPayable: z.boolean().optional(),
        name: z.string().optional(),
        parentAccountId: z.string().optional(),
        raw: z.record(z.any()).optional(),
        section: z.string().optional(),
        status: Status$outboundSchema.optional(),
        subgroup: z.string().optional(),
        subsection: z.string().optional(),
        type: Type$outboundSchema.optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            customerDefinedCode: "customer_defined_code",
            isPayable: "is_payable",
            parentAccountId: "parent_account_id",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAccount$ {
    /** @deprecated use `AccountingAccount$inboundSchema` instead. */
    export const inboundSchema = AccountingAccount$inboundSchema;
    /** @deprecated use `AccountingAccount$outboundSchema` instead. */
    export const outboundSchema = AccountingAccount$outboundSchema;
    /** @deprecated use `AccountingAccount$Outbound` instead. */
    export type Outbound = AccountingAccount$Outbound;
}
