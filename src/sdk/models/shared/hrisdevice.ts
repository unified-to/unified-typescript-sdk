/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisDevice = {
  adminUserIds?: Array<string> | undefined;
  assetTag?: string | undefined;
  createdAt?: Date | undefined;
  hasAntivirus?: boolean | undefined;
  hasFirewall?: boolean | undefined;
  hasHdEncrypted?: boolean | undefined;
  hasPasswordManager?: boolean | undefined;
  hasScreenlock?: boolean | undefined;
  id?: string | undefined;
  isMissing?: boolean | undefined;
  locationId?: string | undefined;
  manufacturer?: string | undefined;
  model?: string | undefined;
  name: string;
  os?: string | undefined;
  osVersion?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  updatedAt?: Date | undefined;
  /**
   * users who have this device
   */
  userIds?: Array<string> | undefined;
  version?: string | undefined;
};

/** @internal */
export const HrisDevice$inboundSchema: z.ZodType<
  HrisDevice,
  z.ZodTypeDef,
  unknown
> = z.object({
  admin_user_ids: z.array(z.string()).optional(),
  asset_tag: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  has_antivirus: z.boolean().optional(),
  has_firewall: z.boolean().optional(),
  has_hd_encrypted: z.boolean().optional(),
  has_password_manager: z.boolean().optional(),
  has_screenlock: z.boolean().optional(),
  id: z.string().optional(),
  is_missing: z.boolean().optional(),
  location_id: z.string().optional(),
  manufacturer: z.string().optional(),
  model: z.string().optional(),
  name: z.string(),
  os: z.string().optional(),
  os_version: z.string().optional(),
  raw: z.record(z.any()).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_ids: z.array(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "admin_user_ids": "adminUserIds",
    "asset_tag": "assetTag",
    "created_at": "createdAt",
    "has_antivirus": "hasAntivirus",
    "has_firewall": "hasFirewall",
    "has_hd_encrypted": "hasHdEncrypted",
    "has_password_manager": "hasPasswordManager",
    "has_screenlock": "hasScreenlock",
    "is_missing": "isMissing",
    "location_id": "locationId",
    "os_version": "osVersion",
    "updated_at": "updatedAt",
    "user_ids": "userIds",
  });
});

/** @internal */
export type HrisDevice$Outbound = {
  admin_user_ids?: Array<string> | undefined;
  asset_tag?: string | undefined;
  created_at?: string | undefined;
  has_antivirus?: boolean | undefined;
  has_firewall?: boolean | undefined;
  has_hd_encrypted?: boolean | undefined;
  has_password_manager?: boolean | undefined;
  has_screenlock?: boolean | undefined;
  id?: string | undefined;
  is_missing?: boolean | undefined;
  location_id?: string | undefined;
  manufacturer?: string | undefined;
  model?: string | undefined;
  name: string;
  os?: string | undefined;
  os_version?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  updated_at?: string | undefined;
  user_ids?: Array<string> | undefined;
  version?: string | undefined;
};

/** @internal */
export const HrisDevice$outboundSchema: z.ZodType<
  HrisDevice$Outbound,
  z.ZodTypeDef,
  HrisDevice
> = z.object({
  adminUserIds: z.array(z.string()).optional(),
  assetTag: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  hasAntivirus: z.boolean().optional(),
  hasFirewall: z.boolean().optional(),
  hasHdEncrypted: z.boolean().optional(),
  hasPasswordManager: z.boolean().optional(),
  hasScreenlock: z.boolean().optional(),
  id: z.string().optional(),
  isMissing: z.boolean().optional(),
  locationId: z.string().optional(),
  manufacturer: z.string().optional(),
  model: z.string().optional(),
  name: z.string(),
  os: z.string().optional(),
  osVersion: z.string().optional(),
  raw: z.record(z.any()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userIds: z.array(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    adminUserIds: "admin_user_ids",
    assetTag: "asset_tag",
    createdAt: "created_at",
    hasAntivirus: "has_antivirus",
    hasFirewall: "has_firewall",
    hasHdEncrypted: "has_hd_encrypted",
    hasPasswordManager: "has_password_manager",
    hasScreenlock: "has_screenlock",
    isMissing: "is_missing",
    locationId: "location_id",
    osVersion: "os_version",
    updatedAt: "updated_at",
    userIds: "user_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisDevice$ {
  /** @deprecated use `HrisDevice$inboundSchema` instead. */
  export const inboundSchema = HrisDevice$inboundSchema;
  /** @deprecated use `HrisDevice$outboundSchema` instead. */
  export const outboundSchema = HrisDevice$outboundSchema;
  /** @deprecated use `HrisDevice$Outbound` instead. */
  export type Outbound = HrisDevice$Outbound;
}

export function hrisDeviceToJSON(hrisDevice: HrisDevice): string {
  return JSON.stringify(HrisDevice$outboundSchema.parse(hrisDevice));
}

export function hrisDeviceFromJSON(
  jsonString: string,
): SafeParseResult<HrisDevice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisDevice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisDevice' from JSON`,
  );
}
