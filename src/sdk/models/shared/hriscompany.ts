/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import {
    PropertyHrisCompanyAddress,
    PropertyHrisCompanyAddress$inboundSchema,
    PropertyHrisCompanyAddress$Outbound,
    PropertyHrisCompanyAddress$outboundSchema,
} from "./propertyhriscompanyaddress.js";
import * as z from "zod";

export type HrisCompany = {
    address?: PropertyHrisCompanyAddress | undefined;
    createdAt?: Date | undefined;
    id?: string | undefined;
    legalName?: string | undefined;
    name?: string | undefined;
    raw?: { [k: string]: any } | undefined;
    updatedAt?: Date | undefined;
};

/** @internal */
export const HrisCompany$inboundSchema: z.ZodType<HrisCompany, z.ZodTypeDef, unknown> = z
    .object({
        address: PropertyHrisCompanyAddress$inboundSchema.optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        id: z.string().optional(),
        legal_name: z.string().optional(),
        name: z.string().optional(),
        raw: z.record(z.any()).optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            legal_name: "legalName",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type HrisCompany$Outbound = {
    address?: PropertyHrisCompanyAddress$Outbound | undefined;
    created_at?: string | undefined;
    id?: string | undefined;
    legal_name?: string | undefined;
    name?: string | undefined;
    raw?: { [k: string]: any } | undefined;
    updated_at?: string | undefined;
};

/** @internal */
export const HrisCompany$outboundSchema: z.ZodType<
    HrisCompany$Outbound,
    z.ZodTypeDef,
    HrisCompany
> = z
    .object({
        address: PropertyHrisCompanyAddress$outboundSchema.optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        id: z.string().optional(),
        legalName: z.string().optional(),
        name: z.string().optional(),
        raw: z.record(z.any()).optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            legalName: "legal_name",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompany$ {
    /** @deprecated use `HrisCompany$inboundSchema` instead. */
    export const inboundSchema = HrisCompany$inboundSchema;
    /** @deprecated use `HrisCompany$outboundSchema` instead. */
    export const outboundSchema = HrisCompany$outboundSchema;
    /** @deprecated use `HrisCompany$Outbound` instead. */
    export type Outbound = HrisCompany$Outbound;
}
