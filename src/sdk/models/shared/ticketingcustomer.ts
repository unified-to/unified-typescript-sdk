/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import {
    TicketingEmail,
    TicketingEmail$inboundSchema,
    TicketingEmail$Outbound,
    TicketingEmail$outboundSchema,
} from "./ticketingemail.js";
import {
    TicketingTelephone,
    TicketingTelephone$inboundSchema,
    TicketingTelephone$Outbound,
    TicketingTelephone$outboundSchema,
} from "./ticketingtelephone.js";
import * as z from "zod";

export type TicketingCustomer = {
    createdAt?: Date | undefined;
    emails?: Array<TicketingEmail> | undefined;
    id?: string | undefined;
    name?: string | undefined;
    raw?: { [k: string]: any } | undefined;
    tags?: Array<string> | undefined;
    telephones?: Array<TicketingTelephone> | undefined;
    updatedAt?: Date | undefined;
};

/** @internal */
export const TicketingCustomer$inboundSchema: z.ZodType<TicketingCustomer, z.ZodTypeDef, unknown> =
    z
        .object({
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            emails: z.array(TicketingEmail$inboundSchema).optional(),
            id: z.string().optional(),
            name: z.string().optional(),
            raw: z.record(z.any()).optional(),
            tags: z.array(z.string()).optional(),
            telephones: z.array(TicketingTelephone$inboundSchema).optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
                updated_at: "updatedAt",
            });
        });

/** @internal */
export type TicketingCustomer$Outbound = {
    created_at?: string | undefined;
    emails?: Array<TicketingEmail$Outbound> | undefined;
    id?: string | undefined;
    name?: string | undefined;
    raw?: { [k: string]: any } | undefined;
    tags?: Array<string> | undefined;
    telephones?: Array<TicketingTelephone$Outbound> | undefined;
    updated_at?: string | undefined;
};

/** @internal */
export const TicketingCustomer$outboundSchema: z.ZodType<
    TicketingCustomer$Outbound,
    z.ZodTypeDef,
    TicketingCustomer
> = z
    .object({
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        emails: z.array(TicketingEmail$outboundSchema).optional(),
        id: z.string().optional(),
        name: z.string().optional(),
        raw: z.record(z.any()).optional(),
        tags: z.array(z.string()).optional(),
        telephones: z.array(TicketingTelephone$outboundSchema).optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingCustomer$ {
    /** @deprecated use `TicketingCustomer$inboundSchema` instead. */
    export const inboundSchema = TicketingCustomer$inboundSchema;
    /** @deprecated use `TicketingCustomer$outboundSchema` instead. */
    export const outboundSchema = TicketingCustomer$outboundSchema;
    /** @deprecated use `TicketingCustomer$Outbound` instead. */
    export type Outbound = TicketingCustomer$Outbound;
}
