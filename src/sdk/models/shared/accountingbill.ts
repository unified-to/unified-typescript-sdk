/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingAttachment,
  AccountingAttachment$inboundSchema,
  AccountingAttachment$Outbound,
  AccountingAttachment$outboundSchema,
} from "./accountingattachment.js";
import {
  AccountingLineitem,
  AccountingLineitem$inboundSchema,
  AccountingLineitem$Outbound,
  AccountingLineitem$outboundSchema,
} from "./accountinglineitem.js";

export const PaymentCollectionMethod = {
  SendInvoice: "send_invoice",
  ChargeAutomatically: "charge_automatically",
} as const;
export type PaymentCollectionMethod = OpenEnum<typeof PaymentCollectionMethod>;

export const AccountingBillStatus = {
  Draft: "DRAFT",
  Voided: "VOIDED",
  Authorized: "AUTHORIZED",
  Paid: "PAID",
  PartiallyPaid: "PARTIALLY_PAID",
  PartiallyRefunded: "PARTIALLY_REFUNDED",
  Refunded: "REFUNDED",
} as const;
export type AccountingBillStatus = OpenEnum<typeof AccountingBillStatus>;

export type AccountingBill = {
  attachments?: Array<AccountingAttachment> | undefined;
  balanceAmount?: number | undefined;
  billNumber?: string | undefined;
  cancelledAt?: Date | undefined;
  contactId?: string | undefined;
  createdAt?: Date | undefined;
  currency?: string | undefined;
  discountAmount?: number | undefined;
  dueAt?: Date | undefined;
  id?: string | undefined;
  lineitems?: Array<AccountingLineitem> | undefined;
  notes?: string | undefined;
  paidAmount?: number | undefined;
  paidAt?: Date | undefined;
  paymentCollectionMethod?: PaymentCollectionMethod | undefined;
  postedAt?: Date | undefined;
  raw?: { [k: string]: any } | undefined;
  refundAmount?: number | undefined;
  refundReason?: string | undefined;
  refundedAt?: Date | undefined;
  send?: boolean | undefined;
  status?: AccountingBillStatus | undefined;
  taxAmount?: number | undefined;
  totalAmount?: number | undefined;
  updatedAt?: Date | undefined;
  url?: string | undefined;
};

/** @internal */
export const PaymentCollectionMethod$inboundSchema: z.ZodType<
  PaymentCollectionMethod,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PaymentCollectionMethod),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PaymentCollectionMethod$outboundSchema: z.ZodType<
  PaymentCollectionMethod,
  z.ZodTypeDef,
  PaymentCollectionMethod
> = z.union([
  z.nativeEnum(PaymentCollectionMethod),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentCollectionMethod$ {
  /** @deprecated use `PaymentCollectionMethod$inboundSchema` instead. */
  export const inboundSchema = PaymentCollectionMethod$inboundSchema;
  /** @deprecated use `PaymentCollectionMethod$outboundSchema` instead. */
  export const outboundSchema = PaymentCollectionMethod$outboundSchema;
}

/** @internal */
export const AccountingBillStatus$inboundSchema: z.ZodType<
  AccountingBillStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AccountingBillStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AccountingBillStatus$outboundSchema: z.ZodType<
  AccountingBillStatus,
  z.ZodTypeDef,
  AccountingBillStatus
> = z.union([
  z.nativeEnum(AccountingBillStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBillStatus$ {
  /** @deprecated use `AccountingBillStatus$inboundSchema` instead. */
  export const inboundSchema = AccountingBillStatus$inboundSchema;
  /** @deprecated use `AccountingBillStatus$outboundSchema` instead. */
  export const outboundSchema = AccountingBillStatus$outboundSchema;
}

/** @internal */
export const AccountingBill$inboundSchema: z.ZodType<
  AccountingBill,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachments: z.array(AccountingAttachment$inboundSchema).optional(),
  balance_amount: z.number().optional(),
  bill_number: z.string().optional(),
  cancelled_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  contact_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  currency: z.string().optional(),
  discount_amount: z.number().optional(),
  due_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  id: z.string().optional(),
  lineitems: z.array(AccountingLineitem$inboundSchema).optional(),
  notes: z.string().optional(),
  paid_amount: z.number().optional(),
  paid_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  payment_collection_method: PaymentCollectionMethod$inboundSchema.optional(),
  posted_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  raw: z.record(z.any()).optional(),
  refund_amount: z.number().optional(),
  refund_reason: z.string().optional(),
  refunded_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  send: z.boolean().optional(),
  status: AccountingBillStatus$inboundSchema.optional(),
  tax_amount: z.number().optional(),
  total_amount: z.number().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "balance_amount": "balanceAmount",
    "bill_number": "billNumber",
    "cancelled_at": "cancelledAt",
    "contact_id": "contactId",
    "created_at": "createdAt",
    "discount_amount": "discountAmount",
    "due_at": "dueAt",
    "paid_amount": "paidAmount",
    "paid_at": "paidAt",
    "payment_collection_method": "paymentCollectionMethod",
    "posted_at": "postedAt",
    "refund_amount": "refundAmount",
    "refund_reason": "refundReason",
    "refunded_at": "refundedAt",
    "tax_amount": "taxAmount",
    "total_amount": "totalAmount",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AccountingBill$Outbound = {
  attachments?: Array<AccountingAttachment$Outbound> | undefined;
  balance_amount?: number | undefined;
  bill_number?: string | undefined;
  cancelled_at?: string | undefined;
  contact_id?: string | undefined;
  created_at?: string | undefined;
  currency?: string | undefined;
  discount_amount?: number | undefined;
  due_at?: string | undefined;
  id?: string | undefined;
  lineitems?: Array<AccountingLineitem$Outbound> | undefined;
  notes?: string | undefined;
  paid_amount?: number | undefined;
  paid_at?: string | undefined;
  payment_collection_method?: string | undefined;
  posted_at?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  refund_amount?: number | undefined;
  refund_reason?: string | undefined;
  refunded_at?: string | undefined;
  send?: boolean | undefined;
  status?: string | undefined;
  tax_amount?: number | undefined;
  total_amount?: number | undefined;
  updated_at?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const AccountingBill$outboundSchema: z.ZodType<
  AccountingBill$Outbound,
  z.ZodTypeDef,
  AccountingBill
> = z.object({
  attachments: z.array(AccountingAttachment$outboundSchema).optional(),
  balanceAmount: z.number().optional(),
  billNumber: z.string().optional(),
  cancelledAt: z.date().transform(v => v.toISOString()).optional(),
  contactId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  currency: z.string().optional(),
  discountAmount: z.number().optional(),
  dueAt: z.date().transform(v => v.toISOString()).optional(),
  id: z.string().optional(),
  lineitems: z.array(AccountingLineitem$outboundSchema).optional(),
  notes: z.string().optional(),
  paidAmount: z.number().optional(),
  paidAt: z.date().transform(v => v.toISOString()).optional(),
  paymentCollectionMethod: PaymentCollectionMethod$outboundSchema.optional(),
  postedAt: z.date().transform(v => v.toISOString()).optional(),
  raw: z.record(z.any()).optional(),
  refundAmount: z.number().optional(),
  refundReason: z.string().optional(),
  refundedAt: z.date().transform(v => v.toISOString()).optional(),
  send: z.boolean().optional(),
  status: AccountingBillStatus$outboundSchema.optional(),
  taxAmount: z.number().optional(),
  totalAmount: z.number().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    balanceAmount: "balance_amount",
    billNumber: "bill_number",
    cancelledAt: "cancelled_at",
    contactId: "contact_id",
    createdAt: "created_at",
    discountAmount: "discount_amount",
    dueAt: "due_at",
    paidAmount: "paid_amount",
    paidAt: "paid_at",
    paymentCollectionMethod: "payment_collection_method",
    postedAt: "posted_at",
    refundAmount: "refund_amount",
    refundReason: "refund_reason",
    refundedAt: "refunded_at",
    taxAmount: "tax_amount",
    totalAmount: "total_amount",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBill$ {
  /** @deprecated use `AccountingBill$inboundSchema` instead. */
  export const inboundSchema = AccountingBill$inboundSchema;
  /** @deprecated use `AccountingBill$outboundSchema` instead. */
  export const outboundSchema = AccountingBill$outboundSchema;
  /** @deprecated use `AccountingBill$Outbound` instead. */
  export type Outbound = AccountingBill$Outbound;
}

export function accountingBillToJSON(accountingBill: AccountingBill): string {
  return JSON.stringify(AccountingBill$outboundSchema.parse(accountingBill));
}

export function accountingBillFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBill, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBill$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBill' from JSON`,
  );
}
