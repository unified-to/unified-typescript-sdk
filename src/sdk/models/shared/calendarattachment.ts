/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CalendarAttachment = {
  downloadUrl?: string | undefined;
  id?: string | undefined;
  mimeType?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const CalendarAttachment$inboundSchema: z.ZodType<
  CalendarAttachment,
  z.ZodTypeDef,
  unknown
> = z.object({
  download_url: z.string().optional(),
  id: z.string().optional(),
  mime_type: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "download_url": "downloadUrl",
    "mime_type": "mimeType",
  });
});

/** @internal */
export type CalendarAttachment$Outbound = {
  download_url?: string | undefined;
  id?: string | undefined;
  mime_type?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const CalendarAttachment$outboundSchema: z.ZodType<
  CalendarAttachment$Outbound,
  z.ZodTypeDef,
  CalendarAttachment
> = z.object({
  downloadUrl: z.string().optional(),
  id: z.string().optional(),
  mimeType: z.string().optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    downloadUrl: "download_url",
    mimeType: "mime_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CalendarAttachment$ {
  /** @deprecated use `CalendarAttachment$inboundSchema` instead. */
  export const inboundSchema = CalendarAttachment$inboundSchema;
  /** @deprecated use `CalendarAttachment$outboundSchema` instead. */
  export const outboundSchema = CalendarAttachment$outboundSchema;
  /** @deprecated use `CalendarAttachment$Outbound` instead. */
  export type Outbound = CalendarAttachment$Outbound;
}

export function calendarAttachmentToJSON(
  calendarAttachment: CalendarAttachment,
): string {
  return JSON.stringify(
    CalendarAttachment$outboundSchema.parse(calendarAttachment),
  );
}

export function calendarAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<CalendarAttachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CalendarAttachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CalendarAttachment' from JSON`,
  );
}
