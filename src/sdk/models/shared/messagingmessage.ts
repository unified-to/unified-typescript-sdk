/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MessagingAttachment,
  MessagingAttachment$inboundSchema,
  MessagingAttachment$Outbound,
  MessagingAttachment$outboundSchema,
} from "./messagingattachment.js";
import {
  MessagingMember,
  MessagingMember$inboundSchema,
  MessagingMember$Outbound,
  MessagingMember$outboundSchema,
} from "./messagingmember.js";
import {
  PropertyMessagingMessageAuthorMember,
  PropertyMessagingMessageAuthorMember$inboundSchema,
  PropertyMessagingMessageAuthorMember$Outbound,
  PropertyMessagingMessageAuthorMember$outboundSchema,
} from "./propertymessagingmessageauthormember.js";

export type MessagingMessage = {
  attachments?: Array<MessagingAttachment> | undefined;
  authorMember?: PropertyMessagingMessageAuthorMember | undefined;
  channelId?: string | undefined;
  /**
   * Represents the IDs of all channels to which the message is sent. Identifies the channels where the message is posted.
   */
  channelIds?: Array<string> | undefined;
  createdAt?: Date | undefined;
  destinationMembers?: Array<MessagingMember> | undefined;
  hiddenMembers?: Array<MessagingMember> | undefined;
  id?: string | undefined;
  mentionedMembers?: Array<MessagingMember> | undefined;
  message?: string | undefined;
  messageHtml?: string | undefined;
  parentMessageId?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  reference?: string | undefined;
  rootMessageId?: string | undefined;
  subject?: string | undefined;
  updatedAt?: Date | undefined;
  webUrl?: string | undefined;
};

/** @internal */
export const MessagingMessage$inboundSchema: z.ZodType<
  MessagingMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachments: z.array(MessagingAttachment$inboundSchema).optional(),
  author_member: PropertyMessagingMessageAuthorMember$inboundSchema.optional(),
  channel_id: z.string().optional(),
  channel_ids: z.array(z.string()).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  destination_members: z.array(MessagingMember$inboundSchema).optional(),
  hidden_members: z.array(MessagingMember$inboundSchema).optional(),
  id: z.string().optional(),
  mentioned_members: z.array(MessagingMember$inboundSchema).optional(),
  message: z.string().optional(),
  message_html: z.string().optional(),
  parent_message_id: z.string().optional(),
  raw: z.record(z.any()).optional(),
  reference: z.string().optional(),
  root_message_id: z.string().optional(),
  subject: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  web_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "author_member": "authorMember",
    "channel_id": "channelId",
    "channel_ids": "channelIds",
    "created_at": "createdAt",
    "destination_members": "destinationMembers",
    "hidden_members": "hiddenMembers",
    "mentioned_members": "mentionedMembers",
    "message_html": "messageHtml",
    "parent_message_id": "parentMessageId",
    "root_message_id": "rootMessageId",
    "updated_at": "updatedAt",
    "web_url": "webUrl",
  });
});

/** @internal */
export type MessagingMessage$Outbound = {
  attachments?: Array<MessagingAttachment$Outbound> | undefined;
  author_member?: PropertyMessagingMessageAuthorMember$Outbound | undefined;
  channel_id?: string | undefined;
  channel_ids?: Array<string> | undefined;
  created_at?: string | undefined;
  destination_members?: Array<MessagingMember$Outbound> | undefined;
  hidden_members?: Array<MessagingMember$Outbound> | undefined;
  id?: string | undefined;
  mentioned_members?: Array<MessagingMember$Outbound> | undefined;
  message?: string | undefined;
  message_html?: string | undefined;
  parent_message_id?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  reference?: string | undefined;
  root_message_id?: string | undefined;
  subject?: string | undefined;
  updated_at?: string | undefined;
  web_url?: string | undefined;
};

/** @internal */
export const MessagingMessage$outboundSchema: z.ZodType<
  MessagingMessage$Outbound,
  z.ZodTypeDef,
  MessagingMessage
> = z.object({
  attachments: z.array(MessagingAttachment$outboundSchema).optional(),
  authorMember: PropertyMessagingMessageAuthorMember$outboundSchema.optional(),
  channelId: z.string().optional(),
  channelIds: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  destinationMembers: z.array(MessagingMember$outboundSchema).optional(),
  hiddenMembers: z.array(MessagingMember$outboundSchema).optional(),
  id: z.string().optional(),
  mentionedMembers: z.array(MessagingMember$outboundSchema).optional(),
  message: z.string().optional(),
  messageHtml: z.string().optional(),
  parentMessageId: z.string().optional(),
  raw: z.record(z.any()).optional(),
  reference: z.string().optional(),
  rootMessageId: z.string().optional(),
  subject: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  webUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    authorMember: "author_member",
    channelId: "channel_id",
    channelIds: "channel_ids",
    createdAt: "created_at",
    destinationMembers: "destination_members",
    hiddenMembers: "hidden_members",
    mentionedMembers: "mentioned_members",
    messageHtml: "message_html",
    parentMessageId: "parent_message_id",
    rootMessageId: "root_message_id",
    updatedAt: "updated_at",
    webUrl: "web_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingMessage$ {
  /** @deprecated use `MessagingMessage$inboundSchema` instead. */
  export const inboundSchema = MessagingMessage$inboundSchema;
  /** @deprecated use `MessagingMessage$outboundSchema` instead. */
  export const outboundSchema = MessagingMessage$outboundSchema;
  /** @deprecated use `MessagingMessage$Outbound` instead. */
  export type Outbound = MessagingMessage$Outbound;
}

export function messagingMessageToJSON(
  messagingMessage: MessagingMessage,
): string {
  return JSON.stringify(
    MessagingMessage$outboundSchema.parse(messagingMessage),
  );
}

export function messagingMessageFromJSON(
  jsonString: string,
): SafeParseResult<MessagingMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingMessage' from JSON`,
  );
}
