/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HrisPayslipDetail,
  HrisPayslipDetail$inboundSchema,
  HrisPayslipDetail$Outbound,
  HrisPayslipDetail$outboundSchema,
} from "./hrispayslipdetail.js";

export const PaymentType = {
  Direct: "DIRECT",
  Cheque: "CHEQUE",
  Cash: "CASH",
} as const;
export type PaymentType = ClosedEnum<typeof PaymentType>;

export type HrisPayslip = {
  createdAt?: Date | undefined;
  currency?: string | undefined;
  details?: Array<HrisPayslipDetail> | undefined;
  endAt?: Date | undefined;
  grossAmount?: number | undefined;
  id?: string | undefined;
  netAmount?: number | undefined;
  paidAt?: Date | undefined;
  paymentType?: PaymentType | undefined;
  raw: { [k: string]: any };
  startAt?: Date | undefined;
  updatedAt?: Date | undefined;
  userId: string;
};

/** @internal */
export const PaymentType$inboundSchema: z.ZodNativeEnum<typeof PaymentType> = z
  .nativeEnum(PaymentType);

/** @internal */
export const PaymentType$outboundSchema: z.ZodNativeEnum<typeof PaymentType> =
  PaymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentType$ {
  /** @deprecated use `PaymentType$inboundSchema` instead. */
  export const inboundSchema = PaymentType$inboundSchema;
  /** @deprecated use `PaymentType$outboundSchema` instead. */
  export const outboundSchema = PaymentType$outboundSchema;
}

/** @internal */
export const HrisPayslip$inboundSchema: z.ZodType<
  HrisPayslip,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  currency: z.string().optional(),
  details: z.array(HrisPayslipDetail$inboundSchema).optional(),
  end_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  gross_amount: z.number().optional(),
  id: z.string().optional(),
  net_amount: z.number().optional(),
  paid_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  payment_type: PaymentType$inboundSchema.optional(),
  raw: z.record(z.any()),
  start_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "end_at": "endAt",
    "gross_amount": "grossAmount",
    "net_amount": "netAmount",
    "paid_at": "paidAt",
    "payment_type": "paymentType",
    "start_at": "startAt",
    "updated_at": "updatedAt",
    "user_id": "userId",
  });
});

/** @internal */
export type HrisPayslip$Outbound = {
  created_at?: string | undefined;
  currency?: string | undefined;
  details?: Array<HrisPayslipDetail$Outbound> | undefined;
  end_at?: string | undefined;
  gross_amount?: number | undefined;
  id?: string | undefined;
  net_amount?: number | undefined;
  paid_at?: string | undefined;
  payment_type?: string | undefined;
  raw: { [k: string]: any };
  start_at?: string | undefined;
  updated_at?: string | undefined;
  user_id: string;
};

/** @internal */
export const HrisPayslip$outboundSchema: z.ZodType<
  HrisPayslip$Outbound,
  z.ZodTypeDef,
  HrisPayslip
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  currency: z.string().optional(),
  details: z.array(HrisPayslipDetail$outboundSchema).optional(),
  endAt: z.date().transform(v => v.toISOString()).optional(),
  grossAmount: z.number().optional(),
  id: z.string().optional(),
  netAmount: z.number().optional(),
  paidAt: z.date().transform(v => v.toISOString()).optional(),
  paymentType: PaymentType$outboundSchema.optional(),
  raw: z.record(z.any()),
  startAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    endAt: "end_at",
    grossAmount: "gross_amount",
    netAmount: "net_amount",
    paidAt: "paid_at",
    paymentType: "payment_type",
    startAt: "start_at",
    updatedAt: "updated_at",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisPayslip$ {
  /** @deprecated use `HrisPayslip$inboundSchema` instead. */
  export const inboundSchema = HrisPayslip$inboundSchema;
  /** @deprecated use `HrisPayslip$outboundSchema` instead. */
  export const outboundSchema = HrisPayslip$outboundSchema;
  /** @deprecated use `HrisPayslip$Outbound` instead. */
  export type Outbound = HrisPayslip$Outbound;
}

export function hrisPayslipToJSON(hrisPayslip: HrisPayslip): string {
  return JSON.stringify(HrisPayslip$outboundSchema.parse(hrisPayslip));
}

export function hrisPayslipFromJSON(
  jsonString: string,
): SafeParseResult<HrisPayslip, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisPayslip$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisPayslip' from JSON`,
  );
}
