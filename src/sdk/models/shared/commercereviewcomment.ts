/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CommerceMetadata,
  CommerceMetadata$inboundSchema,
  CommerceMetadata$Outbound,
  CommerceMetadata$outboundSchema,
} from "./commercemetadata.js";

export const CommerceReviewCommentStatus = {
  Pending: "PENDING",
  Approved: "APPROVED",
  Rejected: "REJECTED",
  Spam: "SPAM",
} as const;
export type CommerceReviewCommentStatus = OpenEnum<
  typeof CommerceReviewCommentStatus
>;

export type CommerceReviewComment = {
  authorAvatarUrl?: string | undefined;
  authorEmail?: string | undefined;
  authorLocation?: string | undefined;
  authorName?: string | undefined;
  content: string;
  createdAt?: Date | undefined;
  helpfulVotes?: number | undefined;
  id?: string | undefined;
  isPublic?: boolean | undefined;
  isVerified?: boolean | undefined;
  metadata?: Array<CommerceMetadata> | undefined;
  raw?: { [k: string]: any } | undefined;
  status?: CommerceReviewCommentStatus | undefined;
  unhelpfulVotes?: number | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const CommerceReviewCommentStatus$inboundSchema: z.ZodType<
  CommerceReviewCommentStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CommerceReviewCommentStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CommerceReviewCommentStatus$outboundSchema: z.ZodType<
  CommerceReviewCommentStatus,
  z.ZodTypeDef,
  CommerceReviewCommentStatus
> = z.union([
  z.nativeEnum(CommerceReviewCommentStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceReviewCommentStatus$ {
  /** @deprecated use `CommerceReviewCommentStatus$inboundSchema` instead. */
  export const inboundSchema = CommerceReviewCommentStatus$inboundSchema;
  /** @deprecated use `CommerceReviewCommentStatus$outboundSchema` instead. */
  export const outboundSchema = CommerceReviewCommentStatus$outboundSchema;
}

/** @internal */
export const CommerceReviewComment$inboundSchema: z.ZodType<
  CommerceReviewComment,
  z.ZodTypeDef,
  unknown
> = z.object({
  author_avatar_url: z.string().optional(),
  author_email: z.string().optional(),
  author_location: z.string().optional(),
  author_name: z.string().optional(),
  content: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  helpful_votes: z.number().optional(),
  id: z.string().optional(),
  is_public: z.boolean().optional(),
  is_verified: z.boolean().optional(),
  metadata: z.array(CommerceMetadata$inboundSchema).optional(),
  raw: z.record(z.any()).optional(),
  status: CommerceReviewCommentStatus$inboundSchema.optional(),
  unhelpful_votes: z.number().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "author_avatar_url": "authorAvatarUrl",
    "author_email": "authorEmail",
    "author_location": "authorLocation",
    "author_name": "authorName",
    "created_at": "createdAt",
    "helpful_votes": "helpfulVotes",
    "is_public": "isPublic",
    "is_verified": "isVerified",
    "unhelpful_votes": "unhelpfulVotes",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type CommerceReviewComment$Outbound = {
  author_avatar_url?: string | undefined;
  author_email?: string | undefined;
  author_location?: string | undefined;
  author_name?: string | undefined;
  content: string;
  created_at?: string | undefined;
  helpful_votes?: number | undefined;
  id?: string | undefined;
  is_public?: boolean | undefined;
  is_verified?: boolean | undefined;
  metadata?: Array<CommerceMetadata$Outbound> | undefined;
  raw?: { [k: string]: any } | undefined;
  status?: string | undefined;
  unhelpful_votes?: number | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const CommerceReviewComment$outboundSchema: z.ZodType<
  CommerceReviewComment$Outbound,
  z.ZodTypeDef,
  CommerceReviewComment
> = z.object({
  authorAvatarUrl: z.string().optional(),
  authorEmail: z.string().optional(),
  authorLocation: z.string().optional(),
  authorName: z.string().optional(),
  content: z.string(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  helpfulVotes: z.number().optional(),
  id: z.string().optional(),
  isPublic: z.boolean().optional(),
  isVerified: z.boolean().optional(),
  metadata: z.array(CommerceMetadata$outboundSchema).optional(),
  raw: z.record(z.any()).optional(),
  status: CommerceReviewCommentStatus$outboundSchema.optional(),
  unhelpfulVotes: z.number().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    authorAvatarUrl: "author_avatar_url",
    authorEmail: "author_email",
    authorLocation: "author_location",
    authorName: "author_name",
    createdAt: "created_at",
    helpfulVotes: "helpful_votes",
    isPublic: "is_public",
    isVerified: "is_verified",
    unhelpfulVotes: "unhelpful_votes",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceReviewComment$ {
  /** @deprecated use `CommerceReviewComment$inboundSchema` instead. */
  export const inboundSchema = CommerceReviewComment$inboundSchema;
  /** @deprecated use `CommerceReviewComment$outboundSchema` instead. */
  export const outboundSchema = CommerceReviewComment$outboundSchema;
  /** @deprecated use `CommerceReviewComment$Outbound` instead. */
  export type Outbound = CommerceReviewComment$Outbound;
}

export function commerceReviewCommentToJSON(
  commerceReviewComment: CommerceReviewComment,
): string {
  return JSON.stringify(
    CommerceReviewComment$outboundSchema.parse(commerceReviewComment),
  );
}

export function commerceReviewCommentFromJSON(
  jsonString: string,
): SafeParseResult<CommerceReviewComment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceReviewComment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceReviewComment' from JSON`,
  );
}
