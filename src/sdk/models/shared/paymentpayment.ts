/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type PaymentPayment = {
  accountId?: string | undefined;
  contactId?: string | undefined;
  createdAt?: Date | undefined;
  currency?: string | undefined;
  id?: string | undefined;
  invoiceId?: string | undefined;
  notes?: string | undefined;
  paymentMethod?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  reference?: string | undefined;
  totalAmount?: number | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const PaymentPayment$inboundSchema: z.ZodType<
  PaymentPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string().optional(),
  contact_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  currency: z.string().default("USD"),
  id: z.string().optional(),
  invoice_id: z.string().optional(),
  notes: z.string().optional(),
  payment_method: z.string().optional(),
  raw: z.record(z.any()).optional(),
  reference: z.string().optional(),
  total_amount: z.number().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "contact_id": "contactId",
    "created_at": "createdAt",
    "invoice_id": "invoiceId",
    "payment_method": "paymentMethod",
    "total_amount": "totalAmount",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PaymentPayment$Outbound = {
  account_id?: string | undefined;
  contact_id?: string | undefined;
  created_at?: string | undefined;
  currency: string;
  id?: string | undefined;
  invoice_id?: string | undefined;
  notes?: string | undefined;
  payment_method?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  reference?: string | undefined;
  total_amount?: number | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const PaymentPayment$outboundSchema: z.ZodType<
  PaymentPayment$Outbound,
  z.ZodTypeDef,
  PaymentPayment
> = z.object({
  accountId: z.string().optional(),
  contactId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  currency: z.string().default("USD"),
  id: z.string().optional(),
  invoiceId: z.string().optional(),
  notes: z.string().optional(),
  paymentMethod: z.string().optional(),
  raw: z.record(z.any()).optional(),
  reference: z.string().optional(),
  totalAmount: z.number().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    contactId: "contact_id",
    createdAt: "created_at",
    invoiceId: "invoice_id",
    paymentMethod: "payment_method",
    totalAmount: "total_amount",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentPayment$ {
  /** @deprecated use `PaymentPayment$inboundSchema` instead. */
  export const inboundSchema = PaymentPayment$inboundSchema;
  /** @deprecated use `PaymentPayment$outboundSchema` instead. */
  export const outboundSchema = PaymentPayment$outboundSchema;
  /** @deprecated use `PaymentPayment$Outbound` instead. */
  export type Outbound = PaymentPayment$Outbound;
}
