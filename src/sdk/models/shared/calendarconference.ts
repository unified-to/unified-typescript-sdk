/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CalendarConference = {
  conferenceIdentifier?: string | undefined;
  countryCode?: string | undefined;
  hostAccessCode?: string | undefined;
  label?: string | undefined;
  notes?: string | undefined;
  participantAccessCode?: string | undefined;
  regionCode?: string | undefined;
  telephone?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const CalendarConference$inboundSchema: z.ZodType<
  CalendarConference,
  z.ZodTypeDef,
  unknown
> = z.object({
  conference_identifier: z.string().optional(),
  country_code: z.string().optional(),
  host_access_code: z.string().optional(),
  label: z.string().optional(),
  notes: z.string().optional(),
  participant_access_code: z.string().optional(),
  region_code: z.string().optional(),
  telephone: z.string().optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "conference_identifier": "conferenceIdentifier",
    "country_code": "countryCode",
    "host_access_code": "hostAccessCode",
    "participant_access_code": "participantAccessCode",
    "region_code": "regionCode",
  });
});

/** @internal */
export type CalendarConference$Outbound = {
  conference_identifier?: string | undefined;
  country_code?: string | undefined;
  host_access_code?: string | undefined;
  label?: string | undefined;
  notes?: string | undefined;
  participant_access_code?: string | undefined;
  region_code?: string | undefined;
  telephone?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const CalendarConference$outboundSchema: z.ZodType<
  CalendarConference$Outbound,
  z.ZodTypeDef,
  CalendarConference
> = z.object({
  conferenceIdentifier: z.string().optional(),
  countryCode: z.string().optional(),
  hostAccessCode: z.string().optional(),
  label: z.string().optional(),
  notes: z.string().optional(),
  participantAccessCode: z.string().optional(),
  regionCode: z.string().optional(),
  telephone: z.string().optional(),
  url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    conferenceIdentifier: "conference_identifier",
    countryCode: "country_code",
    hostAccessCode: "host_access_code",
    participantAccessCode: "participant_access_code",
    regionCode: "region_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CalendarConference$ {
  /** @deprecated use `CalendarConference$inboundSchema` instead. */
  export const inboundSchema = CalendarConference$inboundSchema;
  /** @deprecated use `CalendarConference$outboundSchema` instead. */
  export const outboundSchema = CalendarConference$outboundSchema;
  /** @deprecated use `CalendarConference$Outbound` instead. */
  export type Outbound = CalendarConference$Outbound;
}

export function calendarConferenceToJSON(
  calendarConference: CalendarConference,
): string {
  return JSON.stringify(
    CalendarConference$outboundSchema.parse(calendarConference),
  );
}

export function calendarConferenceFromJSON(
  jsonString: string,
): SafeParseResult<CalendarConference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CalendarConference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CalendarConference' from JSON`,
  );
}
