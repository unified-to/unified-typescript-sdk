/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AtsJobOpeningStatus = {
  Open: "OPEN",
  Closed: "CLOSED",
} as const;
export type AtsJobOpeningStatus = OpenEnum<typeof AtsJobOpeningStatus>;

export type AtsJobOpening = {
  applicationId?: string | undefined;
  closeReason?: string | undefined;
  closedAt?: Date | undefined;
  openedAt?: Date | undefined;
  status?: AtsJobOpeningStatus | undefined;
};

/** @internal */
export const AtsJobOpeningStatus$inboundSchema: z.ZodType<
  AtsJobOpeningStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AtsJobOpeningStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AtsJobOpeningStatus$outboundSchema: z.ZodType<
  AtsJobOpeningStatus,
  z.ZodTypeDef,
  AtsJobOpeningStatus
> = z.union([
  z.nativeEnum(AtsJobOpeningStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJobOpeningStatus$ {
  /** @deprecated use `AtsJobOpeningStatus$inboundSchema` instead. */
  export const inboundSchema = AtsJobOpeningStatus$inboundSchema;
  /** @deprecated use `AtsJobOpeningStatus$outboundSchema` instead. */
  export const outboundSchema = AtsJobOpeningStatus$outboundSchema;
}

/** @internal */
export const AtsJobOpening$inboundSchema: z.ZodType<
  AtsJobOpening,
  z.ZodTypeDef,
  unknown
> = z.object({
  application_id: z.string().optional(),
  close_reason: z.string().optional(),
  closed_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  opened_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  status: AtsJobOpeningStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "application_id": "applicationId",
    "close_reason": "closeReason",
    "closed_at": "closedAt",
    "opened_at": "openedAt",
  });
});

/** @internal */
export type AtsJobOpening$Outbound = {
  application_id?: string | undefined;
  close_reason?: string | undefined;
  closed_at?: string | undefined;
  opened_at?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const AtsJobOpening$outboundSchema: z.ZodType<
  AtsJobOpening$Outbound,
  z.ZodTypeDef,
  AtsJobOpening
> = z.object({
  applicationId: z.string().optional(),
  closeReason: z.string().optional(),
  closedAt: z.date().transform(v => v.toISOString()).optional(),
  openedAt: z.date().transform(v => v.toISOString()).optional(),
  status: AtsJobOpeningStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    applicationId: "application_id",
    closeReason: "close_reason",
    closedAt: "closed_at",
    openedAt: "opened_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJobOpening$ {
  /** @deprecated use `AtsJobOpening$inboundSchema` instead. */
  export const inboundSchema = AtsJobOpening$inboundSchema;
  /** @deprecated use `AtsJobOpening$outboundSchema` instead. */
  export const outboundSchema = AtsJobOpening$outboundSchema;
  /** @deprecated use `AtsJobOpening$Outbound` instead. */
  export type Outbound = AtsJobOpening$Outbound;
}

export function atsJobOpeningToJSON(atsJobOpening: AtsJobOpening): string {
  return JSON.stringify(AtsJobOpening$outboundSchema.parse(atsJobOpening));
}

export function atsJobOpeningFromJSON(
  jsonString: string,
): SafeParseResult<AtsJobOpening, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsJobOpening$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsJobOpening' from JSON`,
  );
}
