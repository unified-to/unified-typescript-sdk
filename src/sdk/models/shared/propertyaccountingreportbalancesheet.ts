/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingBalanceSheetItem,
  AccountingBalanceSheetItem$inboundSchema,
  AccountingBalanceSheetItem$Outbound,
  AccountingBalanceSheetItem$outboundSchema,
} from "./accountingbalancesheetitem.js";

export type PropertyAccountingReportBalanceSheet = {
  assets?: Array<AccountingBalanceSheetItem> | undefined;
  equity?: Array<AccountingBalanceSheetItem> | undefined;
  liabilities?: Array<AccountingBalanceSheetItem> | undefined;
  netAssetsAmount?: number | undefined;
};

/** @internal */
export const PropertyAccountingReportBalanceSheet$inboundSchema: z.ZodType<
  PropertyAccountingReportBalanceSheet,
  z.ZodTypeDef,
  unknown
> = z.object({
  assets: z.array(AccountingBalanceSheetItem$inboundSchema).optional(),
  equity: z.array(AccountingBalanceSheetItem$inboundSchema).optional(),
  liabilities: z.array(AccountingBalanceSheetItem$inboundSchema).optional(),
  net_assets_amount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "net_assets_amount": "netAssetsAmount",
  });
});

/** @internal */
export type PropertyAccountingReportBalanceSheet$Outbound = {
  assets?: Array<AccountingBalanceSheetItem$Outbound> | undefined;
  equity?: Array<AccountingBalanceSheetItem$Outbound> | undefined;
  liabilities?: Array<AccountingBalanceSheetItem$Outbound> | undefined;
  net_assets_amount?: number | undefined;
};

/** @internal */
export const PropertyAccountingReportBalanceSheet$outboundSchema: z.ZodType<
  PropertyAccountingReportBalanceSheet$Outbound,
  z.ZodTypeDef,
  PropertyAccountingReportBalanceSheet
> = z.object({
  assets: z.array(AccountingBalanceSheetItem$outboundSchema).optional(),
  equity: z.array(AccountingBalanceSheetItem$outboundSchema).optional(),
  liabilities: z.array(AccountingBalanceSheetItem$outboundSchema).optional(),
  netAssetsAmount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    netAssetsAmount: "net_assets_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyAccountingReportBalanceSheet$ {
  /** @deprecated use `PropertyAccountingReportBalanceSheet$inboundSchema` instead. */
  export const inboundSchema =
    PropertyAccountingReportBalanceSheet$inboundSchema;
  /** @deprecated use `PropertyAccountingReportBalanceSheet$outboundSchema` instead. */
  export const outboundSchema =
    PropertyAccountingReportBalanceSheet$outboundSchema;
  /** @deprecated use `PropertyAccountingReportBalanceSheet$Outbound` instead. */
  export type Outbound = PropertyAccountingReportBalanceSheet$Outbound;
}

export function propertyAccountingReportBalanceSheetToJSON(
  propertyAccountingReportBalanceSheet: PropertyAccountingReportBalanceSheet,
): string {
  return JSON.stringify(
    PropertyAccountingReportBalanceSheet$outboundSchema.parse(
      propertyAccountingReportBalanceSheet,
    ),
  );
}

export function propertyAccountingReportBalanceSheetFromJSON(
  jsonString: string,
): SafeParseResult<PropertyAccountingReportBalanceSheet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PropertyAccountingReportBalanceSheet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyAccountingReportBalanceSheet' from JSON`,
  );
}
