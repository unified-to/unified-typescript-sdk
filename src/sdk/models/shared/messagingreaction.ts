/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PropertyMessagingReactionMember,
  PropertyMessagingReactionMember$inboundSchema,
  PropertyMessagingReactionMember$Outbound,
  PropertyMessagingReactionMember$outboundSchema,
} from "./propertymessagingreactionmember.js";

export type MessagingReaction = {
  member: PropertyMessagingReactionMember;
  reaction: string;
};

/** @internal */
export const MessagingReaction$inboundSchema: z.ZodType<
  MessagingReaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  member: PropertyMessagingReactionMember$inboundSchema,
  reaction: z.string(),
});

/** @internal */
export type MessagingReaction$Outbound = {
  member: PropertyMessagingReactionMember$Outbound;
  reaction: string;
};

/** @internal */
export const MessagingReaction$outboundSchema: z.ZodType<
  MessagingReaction$Outbound,
  z.ZodTypeDef,
  MessagingReaction
> = z.object({
  member: PropertyMessagingReactionMember$outboundSchema,
  reaction: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagingReaction$ {
  /** @deprecated use `MessagingReaction$inboundSchema` instead. */
  export const inboundSchema = MessagingReaction$inboundSchema;
  /** @deprecated use `MessagingReaction$outboundSchema` instead. */
  export const outboundSchema = MessagingReaction$outboundSchema;
  /** @deprecated use `MessagingReaction$Outbound` instead. */
  export type Outbound = MessagingReaction$Outbound;
}

export function messagingReactionToJSON(
  messagingReaction: MessagingReaction,
): string {
  return JSON.stringify(
    MessagingReaction$outboundSchema.parse(messagingReaction),
  );
}

export function messagingReactionFromJSON(
  jsonString: string,
): SafeParseResult<MessagingReaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagingReaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagingReaction' from JSON`,
  );
}
