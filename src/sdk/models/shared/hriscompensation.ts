/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const HrisCompensationFrequency = {
  OneTime: "ONE_TIME",
  Day: "DAY",
  Quarter: "QUARTER",
  Year: "YEAR",
  Hour: "HOUR",
  Month: "MONTH",
  Week: "WEEK",
} as const;
export type HrisCompensationFrequency = OpenEnum<
  typeof HrisCompensationFrequency
>;

export const HrisCompensationType = {
  Salary: "SALARY",
  Bonus: "BONUS",
  StockOptions: "STOCK_OPTIONS",
  Equity: "EQUITY",
  Other: "OTHER",
} as const;
export type HrisCompensationType = OpenEnum<typeof HrisCompensationType>;

export type HrisCompensation = {
  amount?: number | undefined;
  currency?: string | undefined;
  frequency?: HrisCompensationFrequency | undefined;
  type?: HrisCompensationType | undefined;
};

/** @internal */
export const HrisCompensationFrequency$inboundSchema: z.ZodType<
  HrisCompensationFrequency,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HrisCompensationFrequency),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HrisCompensationFrequency$outboundSchema: z.ZodType<
  HrisCompensationFrequency,
  z.ZodTypeDef,
  HrisCompensationFrequency
> = z.union([
  z.nativeEnum(HrisCompensationFrequency),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompensationFrequency$ {
  /** @deprecated use `HrisCompensationFrequency$inboundSchema` instead. */
  export const inboundSchema = HrisCompensationFrequency$inboundSchema;
  /** @deprecated use `HrisCompensationFrequency$outboundSchema` instead. */
  export const outboundSchema = HrisCompensationFrequency$outboundSchema;
}

/** @internal */
export const HrisCompensationType$inboundSchema: z.ZodType<
  HrisCompensationType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HrisCompensationType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HrisCompensationType$outboundSchema: z.ZodType<
  HrisCompensationType,
  z.ZodTypeDef,
  HrisCompensationType
> = z.union([
  z.nativeEnum(HrisCompensationType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompensationType$ {
  /** @deprecated use `HrisCompensationType$inboundSchema` instead. */
  export const inboundSchema = HrisCompensationType$inboundSchema;
  /** @deprecated use `HrisCompensationType$outboundSchema` instead. */
  export const outboundSchema = HrisCompensationType$outboundSchema;
}

/** @internal */
export const HrisCompensation$inboundSchema: z.ZodType<
  HrisCompensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().optional(),
  currency: z.string().optional(),
  frequency: HrisCompensationFrequency$inboundSchema.optional(),
  type: HrisCompensationType$inboundSchema.optional(),
});

/** @internal */
export type HrisCompensation$Outbound = {
  amount?: number | undefined;
  currency?: string | undefined;
  frequency?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const HrisCompensation$outboundSchema: z.ZodType<
  HrisCompensation$Outbound,
  z.ZodTypeDef,
  HrisCompensation
> = z.object({
  amount: z.number().optional(),
  currency: z.string().optional(),
  frequency: HrisCompensationFrequency$outboundSchema.optional(),
  type: HrisCompensationType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisCompensation$ {
  /** @deprecated use `HrisCompensation$inboundSchema` instead. */
  export const inboundSchema = HrisCompensation$inboundSchema;
  /** @deprecated use `HrisCompensation$outboundSchema` instead. */
  export const outboundSchema = HrisCompensation$outboundSchema;
  /** @deprecated use `HrisCompensation$Outbound` instead. */
  export type Outbound = HrisCompensation$Outbound;
}

export function hrisCompensationToJSON(
  hrisCompensation: HrisCompensation,
): string {
  return JSON.stringify(
    HrisCompensation$outboundSchema.parse(hrisCompensation),
  );
}

export function hrisCompensationFromJSON(
  jsonString: string,
): SafeParseResult<HrisCompensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisCompensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisCompensation' from JSON`,
  );
}
