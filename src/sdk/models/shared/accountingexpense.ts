/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingLineitem,
  AccountingLineitem$inboundSchema,
  AccountingLineitem$Outbound,
  AccountingLineitem$outboundSchema,
} from "./accountinglineitem.js";

export type AccountingExpense = {
  approvedAt?: Date | undefined;
  approverUserId?: string | undefined;
  createdAt?: Date | undefined;
  currency?: string | undefined;
  id?: string | undefined;
  lineitems?: Array<AccountingLineitem> | undefined;
  name?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  reimbursedAmount?: number | undefined;
  reimbursedAt?: Date | undefined;
  taxAmount?: number | undefined;
  totalAmount?: number | undefined;
  updatedAt?: Date | undefined;
  userId?: string | undefined;
};

/** @internal */
export const AccountingExpense$inboundSchema: z.ZodType<
  AccountingExpense,
  z.ZodTypeDef,
  unknown
> = z.object({
  approved_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  approver_user_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  lineitems: z.array(AccountingLineitem$inboundSchema).optional(),
  name: z.string().optional(),
  raw: z.record(z.any()).optional(),
  reimbursed_amount: z.number().optional(),
  reimbursed_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  tax_amount: z.number().optional(),
  total_amount: z.number().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "approved_at": "approvedAt",
    "approver_user_id": "approverUserId",
    "created_at": "createdAt",
    "reimbursed_amount": "reimbursedAmount",
    "reimbursed_at": "reimbursedAt",
    "tax_amount": "taxAmount",
    "total_amount": "totalAmount",
    "updated_at": "updatedAt",
    "user_id": "userId",
  });
});

/** @internal */
export type AccountingExpense$Outbound = {
  approved_at?: string | undefined;
  approver_user_id?: string | undefined;
  created_at?: string | undefined;
  currency?: string | undefined;
  id?: string | undefined;
  lineitems?: Array<AccountingLineitem$Outbound> | undefined;
  name?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  reimbursed_amount?: number | undefined;
  reimbursed_at?: string | undefined;
  tax_amount?: number | undefined;
  total_amount?: number | undefined;
  updated_at?: string | undefined;
  user_id?: string | undefined;
};

/** @internal */
export const AccountingExpense$outboundSchema: z.ZodType<
  AccountingExpense$Outbound,
  z.ZodTypeDef,
  AccountingExpense
> = z.object({
  approvedAt: z.date().transform(v => v.toISOString()).optional(),
  approverUserId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  lineitems: z.array(AccountingLineitem$outboundSchema).optional(),
  name: z.string().optional(),
  raw: z.record(z.any()).optional(),
  reimbursedAmount: z.number().optional(),
  reimbursedAt: z.date().transform(v => v.toISOString()).optional(),
  taxAmount: z.number().optional(),
  totalAmount: z.number().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    approvedAt: "approved_at",
    approverUserId: "approver_user_id",
    createdAt: "created_at",
    reimbursedAmount: "reimbursed_amount",
    reimbursedAt: "reimbursed_at",
    taxAmount: "tax_amount",
    totalAmount: "total_amount",
    updatedAt: "updated_at",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingExpense$ {
  /** @deprecated use `AccountingExpense$inboundSchema` instead. */
  export const inboundSchema = AccountingExpense$inboundSchema;
  /** @deprecated use `AccountingExpense$outboundSchema` instead. */
  export const outboundSchema = AccountingExpense$outboundSchema;
  /** @deprecated use `AccountingExpense$Outbound` instead. */
  export type Outbound = AccountingExpense$Outbound;
}

export function accountingExpenseToJSON(
  accountingExpense: AccountingExpense,
): string {
  return JSON.stringify(
    AccountingExpense$outboundSchema.parse(accountingExpense),
  );
}

export function accountingExpenseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingExpense, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingExpense$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingExpense' from JSON`,
  );
}
