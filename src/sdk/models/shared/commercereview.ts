/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CommerceItemMedia,
  CommerceItemMedia$inboundSchema,
  CommerceItemMedia$Outbound,
  CommerceItemMedia$outboundSchema,
} from "./commerceitemmedia.js";
import {
  CommerceMetadata,
  CommerceMetadata$inboundSchema,
  CommerceMetadata$Outbound,
  CommerceMetadata$outboundSchema,
} from "./commercemetadata.js";
import {
  CommerceReviewComment,
  CommerceReviewComment$inboundSchema,
  CommerceReviewComment$Outbound,
  CommerceReviewComment$outboundSchema,
} from "./commercereviewcomment.js";

export const CommerceReviewStatus = {
  Pending: "PENDING",
  Approved: "APPROVED",
  Rejected: "REJECTED",
  Spam: "SPAM",
} as const;
export type CommerceReviewStatus = OpenEnum<typeof CommerceReviewStatus>;

export type CommerceReview = {
  authorAvatarUrl?: string | undefined;
  authorEmail?: string | undefined;
  authorLocation?: string | undefined;
  authorName?: string | undefined;
  comments?: Array<CommerceReviewComment> | undefined;
  content?: string | undefined;
  createdAt?: Date | undefined;
  helpfulVotes?: number | undefined;
  id?: string | undefined;
  isFeatured?: boolean | undefined;
  isPublic?: boolean | undefined;
  isVerified?: boolean | undefined;
  itemId: string;
  itemVariantId?: string | undefined;
  /**
   * Photosvideos attached to the review
   */
  media?: Array<CommerceItemMedia> | undefined;
  metadata?: Array<CommerceMetadata> | undefined;
  rating?: number | undefined;
  raw?: { [k: string]: any } | undefined;
  status?: CommerceReviewStatus | undefined;
  title?: string | undefined;
  unhelpfulVotes?: number | undefined;
  updatedAt?: Date | undefined;
  verifiedPurchase?: boolean | undefined;
};

/** @internal */
export const CommerceReviewStatus$inboundSchema: z.ZodType<
  CommerceReviewStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CommerceReviewStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CommerceReviewStatus$outboundSchema: z.ZodType<
  CommerceReviewStatus,
  z.ZodTypeDef,
  CommerceReviewStatus
> = z.union([
  z.nativeEnum(CommerceReviewStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceReviewStatus$ {
  /** @deprecated use `CommerceReviewStatus$inboundSchema` instead. */
  export const inboundSchema = CommerceReviewStatus$inboundSchema;
  /** @deprecated use `CommerceReviewStatus$outboundSchema` instead. */
  export const outboundSchema = CommerceReviewStatus$outboundSchema;
}

/** @internal */
export const CommerceReview$inboundSchema: z.ZodType<
  CommerceReview,
  z.ZodTypeDef,
  unknown
> = z.object({
  author_avatar_url: z.string().optional(),
  author_email: z.string().optional(),
  author_location: z.string().optional(),
  author_name: z.string().optional(),
  comments: z.array(CommerceReviewComment$inboundSchema).optional(),
  content: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  helpful_votes: z.number().optional(),
  id: z.string().optional(),
  is_featured: z.boolean().optional(),
  is_public: z.boolean().optional(),
  is_verified: z.boolean().optional(),
  item_id: z.string(),
  item_variant_id: z.string().optional(),
  media: z.array(CommerceItemMedia$inboundSchema).optional(),
  metadata: z.array(CommerceMetadata$inboundSchema).optional(),
  rating: z.number().optional(),
  raw: z.record(z.any()).optional(),
  status: CommerceReviewStatus$inboundSchema.optional(),
  title: z.string().optional(),
  unhelpful_votes: z.number().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  verified_purchase: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "author_avatar_url": "authorAvatarUrl",
    "author_email": "authorEmail",
    "author_location": "authorLocation",
    "author_name": "authorName",
    "created_at": "createdAt",
    "helpful_votes": "helpfulVotes",
    "is_featured": "isFeatured",
    "is_public": "isPublic",
    "is_verified": "isVerified",
    "item_id": "itemId",
    "item_variant_id": "itemVariantId",
    "unhelpful_votes": "unhelpfulVotes",
    "updated_at": "updatedAt",
    "verified_purchase": "verifiedPurchase",
  });
});

/** @internal */
export type CommerceReview$Outbound = {
  author_avatar_url?: string | undefined;
  author_email?: string | undefined;
  author_location?: string | undefined;
  author_name?: string | undefined;
  comments?: Array<CommerceReviewComment$Outbound> | undefined;
  content?: string | undefined;
  created_at?: string | undefined;
  helpful_votes?: number | undefined;
  id?: string | undefined;
  is_featured?: boolean | undefined;
  is_public?: boolean | undefined;
  is_verified?: boolean | undefined;
  item_id: string;
  item_variant_id?: string | undefined;
  media?: Array<CommerceItemMedia$Outbound> | undefined;
  metadata?: Array<CommerceMetadata$Outbound> | undefined;
  rating?: number | undefined;
  raw?: { [k: string]: any } | undefined;
  status?: string | undefined;
  title?: string | undefined;
  unhelpful_votes?: number | undefined;
  updated_at?: string | undefined;
  verified_purchase?: boolean | undefined;
};

/** @internal */
export const CommerceReview$outboundSchema: z.ZodType<
  CommerceReview$Outbound,
  z.ZodTypeDef,
  CommerceReview
> = z.object({
  authorAvatarUrl: z.string().optional(),
  authorEmail: z.string().optional(),
  authorLocation: z.string().optional(),
  authorName: z.string().optional(),
  comments: z.array(CommerceReviewComment$outboundSchema).optional(),
  content: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  helpfulVotes: z.number().optional(),
  id: z.string().optional(),
  isFeatured: z.boolean().optional(),
  isPublic: z.boolean().optional(),
  isVerified: z.boolean().optional(),
  itemId: z.string(),
  itemVariantId: z.string().optional(),
  media: z.array(CommerceItemMedia$outboundSchema).optional(),
  metadata: z.array(CommerceMetadata$outboundSchema).optional(),
  rating: z.number().optional(),
  raw: z.record(z.any()).optional(),
  status: CommerceReviewStatus$outboundSchema.optional(),
  title: z.string().optional(),
  unhelpfulVotes: z.number().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  verifiedPurchase: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    authorAvatarUrl: "author_avatar_url",
    authorEmail: "author_email",
    authorLocation: "author_location",
    authorName: "author_name",
    createdAt: "created_at",
    helpfulVotes: "helpful_votes",
    isFeatured: "is_featured",
    isPublic: "is_public",
    isVerified: "is_verified",
    itemId: "item_id",
    itemVariantId: "item_variant_id",
    unhelpfulVotes: "unhelpful_votes",
    updatedAt: "updated_at",
    verifiedPurchase: "verified_purchase",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceReview$ {
  /** @deprecated use `CommerceReview$inboundSchema` instead. */
  export const inboundSchema = CommerceReview$inboundSchema;
  /** @deprecated use `CommerceReview$outboundSchema` instead. */
  export const outboundSchema = CommerceReview$outboundSchema;
  /** @deprecated use `CommerceReview$Outbound` instead. */
  export type Outbound = CommerceReview$Outbound;
}

export function commerceReviewToJSON(commerceReview: CommerceReview): string {
  return JSON.stringify(CommerceReview$outboundSchema.parse(commerceReview));
}

export function commerceReviewFromJSON(
  jsonString: string,
): SafeParseResult<CommerceReview, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceReview$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceReview' from JSON`,
  );
}
