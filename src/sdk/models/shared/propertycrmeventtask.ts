/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Priority = {
    High: "HIGH",
    Medium: "MEDIUM",
    Low: "LOW",
} as const;
export type Priority = ClosedEnum<typeof Priority>;

export const PropertyCrmEventTaskStatus = {
    Completed: "COMPLETED",
    NotStarted: "NOT_STARTED",
    WorkInProgress: "WORK_IN_PROGRESS",
    Deferred: "DEFERRED",
} as const;
export type PropertyCrmEventTaskStatus = ClosedEnum<typeof PropertyCrmEventTaskStatus>;

/**
 * The task object, when type = task
 */
export type PropertyCrmEventTask = {
    description?: string | undefined;
    dueAt?: Date | undefined;
    name?: string | undefined;
    priority?: Priority | undefined;
    status?: PropertyCrmEventTaskStatus | undefined;
};

/** @internal */
export const Priority$inboundSchema: z.ZodNativeEnum<typeof Priority> = z.nativeEnum(Priority);

/** @internal */
export const Priority$outboundSchema: z.ZodNativeEnum<typeof Priority> = Priority$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Priority$ {
    /** @deprecated use `Priority$inboundSchema` instead. */
    export const inboundSchema = Priority$inboundSchema;
    /** @deprecated use `Priority$outboundSchema` instead. */
    export const outboundSchema = Priority$outboundSchema;
}

/** @internal */
export const PropertyCrmEventTaskStatus$inboundSchema: z.ZodNativeEnum<
    typeof PropertyCrmEventTaskStatus
> = z.nativeEnum(PropertyCrmEventTaskStatus);

/** @internal */
export const PropertyCrmEventTaskStatus$outboundSchema: z.ZodNativeEnum<
    typeof PropertyCrmEventTaskStatus
> = PropertyCrmEventTaskStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyCrmEventTaskStatus$ {
    /** @deprecated use `PropertyCrmEventTaskStatus$inboundSchema` instead. */
    export const inboundSchema = PropertyCrmEventTaskStatus$inboundSchema;
    /** @deprecated use `PropertyCrmEventTaskStatus$outboundSchema` instead. */
    export const outboundSchema = PropertyCrmEventTaskStatus$outboundSchema;
}

/** @internal */
export const PropertyCrmEventTask$inboundSchema: z.ZodType<
    PropertyCrmEventTask,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        description: z.string().optional(),
        due_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        name: z.string().optional(),
        priority: Priority$inboundSchema.optional(),
        status: PropertyCrmEventTaskStatus$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            due_at: "dueAt",
        });
    });

/** @internal */
export type PropertyCrmEventTask$Outbound = {
    description?: string | undefined;
    due_at?: string | undefined;
    name?: string | undefined;
    priority?: string | undefined;
    status?: string | undefined;
};

/** @internal */
export const PropertyCrmEventTask$outboundSchema: z.ZodType<
    PropertyCrmEventTask$Outbound,
    z.ZodTypeDef,
    PropertyCrmEventTask
> = z
    .object({
        description: z.string().optional(),
        dueAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        name: z.string().optional(),
        priority: Priority$outboundSchema.optional(),
        status: PropertyCrmEventTaskStatus$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            dueAt: "due_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyCrmEventTask$ {
    /** @deprecated use `PropertyCrmEventTask$inboundSchema` instead. */
    export const inboundSchema = PropertyCrmEventTask$inboundSchema;
    /** @deprecated use `PropertyCrmEventTask$outboundSchema` instead. */
    export const outboundSchema = PropertyCrmEventTask$outboundSchema;
    /** @deprecated use `PropertyCrmEventTask$Outbound` instead. */
    export type Outbound = PropertyCrmEventTask$Outbound;
}
