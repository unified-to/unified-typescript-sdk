/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Priority = {
  High: "HIGH",
  Medium: "MEDIUM",
  Low: "LOW",
} as const;
export type Priority = OpenEnum<typeof Priority>;

export const PropertyCrmEventTaskStatus = {
  Completed: "COMPLETED",
  NotStarted: "NOT_STARTED",
  WorkInProgress: "WORK_IN_PROGRESS",
  Deferred: "DEFERRED",
} as const;
export type PropertyCrmEventTaskStatus = OpenEnum<
  typeof PropertyCrmEventTaskStatus
>;

/**
 * The task object, when type = task
 */
export type PropertyCrmEventTask = {
  description?: string | undefined;
  dueAt?: Date | undefined;
  name?: string | undefined;
  priority?: Priority | undefined;
  status?: PropertyCrmEventTaskStatus | undefined;
};

/** @internal */
export const Priority$inboundSchema: z.ZodType<
  Priority,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(Priority),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Priority$outboundSchema: z.ZodType<
  Priority,
  z.ZodTypeDef,
  Priority
> = z.union([
  z.nativeEnum(Priority),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Priority$ {
  /** @deprecated use `Priority$inboundSchema` instead. */
  export const inboundSchema = Priority$inboundSchema;
  /** @deprecated use `Priority$outboundSchema` instead. */
  export const outboundSchema = Priority$outboundSchema;
}

/** @internal */
export const PropertyCrmEventTaskStatus$inboundSchema: z.ZodType<
  PropertyCrmEventTaskStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PropertyCrmEventTaskStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PropertyCrmEventTaskStatus$outboundSchema: z.ZodType<
  PropertyCrmEventTaskStatus,
  z.ZodTypeDef,
  PropertyCrmEventTaskStatus
> = z.union([
  z.nativeEnum(PropertyCrmEventTaskStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyCrmEventTaskStatus$ {
  /** @deprecated use `PropertyCrmEventTaskStatus$inboundSchema` instead. */
  export const inboundSchema = PropertyCrmEventTaskStatus$inboundSchema;
  /** @deprecated use `PropertyCrmEventTaskStatus$outboundSchema` instead. */
  export const outboundSchema = PropertyCrmEventTaskStatus$outboundSchema;
}

/** @internal */
export const PropertyCrmEventTask$inboundSchema: z.ZodType<
  PropertyCrmEventTask,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  due_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  name: z.string().optional(),
  priority: Priority$inboundSchema.optional(),
  status: PropertyCrmEventTaskStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "due_at": "dueAt",
  });
});

/** @internal */
export type PropertyCrmEventTask$Outbound = {
  description?: string | undefined;
  due_at?: string | undefined;
  name?: string | undefined;
  priority?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const PropertyCrmEventTask$outboundSchema: z.ZodType<
  PropertyCrmEventTask$Outbound,
  z.ZodTypeDef,
  PropertyCrmEventTask
> = z.object({
  description: z.string().optional(),
  dueAt: z.date().transform(v => v.toISOString()).optional(),
  name: z.string().optional(),
  priority: Priority$outboundSchema.optional(),
  status: PropertyCrmEventTaskStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    dueAt: "due_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyCrmEventTask$ {
  /** @deprecated use `PropertyCrmEventTask$inboundSchema` instead. */
  export const inboundSchema = PropertyCrmEventTask$inboundSchema;
  /** @deprecated use `PropertyCrmEventTask$outboundSchema` instead. */
  export const outboundSchema = PropertyCrmEventTask$outboundSchema;
  /** @deprecated use `PropertyCrmEventTask$Outbound` instead. */
  export type Outbound = PropertyCrmEventTask$Outbound;
}

export function propertyCrmEventTaskToJSON(
  propertyCrmEventTask: PropertyCrmEventTask,
): string {
  return JSON.stringify(
    PropertyCrmEventTask$outboundSchema.parse(propertyCrmEventTask),
  );
}

export function propertyCrmEventTaskFromJSON(
  jsonString: string,
): SafeParseResult<PropertyCrmEventTask, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyCrmEventTask$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyCrmEventTask' from JSON`,
  );
}
