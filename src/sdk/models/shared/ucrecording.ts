/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UcRecordingMedia,
  UcRecordingMedia$inboundSchema,
  UcRecordingMedia$Outbound,
  UcRecordingMedia$outboundSchema,
} from "./ucrecordingmedia.js";

export type UcRecording = {
  callId?: string | undefined;
  contactId?: string | undefined;
  contactName?: string | undefined;
  contactPhone?: string | undefined;
  createdAt?: Date | undefined;
  endAt?: Date | undefined;
  expiresAt?: Date | undefined;
  id?: string | undefined;
  media?: Array<UcRecordingMedia> | undefined;
  raw?: { [k: string]: any } | undefined;
  startAt?: Date | undefined;
  updatedAt?: Date | undefined;
  userId?: string | undefined;
  webUrl?: string | undefined;
};

/** @internal */
export const UcRecording$inboundSchema: z.ZodType<
  UcRecording,
  z.ZodTypeDef,
  unknown
> = z.object({
  call_id: z.string().optional(),
  contact_id: z.string().optional(),
  contact_name: z.string().optional(),
  contact_phone: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  end_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  id: z.string().optional(),
  media: z.array(UcRecordingMedia$inboundSchema).optional(),
  raw: z.record(z.any()).optional(),
  start_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_id: z.string().optional(),
  web_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
    "contact_id": "contactId",
    "contact_name": "contactName",
    "contact_phone": "contactPhone",
    "created_at": "createdAt",
    "end_at": "endAt",
    "expires_at": "expiresAt",
    "start_at": "startAt",
    "updated_at": "updatedAt",
    "user_id": "userId",
    "web_url": "webUrl",
  });
});

/** @internal */
export type UcRecording$Outbound = {
  call_id?: string | undefined;
  contact_id?: string | undefined;
  contact_name?: string | undefined;
  contact_phone?: string | undefined;
  created_at?: string | undefined;
  end_at?: string | undefined;
  expires_at?: string | undefined;
  id?: string | undefined;
  media?: Array<UcRecordingMedia$Outbound> | undefined;
  raw?: { [k: string]: any } | undefined;
  start_at?: string | undefined;
  updated_at?: string | undefined;
  user_id?: string | undefined;
  web_url?: string | undefined;
};

/** @internal */
export const UcRecording$outboundSchema: z.ZodType<
  UcRecording$Outbound,
  z.ZodTypeDef,
  UcRecording
> = z.object({
  callId: z.string().optional(),
  contactId: z.string().optional(),
  contactName: z.string().optional(),
  contactPhone: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  endAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  id: z.string().optional(),
  media: z.array(UcRecordingMedia$outboundSchema).optional(),
  raw: z.record(z.any()).optional(),
  startAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userId: z.string().optional(),
  webUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
    contactId: "contact_id",
    contactName: "contact_name",
    contactPhone: "contact_phone",
    createdAt: "created_at",
    endAt: "end_at",
    expiresAt: "expires_at",
    startAt: "start_at",
    updatedAt: "updated_at",
    userId: "user_id",
    webUrl: "web_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UcRecording$ {
  /** @deprecated use `UcRecording$inboundSchema` instead. */
  export const inboundSchema = UcRecording$inboundSchema;
  /** @deprecated use `UcRecording$outboundSchema` instead. */
  export const outboundSchema = UcRecording$outboundSchema;
  /** @deprecated use `UcRecording$Outbound` instead. */
  export type Outbound = UcRecording$Outbound;
}

export function ucRecordingToJSON(ucRecording: UcRecording): string {
  return JSON.stringify(UcRecording$outboundSchema.parse(ucRecording));
}

export function ucRecordingFromJSON(
  jsonString: string,
): SafeParseResult<UcRecording, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UcRecording$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UcRecording' from JSON`,
  );
}
