/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PropertyAtsCompanyAddress,
  PropertyAtsCompanyAddress$inboundSchema,
  PropertyAtsCompanyAddress$Outbound,
  PropertyAtsCompanyAddress$outboundSchema,
} from "./propertyatscompanyaddress.js";

export type AtsCompanyRaw = {};

export type AtsCompany = {
  address?: PropertyAtsCompanyAddress | undefined;
  createdAt?: Date | undefined;
  id?: string | undefined;
  name: string;
  parentId?: string | undefined;
  phone?: string | undefined;
  raw?: AtsCompanyRaw | undefined;
  recruiterIds?: Array<string> | undefined;
  updatedAt?: Date | undefined;
  websiteUrl?: string | undefined;
};

/** @internal */
export const AtsCompanyRaw$inboundSchema: z.ZodType<
  AtsCompanyRaw,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AtsCompanyRaw$Outbound = {};

/** @internal */
export const AtsCompanyRaw$outboundSchema: z.ZodType<
  AtsCompanyRaw$Outbound,
  z.ZodTypeDef,
  AtsCompanyRaw
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsCompanyRaw$ {
  /** @deprecated use `AtsCompanyRaw$inboundSchema` instead. */
  export const inboundSchema = AtsCompanyRaw$inboundSchema;
  /** @deprecated use `AtsCompanyRaw$outboundSchema` instead. */
  export const outboundSchema = AtsCompanyRaw$outboundSchema;
  /** @deprecated use `AtsCompanyRaw$Outbound` instead. */
  export type Outbound = AtsCompanyRaw$Outbound;
}

export function atsCompanyRawToJSON(atsCompanyRaw: AtsCompanyRaw): string {
  return JSON.stringify(AtsCompanyRaw$outboundSchema.parse(atsCompanyRaw));
}

export function atsCompanyRawFromJSON(
  jsonString: string,
): SafeParseResult<AtsCompanyRaw, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsCompanyRaw$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsCompanyRaw' from JSON`,
  );
}

/** @internal */
export const AtsCompany$inboundSchema: z.ZodType<
  AtsCompany,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: PropertyAtsCompanyAddress$inboundSchema.optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  id: z.string().optional(),
  name: z.string(),
  parent_id: z.string().optional(),
  phone: z.string().optional(),
  raw: z.lazy(() => AtsCompanyRaw$inboundSchema).optional(),
  recruiter_ids: z.array(z.string()).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  website_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "parent_id": "parentId",
    "recruiter_ids": "recruiterIds",
    "updated_at": "updatedAt",
    "website_url": "websiteUrl",
  });
});

/** @internal */
export type AtsCompany$Outbound = {
  address?: PropertyAtsCompanyAddress$Outbound | undefined;
  created_at?: string | undefined;
  id?: string | undefined;
  name: string;
  parent_id?: string | undefined;
  phone?: string | undefined;
  raw?: AtsCompanyRaw$Outbound | undefined;
  recruiter_ids?: Array<string> | undefined;
  updated_at?: string | undefined;
  website_url?: string | undefined;
};

/** @internal */
export const AtsCompany$outboundSchema: z.ZodType<
  AtsCompany$Outbound,
  z.ZodTypeDef,
  AtsCompany
> = z.object({
  address: PropertyAtsCompanyAddress$outboundSchema.optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  id: z.string().optional(),
  name: z.string(),
  parentId: z.string().optional(),
  phone: z.string().optional(),
  raw: z.lazy(() => AtsCompanyRaw$outboundSchema).optional(),
  recruiterIds: z.array(z.string()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  websiteUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    parentId: "parent_id",
    recruiterIds: "recruiter_ids",
    updatedAt: "updated_at",
    websiteUrl: "website_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsCompany$ {
  /** @deprecated use `AtsCompany$inboundSchema` instead. */
  export const inboundSchema = AtsCompany$inboundSchema;
  /** @deprecated use `AtsCompany$outboundSchema` instead. */
  export const outboundSchema = AtsCompany$outboundSchema;
  /** @deprecated use `AtsCompany$Outbound` instead. */
  export type Outbound = AtsCompany$Outbound;
}

export function atsCompanyToJSON(atsCompany: AtsCompany): string {
  return JSON.stringify(AtsCompany$outboundSchema.parse(atsCompany));
}

export function atsCompanyFromJSON(
  jsonString: string,
): SafeParseResult<AtsCompany, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsCompany$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsCompany' from JSON`,
  );
}
