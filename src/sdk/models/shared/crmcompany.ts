/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CrmEmail,
  CrmEmail$inboundSchema,
  CrmEmail$Outbound,
  CrmEmail$outboundSchema,
} from "./crmemail.js";
import {
  CrmTelephone,
  CrmTelephone$inboundSchema,
  CrmTelephone$Outbound,
  CrmTelephone$outboundSchema,
} from "./crmtelephone.js";
import {
  PropertyCrmCompanyAddress,
  PropertyCrmCompanyAddress$inboundSchema,
  PropertyCrmCompanyAddress$Outbound,
  PropertyCrmCompanyAddress$outboundSchema,
} from "./propertycrmcompanyaddress.js";

/**
 * A company represents an organization that optionally is associated with a deal and/or contacts
 */
export type CrmCompany = {
  address?: PropertyCrmCompanyAddress | undefined;
  createdAt?: Date | undefined;
  /**
   * An array of deal IDs associated with this contact
   */
  dealIds?: Array<string> | undefined;
  description?: string | undefined;
  emails?: Array<CrmEmail> | undefined;
  employees?: number | undefined;
  id?: string | undefined;
  industry?: string | undefined;
  isActive?: boolean | undefined;
  linkUrls?: Array<string> | undefined;
  name?: string | undefined;
  /**
   * The raw data returned by the integration for this company
   */
  raw?: { [k: string]: any } | undefined;
  tags?: Array<string> | undefined;
  telephones?: Array<CrmTelephone> | undefined;
  timezone?: string | undefined;
  updatedAt?: Date | undefined;
  userId?: string | undefined;
  websites?: Array<string> | undefined;
};

/** @internal */
export const CrmCompany$inboundSchema: z.ZodType<
  CrmCompany,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: PropertyCrmCompanyAddress$inboundSchema.optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deal_ids: z.array(z.string()).optional(),
  description: z.string().optional(),
  emails: z.array(CrmEmail$inboundSchema).optional(),
  employees: z.number().optional(),
  id: z.string().optional(),
  industry: z.string().optional(),
  is_active: z.boolean().optional(),
  link_urls: z.array(z.string()).optional(),
  name: z.string().optional(),
  raw: z.record(z.any()).optional(),
  tags: z.array(z.string()).optional(),
  telephones: z.array(CrmTelephone$inboundSchema).optional(),
  timezone: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_id: z.string().optional(),
  websites: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "deal_ids": "dealIds",
    "is_active": "isActive",
    "link_urls": "linkUrls",
    "updated_at": "updatedAt",
    "user_id": "userId",
  });
});

/** @internal */
export type CrmCompany$Outbound = {
  address?: PropertyCrmCompanyAddress$Outbound | undefined;
  created_at?: string | undefined;
  deal_ids?: Array<string> | undefined;
  description?: string | undefined;
  emails?: Array<CrmEmail$Outbound> | undefined;
  employees?: number | undefined;
  id?: string | undefined;
  industry?: string | undefined;
  is_active?: boolean | undefined;
  link_urls?: Array<string> | undefined;
  name?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  tags?: Array<string> | undefined;
  telephones?: Array<CrmTelephone$Outbound> | undefined;
  timezone?: string | undefined;
  updated_at?: string | undefined;
  user_id?: string | undefined;
  websites?: Array<string> | undefined;
};

/** @internal */
export const CrmCompany$outboundSchema: z.ZodType<
  CrmCompany$Outbound,
  z.ZodTypeDef,
  CrmCompany
> = z.object({
  address: PropertyCrmCompanyAddress$outboundSchema.optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  dealIds: z.array(z.string()).optional(),
  description: z.string().optional(),
  emails: z.array(CrmEmail$outboundSchema).optional(),
  employees: z.number().optional(),
  id: z.string().optional(),
  industry: z.string().optional(),
  isActive: z.boolean().optional(),
  linkUrls: z.array(z.string()).optional(),
  name: z.string().optional(),
  raw: z.record(z.any()).optional(),
  tags: z.array(z.string()).optional(),
  telephones: z.array(CrmTelephone$outboundSchema).optional(),
  timezone: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userId: z.string().optional(),
  websites: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    dealIds: "deal_ids",
    isActive: "is_active",
    linkUrls: "link_urls",
    updatedAt: "updated_at",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCompany$ {
  /** @deprecated use `CrmCompany$inboundSchema` instead. */
  export const inboundSchema = CrmCompany$inboundSchema;
  /** @deprecated use `CrmCompany$outboundSchema` instead. */
  export const outboundSchema = CrmCompany$outboundSchema;
  /** @deprecated use `CrmCompany$Outbound` instead. */
  export type Outbound = CrmCompany$Outbound;
}

export function crmCompanyToJSON(crmCompany: CrmCompany): string {
  return JSON.stringify(CrmCompany$outboundSchema.parse(crmCompany));
}

export function crmCompanyFromJSON(
  jsonString: string,
): SafeParseResult<CrmCompany, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCompany$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCompany' from JSON`,
  );
}
