/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingAssociatedContact,
  AccountingAssociatedContact$inboundSchema,
  AccountingAssociatedContact$Outbound,
  AccountingAssociatedContact$outboundSchema,
} from "./accountingassociatedcontact.js";
import {
  AccountingContactPaymentMethod,
  AccountingContactPaymentMethod$inboundSchema,
  AccountingContactPaymentMethod$Outbound,
  AccountingContactPaymentMethod$outboundSchema,
} from "./accountingcontactpaymentmethod.js";
import {
  AccountingEmail,
  AccountingEmail$inboundSchema,
  AccountingEmail$Outbound,
  AccountingEmail$outboundSchema,
} from "./accountingemail.js";
import {
  AccountingTelephone,
  AccountingTelephone$inboundSchema,
  AccountingTelephone$Outbound,
  AccountingTelephone$outboundSchema,
} from "./accountingtelephone.js";
import {
  PropertyAccountingContactBillingAddress,
  PropertyAccountingContactBillingAddress$inboundSchema,
  PropertyAccountingContactBillingAddress$Outbound,
  PropertyAccountingContactBillingAddress$outboundSchema,
} from "./propertyaccountingcontactbillingaddress.js";
import {
  PropertyAccountingContactShippingAddress,
  PropertyAccountingContactShippingAddress$inboundSchema,
  PropertyAccountingContactShippingAddress$Outbound,
  PropertyAccountingContactShippingAddress$outboundSchema,
} from "./propertyaccountingcontactshippingaddress.js";

export const TaxExemption = {
  FederalGov: "FEDERAL_GOV",
  RegionGov: "REGION_GOV",
  LocalGov: "LOCAL_GOV",
  TribalGov: "TRIBAL_GOV",
  CharitableOrg: "CHARITABLE_ORG",
  ReligiousOrg: "RELIGIOUS_ORG",
  EducationalOrg: "EDUCATIONAL_ORG",
  MedicalOrg: "MEDICAL_ORG",
  Resale: "RESALE",
  Foreign: "FOREIGN",
  Other: "OTHER",
} as const;
export type TaxExemption = OpenEnum<typeof TaxExemption>;

export type AccountingContact = {
  associatedContacts?: Array<AccountingAssociatedContact> | undefined;
  billingAddress?: PropertyAccountingContactBillingAddress | undefined;
  companyName?: string | undefined;
  createdAt?: Date | undefined;
  currency?: string | undefined;
  emails?: Array<AccountingEmail> | undefined;
  id?: string | undefined;
  identification?: string | undefined;
  isActive?: boolean | undefined;
  isCustomer?: boolean | undefined;
  isSupplier?: boolean | undefined;
  name?: string | undefined;
  paymentMethods?: Array<AccountingContactPaymentMethod> | undefined;
  portalUrl?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  shippingAddress?: PropertyAccountingContactShippingAddress | undefined;
  taxExemption?: TaxExemption | undefined;
  taxNumber?: string | undefined;
  telephones?: Array<AccountingTelephone> | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const TaxExemption$inboundSchema: z.ZodType<
  TaxExemption,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaxExemption),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaxExemption$outboundSchema: z.ZodType<
  TaxExemption,
  z.ZodTypeDef,
  TaxExemption
> = z.union([
  z.nativeEnum(TaxExemption),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxExemption$ {
  /** @deprecated use `TaxExemption$inboundSchema` instead. */
  export const inboundSchema = TaxExemption$inboundSchema;
  /** @deprecated use `TaxExemption$outboundSchema` instead. */
  export const outboundSchema = TaxExemption$outboundSchema;
}

/** @internal */
export const AccountingContact$inboundSchema: z.ZodType<
  AccountingContact,
  z.ZodTypeDef,
  unknown
> = z.object({
  associated_contacts: z.array(AccountingAssociatedContact$inboundSchema)
    .optional(),
  billing_address: PropertyAccountingContactBillingAddress$inboundSchema
    .optional(),
  company_name: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  currency: z.string().default("USD"),
  emails: z.array(AccountingEmail$inboundSchema).optional(),
  id: z.string().optional(),
  identification: z.string().optional(),
  is_active: z.boolean().optional(),
  is_customer: z.boolean().optional(),
  is_supplier: z.boolean().optional(),
  name: z.string().optional(),
  payment_methods: z.array(AccountingContactPaymentMethod$inboundSchema)
    .optional(),
  portal_url: z.string().optional(),
  raw: z.record(z.any()).optional(),
  shipping_address: PropertyAccountingContactShippingAddress$inboundSchema
    .optional(),
  tax_exemption: TaxExemption$inboundSchema.optional(),
  tax_number: z.string().optional(),
  telephones: z.array(AccountingTelephone$inboundSchema).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "associated_contacts": "associatedContacts",
    "billing_address": "billingAddress",
    "company_name": "companyName",
    "created_at": "createdAt",
    "is_active": "isActive",
    "is_customer": "isCustomer",
    "is_supplier": "isSupplier",
    "payment_methods": "paymentMethods",
    "portal_url": "portalUrl",
    "shipping_address": "shippingAddress",
    "tax_exemption": "taxExemption",
    "tax_number": "taxNumber",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AccountingContact$Outbound = {
  associated_contacts?: Array<AccountingAssociatedContact$Outbound> | undefined;
  billing_address?:
    | PropertyAccountingContactBillingAddress$Outbound
    | undefined;
  company_name?: string | undefined;
  created_at?: string | undefined;
  currency: string;
  emails?: Array<AccountingEmail$Outbound> | undefined;
  id?: string | undefined;
  identification?: string | undefined;
  is_active?: boolean | undefined;
  is_customer?: boolean | undefined;
  is_supplier?: boolean | undefined;
  name?: string | undefined;
  payment_methods?: Array<AccountingContactPaymentMethod$Outbound> | undefined;
  portal_url?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  shipping_address?:
    | PropertyAccountingContactShippingAddress$Outbound
    | undefined;
  tax_exemption?: string | undefined;
  tax_number?: string | undefined;
  telephones?: Array<AccountingTelephone$Outbound> | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const AccountingContact$outboundSchema: z.ZodType<
  AccountingContact$Outbound,
  z.ZodTypeDef,
  AccountingContact
> = z.object({
  associatedContacts: z.array(AccountingAssociatedContact$outboundSchema)
    .optional(),
  billingAddress: PropertyAccountingContactBillingAddress$outboundSchema
    .optional(),
  companyName: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  currency: z.string().default("USD"),
  emails: z.array(AccountingEmail$outboundSchema).optional(),
  id: z.string().optional(),
  identification: z.string().optional(),
  isActive: z.boolean().optional(),
  isCustomer: z.boolean().optional(),
  isSupplier: z.boolean().optional(),
  name: z.string().optional(),
  paymentMethods: z.array(AccountingContactPaymentMethod$outboundSchema)
    .optional(),
  portalUrl: z.string().optional(),
  raw: z.record(z.any()).optional(),
  shippingAddress: PropertyAccountingContactShippingAddress$outboundSchema
    .optional(),
  taxExemption: TaxExemption$outboundSchema.optional(),
  taxNumber: z.string().optional(),
  telephones: z.array(AccountingTelephone$outboundSchema).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    associatedContacts: "associated_contacts",
    billingAddress: "billing_address",
    companyName: "company_name",
    createdAt: "created_at",
    isActive: "is_active",
    isCustomer: "is_customer",
    isSupplier: "is_supplier",
    paymentMethods: "payment_methods",
    portalUrl: "portal_url",
    shippingAddress: "shipping_address",
    taxExemption: "tax_exemption",
    taxNumber: "tax_number",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingContact$ {
  /** @deprecated use `AccountingContact$inboundSchema` instead. */
  export const inboundSchema = AccountingContact$inboundSchema;
  /** @deprecated use `AccountingContact$outboundSchema` instead. */
  export const outboundSchema = AccountingContact$outboundSchema;
  /** @deprecated use `AccountingContact$Outbound` instead. */
  export type Outbound = AccountingContact$Outbound;
}

export function accountingContactToJSON(
  accountingContact: AccountingContact,
): string {
  return JSON.stringify(
    AccountingContact$outboundSchema.parse(accountingContact),
  );
}

export function accountingContactFromJSON(
  jsonString: string,
): SafeParseResult<AccountingContact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingContact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingContact' from JSON`,
  );
}
