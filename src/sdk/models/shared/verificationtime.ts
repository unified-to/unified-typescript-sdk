/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VerificationTime = {
  milliseconds?: number | undefined;
  /**
   * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
   */
  validRegions?: Array<string> | undefined;
};

/** @internal */
export const VerificationTime$inboundSchema: z.ZodType<
  VerificationTime,
  z.ZodTypeDef,
  unknown
> = z.object({
  milliseconds: z.number().optional(),
  valid_regions: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "valid_regions": "validRegions",
  });
});

/** @internal */
export type VerificationTime$Outbound = {
  milliseconds?: number | undefined;
  valid_regions?: Array<string> | undefined;
};

/** @internal */
export const VerificationTime$outboundSchema: z.ZodType<
  VerificationTime$Outbound,
  z.ZodTypeDef,
  VerificationTime
> = z.object({
  milliseconds: z.number().optional(),
  validRegions: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    validRegions: "valid_regions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerificationTime$ {
  /** @deprecated use `VerificationTime$inboundSchema` instead. */
  export const inboundSchema = VerificationTime$inboundSchema;
  /** @deprecated use `VerificationTime$outboundSchema` instead. */
  export const outboundSchema = VerificationTime$outboundSchema;
  /** @deprecated use `VerificationTime$Outbound` instead. */
  export type Outbound = VerificationTime$Outbound;
}

export function verificationTimeToJSON(
  verificationTime: VerificationTime,
): string {
  return JSON.stringify(
    VerificationTime$outboundSchema.parse(verificationTime),
  );
}

export function verificationTimeFromJSON(
  jsonString: string,
): SafeParseResult<VerificationTime, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerificationTime$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerificationTime' from JSON`,
  );
}
