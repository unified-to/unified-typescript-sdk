/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CrmEventFormOption,
  CrmEventFormOption$inboundSchema,
  CrmEventFormOption$Outbound,
  CrmEventFormOption$outboundSchema,
} from "./crmeventformoption.js";

export const CrmEventFormFieldType = {
  Text: "TEXT",
  Number: "NUMBER",
  Date: "DATE",
  Boolean: "BOOLEAN",
  MultipleChoice: "MULTIPLE_CHOICE",
  File: "FILE",
  Textarea: "TEXTAREA",
  SingleSelect: "SINGLE_SELECT",
  MultipleSelect: "MULTIPLE_SELECT",
  Email: "EMAIL",
  Phone: "PHONE",
  YesNo: "YES_NO",
  Currency: "CURRENCY",
  Url: "URL",
} as const;
export type CrmEventFormFieldType = OpenEnum<typeof CrmEventFormFieldType>;

export type CrmEventFormField = {
  name?: string | undefined;
  options?: Array<CrmEventFormOption> | undefined;
  required?: boolean | undefined;
  type?: CrmEventFormFieldType | undefined;
};

/** @internal */
export const CrmEventFormFieldType$inboundSchema: z.ZodType<
  CrmEventFormFieldType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CrmEventFormFieldType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CrmEventFormFieldType$outboundSchema: z.ZodType<
  CrmEventFormFieldType,
  z.ZodTypeDef,
  CrmEventFormFieldType
> = z.union([
  z.nativeEnum(CrmEventFormFieldType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmEventFormFieldType$ {
  /** @deprecated use `CrmEventFormFieldType$inboundSchema` instead. */
  export const inboundSchema = CrmEventFormFieldType$inboundSchema;
  /** @deprecated use `CrmEventFormFieldType$outboundSchema` instead. */
  export const outboundSchema = CrmEventFormFieldType$outboundSchema;
}

/** @internal */
export const CrmEventFormField$inboundSchema: z.ZodType<
  CrmEventFormField,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  options: z.array(CrmEventFormOption$inboundSchema).optional(),
  required: z.boolean().optional(),
  type: CrmEventFormFieldType$inboundSchema.optional(),
});

/** @internal */
export type CrmEventFormField$Outbound = {
  name?: string | undefined;
  options?: Array<CrmEventFormOption$Outbound> | undefined;
  required?: boolean | undefined;
  type?: string | undefined;
};

/** @internal */
export const CrmEventFormField$outboundSchema: z.ZodType<
  CrmEventFormField$Outbound,
  z.ZodTypeDef,
  CrmEventFormField
> = z.object({
  name: z.string().optional(),
  options: z.array(CrmEventFormOption$outboundSchema).optional(),
  required: z.boolean().optional(),
  type: CrmEventFormFieldType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmEventFormField$ {
  /** @deprecated use `CrmEventFormField$inboundSchema` instead. */
  export const inboundSchema = CrmEventFormField$inboundSchema;
  /** @deprecated use `CrmEventFormField$outboundSchema` instead. */
  export const outboundSchema = CrmEventFormField$outboundSchema;
  /** @deprecated use `CrmEventFormField$Outbound` instead. */
  export type Outbound = CrmEventFormField$Outbound;
}

export function crmEventFormFieldToJSON(
  crmEventFormField: CrmEventFormField,
): string {
  return JSON.stringify(
    CrmEventFormField$outboundSchema.parse(crmEventFormField),
  );
}

export function crmEventFormFieldFromJSON(
  jsonString: string,
): SafeParseResult<CrmEventFormField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmEventFormField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmEventFormField' from JSON`,
  );
}
