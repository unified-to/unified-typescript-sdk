/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AtsCandidateEducation,
  AtsCandidateEducation$inboundSchema,
  AtsCandidateEducation$Outbound,
  AtsCandidateEducation$outboundSchema,
} from "./atscandidateeducation.js";
import {
  AtsCandidateExperience,
  AtsCandidateExperience$inboundSchema,
  AtsCandidateExperience$Outbound,
  AtsCandidateExperience$outboundSchema,
} from "./atscandidateexperience.js";
import {
  AtsEmail,
  AtsEmail$inboundSchema,
  AtsEmail$Outbound,
  AtsEmail$outboundSchema,
} from "./atsemail.js";
import {
  AtsMetadata,
  AtsMetadata$inboundSchema,
  AtsMetadata$Outbound,
  AtsMetadata$outboundSchema,
} from "./atsmetadata.js";
import {
  AtsTelephone,
  AtsTelephone$inboundSchema,
  AtsTelephone$Outbound,
  AtsTelephone$outboundSchema,
} from "./atstelephone.js";
import {
  PropertyAtsCandidateAddress,
  PropertyAtsCandidateAddress$inboundSchema,
  PropertyAtsCandidateAddress$Outbound,
  PropertyAtsCandidateAddress$outboundSchema,
} from "./propertyatscandidateaddress.js";

export const Origin = {
  Agency: "AGENCY",
  Applied: "APPLIED",
  Internal: "INTERNAL",
  Referred: "REFERRED",
  Sourced: "SOURCED",
  University: "UNIVERSITY",
} as const;
export type Origin = OpenEnum<typeof Origin>;

export type AtsCandidate = {
  address?: PropertyAtsCandidateAddress | undefined;
  companyId?: string | undefined;
  companyName?: string | undefined;
  createdAt?: Date | undefined;
  dateOfBirth?: Date | undefined;
  education?: Array<AtsCandidateEducation> | undefined;
  emails?: Array<AtsEmail> | undefined;
  experiences?: Array<AtsCandidateExperience> | undefined;
  externalIdentifier?: string | undefined;
  id?: string | undefined;
  imageUrl?: string | undefined;
  /**
   * URLs for web pages containing additional material about the candidate (LinkedIn, other social media, articles, etc.)
   */
  linkUrls?: Array<string> | undefined;
  metadata?: Array<AtsMetadata> | undefined;
  name?: string | undefined;
  origin?: Origin | undefined;
  raw?: { [k: string]: any } | undefined;
  skills?: Array<string> | undefined;
  sources?: Array<string> | undefined;
  tags?: Array<string> | undefined;
  telephones?: Array<AtsTelephone> | undefined;
  title?: string | undefined;
  updatedAt?: Date | undefined;
  userId?: string | undefined;
  webUrl?: string | undefined;
};

/** @internal */
export const Origin$inboundSchema: z.ZodType<Origin, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Origin),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Origin$outboundSchema: z.ZodType<Origin, z.ZodTypeDef, Origin> = z
  .union([
    z.nativeEnum(Origin),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Origin$ {
  /** @deprecated use `Origin$inboundSchema` instead. */
  export const inboundSchema = Origin$inboundSchema;
  /** @deprecated use `Origin$outboundSchema` instead. */
  export const outboundSchema = Origin$outboundSchema;
}

/** @internal */
export const AtsCandidate$inboundSchema: z.ZodType<
  AtsCandidate,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: PropertyAtsCandidateAddress$inboundSchema.optional(),
  company_id: z.string().optional(),
  company_name: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  date_of_birth: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  education: z.array(AtsCandidateEducation$inboundSchema).optional(),
  emails: z.array(AtsEmail$inboundSchema).optional(),
  experiences: z.array(AtsCandidateExperience$inboundSchema).optional(),
  external_identifier: z.string().optional(),
  id: z.string().optional(),
  image_url: z.string().optional(),
  link_urls: z.array(z.string()).optional(),
  metadata: z.array(AtsMetadata$inboundSchema).optional(),
  name: z.string().optional(),
  origin: Origin$inboundSchema.optional(),
  raw: z.record(z.any()).optional(),
  skills: z.array(z.string()).optional(),
  sources: z.array(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  telephones: z.array(AtsTelephone$inboundSchema).optional(),
  title: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_id: z.string().optional(),
  web_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "company_name": "companyName",
    "created_at": "createdAt",
    "date_of_birth": "dateOfBirth",
    "external_identifier": "externalIdentifier",
    "image_url": "imageUrl",
    "link_urls": "linkUrls",
    "updated_at": "updatedAt",
    "user_id": "userId",
    "web_url": "webUrl",
  });
});

/** @internal */
export type AtsCandidate$Outbound = {
  address?: PropertyAtsCandidateAddress$Outbound | undefined;
  company_id?: string | undefined;
  company_name?: string | undefined;
  created_at?: string | undefined;
  date_of_birth?: string | undefined;
  education?: Array<AtsCandidateEducation$Outbound> | undefined;
  emails?: Array<AtsEmail$Outbound> | undefined;
  experiences?: Array<AtsCandidateExperience$Outbound> | undefined;
  external_identifier?: string | undefined;
  id?: string | undefined;
  image_url?: string | undefined;
  link_urls?: Array<string> | undefined;
  metadata?: Array<AtsMetadata$Outbound> | undefined;
  name?: string | undefined;
  origin?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  skills?: Array<string> | undefined;
  sources?: Array<string> | undefined;
  tags?: Array<string> | undefined;
  telephones?: Array<AtsTelephone$Outbound> | undefined;
  title?: string | undefined;
  updated_at?: string | undefined;
  user_id?: string | undefined;
  web_url?: string | undefined;
};

/** @internal */
export const AtsCandidate$outboundSchema: z.ZodType<
  AtsCandidate$Outbound,
  z.ZodTypeDef,
  AtsCandidate
> = z.object({
  address: PropertyAtsCandidateAddress$outboundSchema.optional(),
  companyId: z.string().optional(),
  companyName: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  dateOfBirth: z.date().transform(v => v.toISOString()).optional(),
  education: z.array(AtsCandidateEducation$outboundSchema).optional(),
  emails: z.array(AtsEmail$outboundSchema).optional(),
  experiences: z.array(AtsCandidateExperience$outboundSchema).optional(),
  externalIdentifier: z.string().optional(),
  id: z.string().optional(),
  imageUrl: z.string().optional(),
  linkUrls: z.array(z.string()).optional(),
  metadata: z.array(AtsMetadata$outboundSchema).optional(),
  name: z.string().optional(),
  origin: Origin$outboundSchema.optional(),
  raw: z.record(z.any()).optional(),
  skills: z.array(z.string()).optional(),
  sources: z.array(z.string()).optional(),
  tags: z.array(z.string()).optional(),
  telephones: z.array(AtsTelephone$outboundSchema).optional(),
  title: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userId: z.string().optional(),
  webUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    companyName: "company_name",
    createdAt: "created_at",
    dateOfBirth: "date_of_birth",
    externalIdentifier: "external_identifier",
    imageUrl: "image_url",
    linkUrls: "link_urls",
    updatedAt: "updated_at",
    userId: "user_id",
    webUrl: "web_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsCandidate$ {
  /** @deprecated use `AtsCandidate$inboundSchema` instead. */
  export const inboundSchema = AtsCandidate$inboundSchema;
  /** @deprecated use `AtsCandidate$outboundSchema` instead. */
  export const outboundSchema = AtsCandidate$outboundSchema;
  /** @deprecated use `AtsCandidate$Outbound` instead. */
  export type Outbound = AtsCandidate$Outbound;
}

export function atsCandidateToJSON(atsCandidate: AtsCandidate): string {
  return JSON.stringify(AtsCandidate$outboundSchema.parse(atsCandidate));
}

export function atsCandidateFromJSON(
  jsonString: string,
): SafeParseResult<AtsCandidate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsCandidate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsCandidate' from JSON`,
  );
}
