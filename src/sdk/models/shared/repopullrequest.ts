/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RepoPullrequestStatus = {
  Pending: "PENDING",
  Approved: "APPROVED",
  Rejected: "REJECTED",
} as const;
export type RepoPullrequestStatus = ClosedEnum<typeof RepoPullrequestStatus>;

export type RepoPullrequest = {
  closedAt?: Date | undefined;
  commitIds?: Array<string> | undefined;
  createdAt?: Date | undefined;
  id?: string | undefined;
  labels?: Array<string> | undefined;
  raw?: { [k: string]: any } | undefined;
  repoId?: string | undefined;
  status?: RepoPullrequestStatus | undefined;
  updatedAt?: Date | undefined;
  userIds?: Array<string> | undefined;
};

/** @internal */
export const RepoPullrequestStatus$inboundSchema: z.ZodNativeEnum<
  typeof RepoPullrequestStatus
> = z.nativeEnum(RepoPullrequestStatus);

/** @internal */
export const RepoPullrequestStatus$outboundSchema: z.ZodNativeEnum<
  typeof RepoPullrequestStatus
> = RepoPullrequestStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepoPullrequestStatus$ {
  /** @deprecated use `RepoPullrequestStatus$inboundSchema` instead. */
  export const inboundSchema = RepoPullrequestStatus$inboundSchema;
  /** @deprecated use `RepoPullrequestStatus$outboundSchema` instead. */
  export const outboundSchema = RepoPullrequestStatus$outboundSchema;
}

/** @internal */
export const RepoPullrequest$inboundSchema: z.ZodType<
  RepoPullrequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  closed_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  commit_ids: z.array(z.string()).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  id: z.string().optional(),
  labels: z.array(z.string()).optional(),
  raw: z.record(z.any()).optional(),
  repo_id: z.string().optional(),
  status: RepoPullrequestStatus$inboundSchema.optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "closed_at": "closedAt",
    "commit_ids": "commitIds",
    "created_at": "createdAt",
    "repo_id": "repoId",
    "updated_at": "updatedAt",
    "user_ids": "userIds",
  });
});

/** @internal */
export type RepoPullrequest$Outbound = {
  closed_at?: string | undefined;
  commit_ids?: Array<string> | undefined;
  created_at?: string | undefined;
  id?: string | undefined;
  labels?: Array<string> | undefined;
  raw?: { [k: string]: any } | undefined;
  repo_id?: string | undefined;
  status?: string | undefined;
  updated_at?: string | undefined;
  user_ids?: Array<string> | undefined;
};

/** @internal */
export const RepoPullrequest$outboundSchema: z.ZodType<
  RepoPullrequest$Outbound,
  z.ZodTypeDef,
  RepoPullrequest
> = z.object({
  closedAt: z.date().transform(v => v.toISOString()).optional(),
  commitIds: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  id: z.string().optional(),
  labels: z.array(z.string()).optional(),
  raw: z.record(z.any()).optional(),
  repoId: z.string().optional(),
  status: RepoPullrequestStatus$outboundSchema.optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    closedAt: "closed_at",
    commitIds: "commit_ids",
    createdAt: "created_at",
    repoId: "repo_id",
    updatedAt: "updated_at",
    userIds: "user_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepoPullrequest$ {
  /** @deprecated use `RepoPullrequest$inboundSchema` instead. */
  export const inboundSchema = RepoPullrequest$inboundSchema;
  /** @deprecated use `RepoPullrequest$outboundSchema` instead. */
  export const outboundSchema = RepoPullrequest$outboundSchema;
  /** @deprecated use `RepoPullrequest$Outbound` instead. */
  export type Outbound = RepoPullrequest$Outbound;
}

export function repoPullrequestToJSON(
  repoPullrequest: RepoPullrequest,
): string {
  return JSON.stringify(RepoPullrequest$outboundSchema.parse(repoPullrequest));
}

export function repoPullrequestFromJSON(
  jsonString: string,
): SafeParseResult<RepoPullrequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RepoPullrequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RepoPullrequest' from JSON`,
  );
}
