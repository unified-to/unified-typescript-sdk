/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

/**
 * Mailing List
 */
export type MarketingList = {
    createdAt?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    /**
     * The raw data returned by the integration for this list
     */
    raw?: { [k: string]: any } | undefined;
    updatedAt?: Date | undefined;
};

/** @internal */
export const MarketingList$inboundSchema: z.ZodType<MarketingList, z.ZodTypeDef, unknown> = z
    .object({
        created_at: z.string().optional(),
        id: z.string().optional(),
        name: z.string().optional(),
        raw: z.record(z.any()).optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type MarketingList$Outbound = {
    created_at?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    raw?: { [k: string]: any } | undefined;
    updated_at?: string | undefined;
};

/** @internal */
export const MarketingList$outboundSchema: z.ZodType<
    MarketingList$Outbound,
    z.ZodTypeDef,
    MarketingList
> = z
    .object({
        createdAt: z.string().optional(),
        id: z.string().optional(),
        name: z.string().optional(),
        raw: z.record(z.any()).optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingList$ {
    /** @deprecated use `MarketingList$inboundSchema` instead. */
    export const inboundSchema = MarketingList$inboundSchema;
    /** @deprecated use `MarketingList$outboundSchema` instead. */
    export const outboundSchema = MarketingList$outboundSchema;
    /** @deprecated use `MarketingList$Outbound` instead. */
    export type Outbound = MarketingList$Outbound;
}
