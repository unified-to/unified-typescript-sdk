/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TaskComment = {
  createdAt?: Date | undefined;
  id?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  taskId: string;
  text: string;
  updatedAt?: Date | undefined;
  userId?: string | undefined;
  userName?: string | undefined;
};

/** @internal */
export const TaskComment$inboundSchema: z.ZodType<
  TaskComment,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  id: z.string().optional(),
  raw: z.record(z.any()).optional(),
  task_id: z.string(),
  text: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_id: z.string().optional(),
  user_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "task_id": "taskId",
    "updated_at": "updatedAt",
    "user_id": "userId",
    "user_name": "userName",
  });
});

/** @internal */
export type TaskComment$Outbound = {
  created_at?: string | undefined;
  id?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  task_id: string;
  text: string;
  updated_at?: string | undefined;
  user_id?: string | undefined;
  user_name?: string | undefined;
};

/** @internal */
export const TaskComment$outboundSchema: z.ZodType<
  TaskComment$Outbound,
  z.ZodTypeDef,
  TaskComment
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  id: z.string().optional(),
  raw: z.record(z.any()).optional(),
  taskId: z.string(),
  text: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userId: z.string().optional(),
  userName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    taskId: "task_id",
    updatedAt: "updated_at",
    userId: "user_id",
    userName: "user_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskComment$ {
  /** @deprecated use `TaskComment$inboundSchema` instead. */
  export const inboundSchema = TaskComment$inboundSchema;
  /** @deprecated use `TaskComment$outboundSchema` instead. */
  export const outboundSchema = TaskComment$outboundSchema;
  /** @deprecated use `TaskComment$Outbound` instead. */
  export type Outbound = TaskComment$Outbound;
}

export function taskCommentToJSON(taskComment: TaskComment): string {
  return JSON.stringify(TaskComment$outboundSchema.parse(taskComment));
}

export function taskCommentFromJSON(
  jsonString: string,
): SafeParseResult<TaskComment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskComment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskComment' from JSON`,
  );
}
