/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GenaiEmbeddingContent = {
  text: string;
};

/** @internal */
export const GenaiEmbeddingContent$inboundSchema: z.ZodType<
  GenaiEmbeddingContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
});

/** @internal */
export type GenaiEmbeddingContent$Outbound = {
  text: string;
};

/** @internal */
export const GenaiEmbeddingContent$outboundSchema: z.ZodType<
  GenaiEmbeddingContent$Outbound,
  z.ZodTypeDef,
  GenaiEmbeddingContent
> = z.object({
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenaiEmbeddingContent$ {
  /** @deprecated use `GenaiEmbeddingContent$inboundSchema` instead. */
  export const inboundSchema = GenaiEmbeddingContent$inboundSchema;
  /** @deprecated use `GenaiEmbeddingContent$outboundSchema` instead. */
  export const outboundSchema = GenaiEmbeddingContent$outboundSchema;
  /** @deprecated use `GenaiEmbeddingContent$Outbound` instead. */
  export type Outbound = GenaiEmbeddingContent$Outbound;
}

export function genaiEmbeddingContentToJSON(
  genaiEmbeddingContent: GenaiEmbeddingContent,
): string {
  return JSON.stringify(
    GenaiEmbeddingContent$outboundSchema.parse(genaiEmbeddingContent),
  );
}

export function genaiEmbeddingContentFromJSON(
  jsonString: string,
): SafeParseResult<GenaiEmbeddingContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenaiEmbeddingContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenaiEmbeddingContent' from JSON`,
  );
}
