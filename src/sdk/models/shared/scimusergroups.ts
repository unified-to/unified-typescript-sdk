/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const ScimUserGroupsType = {
  Direct: "direct",
  Indirect: "indirect",
} as const;
export type ScimUserGroupsType = ClosedEnum<typeof ScimUserGroupsType>;

export type ScimUserGroups = {
  dollarRef?: string | undefined;
  display?: string | undefined;
  type?: ScimUserGroupsType | undefined;
  value: string;
};

/** @internal */
export const ScimUserGroupsType$inboundSchema: z.ZodNativeEnum<
  typeof ScimUserGroupsType
> = z.nativeEnum(ScimUserGroupsType);

/** @internal */
export const ScimUserGroupsType$outboundSchema: z.ZodNativeEnum<
  typeof ScimUserGroupsType
> = ScimUserGroupsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScimUserGroupsType$ {
  /** @deprecated use `ScimUserGroupsType$inboundSchema` instead. */
  export const inboundSchema = ScimUserGroupsType$inboundSchema;
  /** @deprecated use `ScimUserGroupsType$outboundSchema` instead. */
  export const outboundSchema = ScimUserGroupsType$outboundSchema;
}

/** @internal */
export const ScimUserGroups$inboundSchema: z.ZodType<
  ScimUserGroups,
  z.ZodTypeDef,
  unknown
> = z.object({
  $ref: z.string().optional(),
  display: z.string().optional(),
  type: ScimUserGroupsType$inboundSchema.optional(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "$ref": "dollarRef",
  });
});

/** @internal */
export type ScimUserGroups$Outbound = {
  $ref?: string | undefined;
  display?: string | undefined;
  type?: string | undefined;
  value: string;
};

/** @internal */
export const ScimUserGroups$outboundSchema: z.ZodType<
  ScimUserGroups$Outbound,
  z.ZodTypeDef,
  ScimUserGroups
> = z.object({
  dollarRef: z.string().optional(),
  display: z.string().optional(),
  type: ScimUserGroupsType$outboundSchema.optional(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    dollarRef: "$ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScimUserGroups$ {
  /** @deprecated use `ScimUserGroups$inboundSchema` instead. */
  export const inboundSchema = ScimUserGroups$inboundSchema;
  /** @deprecated use `ScimUserGroups$outboundSchema` instead. */
  export const outboundSchema = ScimUserGroups$outboundSchema;
  /** @deprecated use `ScimUserGroups$Outbound` instead. */
  export type Outbound = ScimUserGroups$Outbound;
}
