/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import {
    IntegrationSupport,
    IntegrationSupport$inboundSchema,
    IntegrationSupport$Outbound,
    IntegrationSupport$outboundSchema,
} from "./integrationsupport.js";
import {
    PropertyIntegrationCategories,
    PropertyIntegrationCategories$inboundSchema,
    PropertyIntegrationCategories$outboundSchema,
} from "./propertyintegrationcategories.js";
import * as z from "zod";

/**
 * Informational object for supported integrations.
 */
export type Integration = {
    activeHealthyConnections?: number | undefined;
    api?: { [k: string]: any } | undefined;
    apiDocsUrl?: string | undefined;
    beta?: boolean | undefined;
    /**
     * The categories of support solutions that this integration has
     */
    categories: Array<PropertyIntegrationCategories>;
    color?: string | undefined;
    createdAt?: string | undefined;
    description?: string | undefined;
    faIcon?: string | undefined;
    featured?: boolean | undefined;
    inProgress: boolean;
    isActive?: boolean | undefined;
    logoUrl?: string | undefined;
    name: string;
    popularity?: number | undefined;
    rateLimitDescription?: string | undefined;
    support?: { [k: string]: IntegrationSupport } | undefined;
    testedAt?: Date | undefined;
    textColor?: string | undefined;
    /**
     * instructions for the user on how to find the token/key
     */
    tokenInstructions?: Array<string> | undefined;
    /**
     * if auth_types = 'token'
     */
    tokenNames?: Array<string> | undefined;
    type: string;
    updatedAt?: string | undefined;
    webUrl?: string | undefined;
};

/** @internal */
export const Integration$inboundSchema: z.ZodType<Integration, z.ZodTypeDef, unknown> = z
    .object({
        active_healthy_connections: z.number().optional(),
        api: z.record(z.any()).optional(),
        api_docs_url: z.string().optional(),
        beta: z.boolean().optional(),
        categories: z.array(PropertyIntegrationCategories$inboundSchema),
        color: z.string().optional(),
        created_at: z.string().optional(),
        description: z.string().optional(),
        fa_icon: z.string().optional(),
        featured: z.boolean().optional(),
        in_progress: z.boolean(),
        is_active: z.boolean().optional(),
        logo_url: z.string().optional(),
        name: z.string(),
        popularity: z.number().optional(),
        rate_limit_description: z.string().optional(),
        support: z.record(IntegrationSupport$inboundSchema).optional(),
        tested_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        text_color: z.string().optional(),
        token_instructions: z.array(z.string()).optional(),
        token_names: z.array(z.string()).optional(),
        type: z.string(),
        updated_at: z.string().optional(),
        web_url: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            active_healthy_connections: "activeHealthyConnections",
            api_docs_url: "apiDocsUrl",
            created_at: "createdAt",
            fa_icon: "faIcon",
            in_progress: "inProgress",
            is_active: "isActive",
            logo_url: "logoUrl",
            rate_limit_description: "rateLimitDescription",
            tested_at: "testedAt",
            text_color: "textColor",
            token_instructions: "tokenInstructions",
            token_names: "tokenNames",
            updated_at: "updatedAt",
            web_url: "webUrl",
        });
    });

/** @internal */
export type Integration$Outbound = {
    active_healthy_connections?: number | undefined;
    api?: { [k: string]: any } | undefined;
    api_docs_url?: string | undefined;
    beta?: boolean | undefined;
    categories: Array<string>;
    color?: string | undefined;
    created_at?: string | undefined;
    description?: string | undefined;
    fa_icon?: string | undefined;
    featured?: boolean | undefined;
    in_progress: boolean;
    is_active?: boolean | undefined;
    logo_url?: string | undefined;
    name: string;
    popularity?: number | undefined;
    rate_limit_description?: string | undefined;
    support?: { [k: string]: IntegrationSupport$Outbound } | undefined;
    tested_at?: string | undefined;
    text_color?: string | undefined;
    token_instructions?: Array<string> | undefined;
    token_names?: Array<string> | undefined;
    type: string;
    updated_at?: string | undefined;
    web_url?: string | undefined;
};

/** @internal */
export const Integration$outboundSchema: z.ZodType<
    Integration$Outbound,
    z.ZodTypeDef,
    Integration
> = z
    .object({
        activeHealthyConnections: z.number().optional(),
        api: z.record(z.any()).optional(),
        apiDocsUrl: z.string().optional(),
        beta: z.boolean().optional(),
        categories: z.array(PropertyIntegrationCategories$outboundSchema),
        color: z.string().optional(),
        createdAt: z.string().optional(),
        description: z.string().optional(),
        faIcon: z.string().optional(),
        featured: z.boolean().optional(),
        inProgress: z.boolean(),
        isActive: z.boolean().optional(),
        logoUrl: z.string().optional(),
        name: z.string(),
        popularity: z.number().optional(),
        rateLimitDescription: z.string().optional(),
        support: z.record(IntegrationSupport$outboundSchema).optional(),
        testedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        textColor: z.string().optional(),
        tokenInstructions: z.array(z.string()).optional(),
        tokenNames: z.array(z.string()).optional(),
        type: z.string(),
        updatedAt: z.string().optional(),
        webUrl: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            activeHealthyConnections: "active_healthy_connections",
            apiDocsUrl: "api_docs_url",
            createdAt: "created_at",
            faIcon: "fa_icon",
            inProgress: "in_progress",
            isActive: "is_active",
            logoUrl: "logo_url",
            rateLimitDescription: "rate_limit_description",
            testedAt: "tested_at",
            textColor: "text_color",
            tokenInstructions: "token_instructions",
            tokenNames: "token_names",
            updatedAt: "updated_at",
            webUrl: "web_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Integration$ {
    /** @deprecated use `Integration$inboundSchema` instead. */
    export const inboundSchema = Integration$inboundSchema;
    /** @deprecated use `Integration$outboundSchema` instead. */
    export const outboundSchema = Integration$outboundSchema;
    /** @deprecated use `Integration$Outbound` instead. */
    export type Outbound = Integration$Outbound;
}
