/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const HrisGroupType = {
  Team: "TEAM",
  Group: "GROUP",
  Department: "DEPARTMENT",
  Division: "DIVISION",
  BusinessUnit: "BUSINESS_UNIT",
  Branch: "BRANCH",
  SubDepartment: "SUB_DEPARTMENT",
} as const;
export type HrisGroupType = OpenEnum<typeof HrisGroupType>;

export type HrisGroup = {
  companyId?: string | undefined;
  createdAt?: Date | undefined;
  description?: string | undefined;
  id?: string | undefined;
  isActive?: boolean | undefined;
  managerIds?: Array<string> | undefined;
  name?: string | undefined;
  parentId?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  type?: HrisGroupType | undefined;
  updatedAt?: Date | undefined;
  userIds?: Array<string> | undefined;
};

/** @internal */
export const HrisGroupType$inboundSchema: z.ZodType<
  HrisGroupType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HrisGroupType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HrisGroupType$outboundSchema: z.ZodType<
  HrisGroupType,
  z.ZodTypeDef,
  HrisGroupType
> = z.union([
  z.nativeEnum(HrisGroupType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisGroupType$ {
  /** @deprecated use `HrisGroupType$inboundSchema` instead. */
  export const inboundSchema = HrisGroupType$inboundSchema;
  /** @deprecated use `HrisGroupType$outboundSchema` instead. */
  export const outboundSchema = HrisGroupType$outboundSchema;
}

/** @internal */
export const HrisGroup$inboundSchema: z.ZodType<
  HrisGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  manager_ids: z.array(z.string()).optional(),
  name: z.string().optional(),
  parent_id: z.string().optional(),
  raw: z.record(z.any()).optional(),
  type: HrisGroupType$inboundSchema.optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "created_at": "createdAt",
    "is_active": "isActive",
    "manager_ids": "managerIds",
    "parent_id": "parentId",
    "updated_at": "updatedAt",
    "user_ids": "userIds",
  });
});

/** @internal */
export type HrisGroup$Outbound = {
  company_id?: string | undefined;
  created_at?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  is_active?: boolean | undefined;
  manager_ids?: Array<string> | undefined;
  name?: string | undefined;
  parent_id?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  type?: string | undefined;
  updated_at?: string | undefined;
  user_ids?: Array<string> | undefined;
};

/** @internal */
export const HrisGroup$outboundSchema: z.ZodType<
  HrisGroup$Outbound,
  z.ZodTypeDef,
  HrisGroup
> = z.object({
  companyId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  isActive: z.boolean().optional(),
  managerIds: z.array(z.string()).optional(),
  name: z.string().optional(),
  parentId: z.string().optional(),
  raw: z.record(z.any()).optional(),
  type: HrisGroupType$outboundSchema.optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    createdAt: "created_at",
    isActive: "is_active",
    managerIds: "manager_ids",
    parentId: "parent_id",
    updatedAt: "updated_at",
    userIds: "user_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisGroup$ {
  /** @deprecated use `HrisGroup$inboundSchema` instead. */
  export const inboundSchema = HrisGroup$inboundSchema;
  /** @deprecated use `HrisGroup$outboundSchema` instead. */
  export const outboundSchema = HrisGroup$outboundSchema;
  /** @deprecated use `HrisGroup$Outbound` instead. */
  export type Outbound = HrisGroup$Outbound;
}

export function hrisGroupToJSON(hrisGroup: HrisGroup): string {
  return JSON.stringify(HrisGroup$outboundSchema.parse(hrisGroup));
}

export function hrisGroupFromJSON(
  jsonString: string,
): SafeParseResult<HrisGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisGroup' from JSON`,
  );
}
