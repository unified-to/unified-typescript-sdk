/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const TicketingTicketStatus = {
  Active: "ACTIVE",
  Closed: "CLOSED",
} as const;
export type TicketingTicketStatus = ClosedEnum<typeof TicketingTicketStatus>;

export type TicketingTicket = {
  category?: string | undefined;
  closedAt?: Date | undefined;
  createdAt?: Date | undefined;
  customerId?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  priority?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  source?: string | undefined;
  sourceRef?: string | undefined;
  status?: TicketingTicketStatus | undefined;
  subject?: string | undefined;
  tags?: Array<string> | undefined;
  updatedAt?: Date | undefined;
  url?: string | undefined;
  userId?: string | undefined;
};

/** @internal */
export const TicketingTicketStatus$inboundSchema: z.ZodNativeEnum<
  typeof TicketingTicketStatus
> = z.nativeEnum(TicketingTicketStatus);

/** @internal */
export const TicketingTicketStatus$outboundSchema: z.ZodNativeEnum<
  typeof TicketingTicketStatus
> = TicketingTicketStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicketStatus$ {
  /** @deprecated use `TicketingTicketStatus$inboundSchema` instead. */
  export const inboundSchema = TicketingTicketStatus$inboundSchema;
  /** @deprecated use `TicketingTicketStatus$outboundSchema` instead. */
  export const outboundSchema = TicketingTicketStatus$outboundSchema;
}

/** @internal */
export const TicketingTicket$inboundSchema: z.ZodType<
  TicketingTicket,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: z.string().optional(),
  closed_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  customer_id: z.string().optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  priority: z.string().optional(),
  raw: z.record(z.any()).optional(),
  source: z.string().optional(),
  source_ref: z.string().optional(),
  status: TicketingTicketStatus$inboundSchema.optional(),
  subject: z.string().optional(),
  tags: z.array(z.string()).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  url: z.string().optional(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "closed_at": "closedAt",
    "created_at": "createdAt",
    "customer_id": "customerId",
    "source_ref": "sourceRef",
    "updated_at": "updatedAt",
    "user_id": "userId",
  });
});

/** @internal */
export type TicketingTicket$Outbound = {
  category?: string | undefined;
  closed_at?: string | undefined;
  created_at?: string | undefined;
  customer_id?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  priority?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  source?: string | undefined;
  source_ref?: string | undefined;
  status?: string | undefined;
  subject?: string | undefined;
  tags?: Array<string> | undefined;
  updated_at?: string | undefined;
  url?: string | undefined;
  user_id?: string | undefined;
};

/** @internal */
export const TicketingTicket$outboundSchema: z.ZodType<
  TicketingTicket$Outbound,
  z.ZodTypeDef,
  TicketingTicket
> = z.object({
  category: z.string().optional(),
  closedAt: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  customerId: z.string().optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  priority: z.string().optional(),
  raw: z.record(z.any()).optional(),
  source: z.string().optional(),
  sourceRef: z.string().optional(),
  status: TicketingTicketStatus$outboundSchema.optional(),
  subject: z.string().optional(),
  tags: z.array(z.string()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  url: z.string().optional(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    closedAt: "closed_at",
    createdAt: "created_at",
    customerId: "customer_id",
    sourceRef: "source_ref",
    updatedAt: "updated_at",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingTicket$ {
  /** @deprecated use `TicketingTicket$inboundSchema` instead. */
  export const inboundSchema = TicketingTicket$inboundSchema;
  /** @deprecated use `TicketingTicket$outboundSchema` instead. */
  export const outboundSchema = TicketingTicket$outboundSchema;
  /** @deprecated use `TicketingTicket$Outbound` instead. */
  export type Outbound = TicketingTicket$Outbound;
}
