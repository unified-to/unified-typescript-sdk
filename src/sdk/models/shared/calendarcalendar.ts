/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CalendarCalendarRaw = {};

export type CalendarCalendar = {
  createdAt?: Date | undefined;
  description?: string | undefined;
  id?: string | undefined;
  name: string;
  primary?: boolean | undefined;
  raw?: CalendarCalendarRaw | undefined;
  timezone?: string | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const CalendarCalendarRaw$inboundSchema: z.ZodType<
  CalendarCalendarRaw,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CalendarCalendarRaw$Outbound = {};

/** @internal */
export const CalendarCalendarRaw$outboundSchema: z.ZodType<
  CalendarCalendarRaw$Outbound,
  z.ZodTypeDef,
  CalendarCalendarRaw
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CalendarCalendarRaw$ {
  /** @deprecated use `CalendarCalendarRaw$inboundSchema` instead. */
  export const inboundSchema = CalendarCalendarRaw$inboundSchema;
  /** @deprecated use `CalendarCalendarRaw$outboundSchema` instead. */
  export const outboundSchema = CalendarCalendarRaw$outboundSchema;
  /** @deprecated use `CalendarCalendarRaw$Outbound` instead. */
  export type Outbound = CalendarCalendarRaw$Outbound;
}

export function calendarCalendarRawToJSON(
  calendarCalendarRaw: CalendarCalendarRaw,
): string {
  return JSON.stringify(
    CalendarCalendarRaw$outboundSchema.parse(calendarCalendarRaw),
  );
}

export function calendarCalendarRawFromJSON(
  jsonString: string,
): SafeParseResult<CalendarCalendarRaw, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CalendarCalendarRaw$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CalendarCalendarRaw' from JSON`,
  );
}

/** @internal */
export const CalendarCalendar$inboundSchema: z.ZodType<
  CalendarCalendar,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  name: z.string(),
  primary: z.boolean().optional(),
  raw: z.lazy(() => CalendarCalendarRaw$inboundSchema).optional(),
  timezone: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type CalendarCalendar$Outbound = {
  created_at?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  name: string;
  primary?: boolean | undefined;
  raw?: CalendarCalendarRaw$Outbound | undefined;
  timezone?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const CalendarCalendar$outboundSchema: z.ZodType<
  CalendarCalendar$Outbound,
  z.ZodTypeDef,
  CalendarCalendar
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  name: z.string(),
  primary: z.boolean().optional(),
  raw: z.lazy(() => CalendarCalendarRaw$outboundSchema).optional(),
  timezone: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CalendarCalendar$ {
  /** @deprecated use `CalendarCalendar$inboundSchema` instead. */
  export const inboundSchema = CalendarCalendar$inboundSchema;
  /** @deprecated use `CalendarCalendar$outboundSchema` instead. */
  export const outboundSchema = CalendarCalendar$outboundSchema;
  /** @deprecated use `CalendarCalendar$Outbound` instead. */
  export type Outbound = CalendarCalendar$Outbound;
}

export function calendarCalendarToJSON(
  calendarCalendar: CalendarCalendar,
): string {
  return JSON.stringify(
    CalendarCalendar$outboundSchema.parse(calendarCalendar),
  );
}

export function calendarCalendarFromJSON(
  jsonString: string,
): SafeParseResult<CalendarCalendar, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CalendarCalendar$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CalendarCalendar' from JSON`,
  );
}
