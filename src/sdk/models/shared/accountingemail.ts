/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AccountingEmailType = {
  Work: "WORK",
  Home: "HOME",
  Other: "OTHER",
} as const;
export type AccountingEmailType = OpenEnum<typeof AccountingEmailType>;

export type AccountingEmail = {
  email?: string | undefined;
  type?: AccountingEmailType | undefined;
};

/** @internal */
export const AccountingEmailType$inboundSchema: z.ZodType<
  AccountingEmailType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AccountingEmailType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AccountingEmailType$outboundSchema: z.ZodType<
  AccountingEmailType,
  z.ZodTypeDef,
  AccountingEmailType
> = z.union([
  z.nativeEnum(AccountingEmailType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingEmailType$ {
  /** @deprecated use `AccountingEmailType$inboundSchema` instead. */
  export const inboundSchema = AccountingEmailType$inboundSchema;
  /** @deprecated use `AccountingEmailType$outboundSchema` instead. */
  export const outboundSchema = AccountingEmailType$outboundSchema;
}

/** @internal */
export const AccountingEmail$inboundSchema: z.ZodType<
  AccountingEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  type: AccountingEmailType$inboundSchema.optional(),
});

/** @internal */
export type AccountingEmail$Outbound = {
  email?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const AccountingEmail$outboundSchema: z.ZodType<
  AccountingEmail$Outbound,
  z.ZodTypeDef,
  AccountingEmail
> = z.object({
  email: z.string().optional(),
  type: AccountingEmailType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingEmail$ {
  /** @deprecated use `AccountingEmail$inboundSchema` instead. */
  export const inboundSchema = AccountingEmail$inboundSchema;
  /** @deprecated use `AccountingEmail$outboundSchema` instead. */
  export const outboundSchema = AccountingEmail$outboundSchema;
  /** @deprecated use `AccountingEmail$Outbound` instead. */
  export type Outbound = AccountingEmail$Outbound;
}

export function accountingEmailToJSON(
  accountingEmail: AccountingEmail,
): string {
  return JSON.stringify(AccountingEmail$outboundSchema.parse(accountingEmail));
}

export function accountingEmailFromJSON(
  jsonString: string,
): SafeParseResult<AccountingEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingEmail' from JSON`,
  );
}
