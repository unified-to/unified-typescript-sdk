/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VerificationParameterInput = {
  id?: string | undefined;
  inputs?: Array<string> | undefined;
  name?: string | undefined;
};

/** @internal */
export const VerificationParameterInput$inboundSchema: z.ZodType<
  VerificationParameterInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  inputs: z.array(z.string()).optional(),
  name: z.string().optional(),
});

/** @internal */
export type VerificationParameterInput$Outbound = {
  id?: string | undefined;
  inputs?: Array<string> | undefined;
  name?: string | undefined;
};

/** @internal */
export const VerificationParameterInput$outboundSchema: z.ZodType<
  VerificationParameterInput$Outbound,
  z.ZodTypeDef,
  VerificationParameterInput
> = z.object({
  id: z.string().optional(),
  inputs: z.array(z.string()).optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerificationParameterInput$ {
  /** @deprecated use `VerificationParameterInput$inboundSchema` instead. */
  export const inboundSchema = VerificationParameterInput$inboundSchema;
  /** @deprecated use `VerificationParameterInput$outboundSchema` instead. */
  export const outboundSchema = VerificationParameterInput$outboundSchema;
  /** @deprecated use `VerificationParameterInput$Outbound` instead. */
  export type Outbound = VerificationParameterInput$Outbound;
}

export function verificationParameterInputToJSON(
  verificationParameterInput: VerificationParameterInput,
): string {
  return JSON.stringify(
    VerificationParameterInput$outboundSchema.parse(verificationParameterInput),
  );
}

export function verificationParameterInputFromJSON(
  jsonString: string,
): SafeParseResult<VerificationParameterInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerificationParameterInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerificationParameterInput' from JSON`,
  );
}
