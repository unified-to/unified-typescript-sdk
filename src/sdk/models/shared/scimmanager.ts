/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ScimManagerType = {
  Direct: "direct",
  Indirect: "indirect",
} as const;
export type ScimManagerType = OpenEnum<typeof ScimManagerType>;

/**
 * "id" attribute of another User.
 */
export type ScimManager = {
  dollarRef?: string | undefined;
  displayName?: string | undefined;
  managerId?: string | undefined;
  type?: ScimManagerType | undefined;
  value?: string | undefined;
};

/** @internal */
export const ScimManagerType$inboundSchema: z.ZodType<
  ScimManagerType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ScimManagerType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ScimManagerType$outboundSchema: z.ZodType<
  ScimManagerType,
  z.ZodTypeDef,
  ScimManagerType
> = z.union([
  z.nativeEnum(ScimManagerType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScimManagerType$ {
  /** @deprecated use `ScimManagerType$inboundSchema` instead. */
  export const inboundSchema = ScimManagerType$inboundSchema;
  /** @deprecated use `ScimManagerType$outboundSchema` instead. */
  export const outboundSchema = ScimManagerType$outboundSchema;
}

/** @internal */
export const ScimManager$inboundSchema: z.ZodType<
  ScimManager,
  z.ZodTypeDef,
  unknown
> = z.object({
  $ref: z.string().optional(),
  displayName: z.string().optional(),
  managerId: z.string().optional(),
  type: ScimManagerType$inboundSchema.optional(),
  value: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "$ref": "dollarRef",
  });
});

/** @internal */
export type ScimManager$Outbound = {
  $ref?: string | undefined;
  displayName?: string | undefined;
  managerId?: string | undefined;
  type?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const ScimManager$outboundSchema: z.ZodType<
  ScimManager$Outbound,
  z.ZodTypeDef,
  ScimManager
> = z.object({
  dollarRef: z.string().optional(),
  displayName: z.string().optional(),
  managerId: z.string().optional(),
  type: ScimManagerType$outboundSchema.optional(),
  value: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    dollarRef: "$ref",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScimManager$ {
  /** @deprecated use `ScimManager$inboundSchema` instead. */
  export const inboundSchema = ScimManager$inboundSchema;
  /** @deprecated use `ScimManager$outboundSchema` instead. */
  export const outboundSchema = ScimManager$outboundSchema;
  /** @deprecated use `ScimManager$Outbound` instead. */
  export type Outbound = ScimManager$Outbound;
}

export function scimManagerToJSON(scimManager: ScimManager): string {
  return JSON.stringify(ScimManager$outboundSchema.parse(scimManager));
}

export function scimManagerFromJSON(
  jsonString: string,
): SafeParseResult<ScimManager, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScimManager$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScimManager' from JSON`,
  );
}
