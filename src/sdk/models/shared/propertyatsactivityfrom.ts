/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PropertyAtsActivityFromType = {
  Work: "WORK",
  Home: "HOME",
  Other: "OTHER",
} as const;
export type PropertyAtsActivityFromType = OpenEnum<
  typeof PropertyAtsActivityFromType
>;

export type PropertyAtsActivityFrom = {
  email: string;
  name?: string | undefined;
  type?: PropertyAtsActivityFromType | undefined;
};

/** @internal */
export const PropertyAtsActivityFromType$inboundSchema: z.ZodType<
  PropertyAtsActivityFromType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PropertyAtsActivityFromType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PropertyAtsActivityFromType$outboundSchema: z.ZodType<
  PropertyAtsActivityFromType,
  z.ZodTypeDef,
  PropertyAtsActivityFromType
> = z.union([
  z.nativeEnum(PropertyAtsActivityFromType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyAtsActivityFromType$ {
  /** @deprecated use `PropertyAtsActivityFromType$inboundSchema` instead. */
  export const inboundSchema = PropertyAtsActivityFromType$inboundSchema;
  /** @deprecated use `PropertyAtsActivityFromType$outboundSchema` instead. */
  export const outboundSchema = PropertyAtsActivityFromType$outboundSchema;
}

/** @internal */
export const PropertyAtsActivityFrom$inboundSchema: z.ZodType<
  PropertyAtsActivityFrom,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  name: z.string().optional(),
  type: PropertyAtsActivityFromType$inboundSchema.optional(),
});

/** @internal */
export type PropertyAtsActivityFrom$Outbound = {
  email: string;
  name?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const PropertyAtsActivityFrom$outboundSchema: z.ZodType<
  PropertyAtsActivityFrom$Outbound,
  z.ZodTypeDef,
  PropertyAtsActivityFrom
> = z.object({
  email: z.string(),
  name: z.string().optional(),
  type: PropertyAtsActivityFromType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyAtsActivityFrom$ {
  /** @deprecated use `PropertyAtsActivityFrom$inboundSchema` instead. */
  export const inboundSchema = PropertyAtsActivityFrom$inboundSchema;
  /** @deprecated use `PropertyAtsActivityFrom$outboundSchema` instead. */
  export const outboundSchema = PropertyAtsActivityFrom$outboundSchema;
  /** @deprecated use `PropertyAtsActivityFrom$Outbound` instead. */
  export type Outbound = PropertyAtsActivityFrom$Outbound;
}

export function propertyAtsActivityFromToJSON(
  propertyAtsActivityFrom: PropertyAtsActivityFrom,
): string {
  return JSON.stringify(
    PropertyAtsActivityFrom$outboundSchema.parse(propertyAtsActivityFrom),
  );
}

export function propertyAtsActivityFromFromJSON(
  jsonString: string,
): SafeParseResult<PropertyAtsActivityFrom, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyAtsActivityFrom$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyAtsActivityFrom' from JSON`,
  );
}
