/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UcRecordingTranscript = {
  contactId?: string | undefined;
  endAt?: Date | undefined;
  startAt?: Date | undefined;
  text: string;
  userId?: string | undefined;
};

/** @internal */
export const UcRecordingTranscript$inboundSchema: z.ZodType<
  UcRecordingTranscript,
  z.ZodTypeDef,
  unknown
> = z.object({
  contact_id: z.string().optional(),
  end_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  start_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  text: z.string(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "contact_id": "contactId",
    "end_at": "endAt",
    "start_at": "startAt",
    "user_id": "userId",
  });
});

/** @internal */
export type UcRecordingTranscript$Outbound = {
  contact_id?: string | undefined;
  end_at?: string | undefined;
  start_at?: string | undefined;
  text: string;
  user_id?: string | undefined;
};

/** @internal */
export const UcRecordingTranscript$outboundSchema: z.ZodType<
  UcRecordingTranscript$Outbound,
  z.ZodTypeDef,
  UcRecordingTranscript
> = z.object({
  contactId: z.string().optional(),
  endAt: z.date().transform(v => v.toISOString()).optional(),
  startAt: z.date().transform(v => v.toISOString()).optional(),
  text: z.string(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    contactId: "contact_id",
    endAt: "end_at",
    startAt: "start_at",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UcRecordingTranscript$ {
  /** @deprecated use `UcRecordingTranscript$inboundSchema` instead. */
  export const inboundSchema = UcRecordingTranscript$inboundSchema;
  /** @deprecated use `UcRecordingTranscript$outboundSchema` instead. */
  export const outboundSchema = UcRecordingTranscript$outboundSchema;
  /** @deprecated use `UcRecordingTranscript$Outbound` instead. */
  export type Outbound = UcRecordingTranscript$Outbound;
}

export function ucRecordingTranscriptToJSON(
  ucRecordingTranscript: UcRecordingTranscript,
): string {
  return JSON.stringify(
    UcRecordingTranscript$outboundSchema.parse(ucRecordingTranscript),
  );
}

export function ucRecordingTranscriptFromJSON(
  jsonString: string,
): SafeParseResult<UcRecordingTranscript, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UcRecordingTranscript$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UcRecordingTranscript' from JSON`,
  );
}
