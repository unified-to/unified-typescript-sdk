/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType =
  {
    Direct: "direct",
    Indirect: "indirect",
  } as const;
export type PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType =
  ClosedEnum<
    typeof PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType
  >;

export type PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager =
  {
    dollarRef?: string | undefined;
    displayName?: string | undefined;
    managerId?: string | undefined;
    type?:
      | PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType
      | undefined;
    value?: string | undefined;
  };

/** @internal */
export const PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType$inboundSchema:
  z.ZodNativeEnum<
    typeof PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType
  > = z.nativeEnum(
    PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType,
  );

/** @internal */
export const PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType$outboundSchema:
  z.ZodNativeEnum<
    typeof PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType
  > =
    PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType$ {
  /** @deprecated use `PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType$inboundSchema` instead. */
  export const inboundSchema =
    PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType$inboundSchema;
  /** @deprecated use `PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType$outboundSchema` instead. */
  export const outboundSchema =
    PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType$outboundSchema;
}

/** @internal */
export const PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$inboundSchema:
  z.ZodType<
    PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager,
    z.ZodTypeDef,
    unknown
  > = z.object({
    $ref: z.string().optional(),
    displayName: z.string().optional(),
    managerId: z.string().optional(),
    type:
      PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType$inboundSchema
        .optional(),
    value: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "$ref": "dollarRef",
    });
  });

/** @internal */
export type PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$Outbound =
  {
    $ref?: string | undefined;
    displayName?: string | undefined;
    managerId?: string | undefined;
    type?: string | undefined;
    value?: string | undefined;
  };

/** @internal */
export const PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$outboundSchema:
  z.ZodType<
    PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$Outbound,
    z.ZodTypeDef,
    PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager
  > = z.object({
    dollarRef: z.string().optional(),
    displayName: z.string().optional(),
    managerId: z.string().optional(),
    type:
      PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType$outboundSchema
        .optional(),
    value: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      dollarRef: "$ref",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$ {
  /** @deprecated use `PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$inboundSchema` instead. */
  export const inboundSchema =
    PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$inboundSchema;
  /** @deprecated use `PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$outboundSchema` instead. */
  export const outboundSchema =
    PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$outboundSchema;
  /** @deprecated use `PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$Outbound` instead. */
  export type Outbound =
    PropertyPropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager$Outbound;
}
