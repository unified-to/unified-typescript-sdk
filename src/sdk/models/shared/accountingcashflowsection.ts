/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingCashflowItem,
  AccountingCashflowItem$inboundSchema,
  AccountingCashflowItem$Outbound,
  AccountingCashflowItem$outboundSchema,
} from "./accountingcashflowitem.js";

export type AccountingCashflowSection = {
  items?: Array<AccountingCashflowItem> | undefined;
  sectionName?: string | undefined;
  totalAmount?: number | undefined;
};

/** @internal */
export const AccountingCashflowSection$inboundSchema: z.ZodType<
  AccountingCashflowSection,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(AccountingCashflowItem$inboundSchema).optional(),
  section_name: z.string().optional(),
  total_amount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "section_name": "sectionName",
    "total_amount": "totalAmount",
  });
});

/** @internal */
export type AccountingCashflowSection$Outbound = {
  items?: Array<AccountingCashflowItem$Outbound> | undefined;
  section_name?: string | undefined;
  total_amount?: number | undefined;
};

/** @internal */
export const AccountingCashflowSection$outboundSchema: z.ZodType<
  AccountingCashflowSection$Outbound,
  z.ZodTypeDef,
  AccountingCashflowSection
> = z.object({
  items: z.array(AccountingCashflowItem$outboundSchema).optional(),
  sectionName: z.string().optional(),
  totalAmount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    sectionName: "section_name",
    totalAmount: "total_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCashflowSection$ {
  /** @deprecated use `AccountingCashflowSection$inboundSchema` instead. */
  export const inboundSchema = AccountingCashflowSection$inboundSchema;
  /** @deprecated use `AccountingCashflowSection$outboundSchema` instead. */
  export const outboundSchema = AccountingCashflowSection$outboundSchema;
  /** @deprecated use `AccountingCashflowSection$Outbound` instead. */
  export type Outbound = AccountingCashflowSection$Outbound;
}

export function accountingCashflowSectionToJSON(
  accountingCashflowSection: AccountingCashflowSection,
): string {
  return JSON.stringify(
    AccountingCashflowSection$outboundSchema.parse(accountingCashflowSection),
  );
}

export function accountingCashflowSectionFromJSON(
  jsonString: string,
): SafeParseResult<AccountingCashflowSection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingCashflowSection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingCashflowSection' from JSON`,
  );
}
