/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccountingProfitlossSubcategory,
  AccountingProfitlossSubcategory$inboundSchema,
  AccountingProfitlossSubcategory$Outbound,
  AccountingProfitlossSubcategory$outboundSchema,
} from "./accountingprofitlosssubcategory.js";

/**
 * @deprecated
 */
export type AccountingProfitlossCategory = {
  amount?: number | undefined;
  name?: string | undefined;
  subItems?: Array<AccountingProfitlossSubcategory> | undefined;
};

/** @internal */
export const AccountingProfitlossCategory$inboundSchema: z.ZodType<
  AccountingProfitlossCategory,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().optional(),
  name: z.string().optional(),
  sub_items: z.array(AccountingProfitlossSubcategory$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "sub_items": "subItems",
  });
});

/** @internal */
export type AccountingProfitlossCategory$Outbound = {
  amount?: number | undefined;
  name?: string | undefined;
  sub_items?: Array<AccountingProfitlossSubcategory$Outbound> | undefined;
};

/** @internal */
export const AccountingProfitlossCategory$outboundSchema: z.ZodType<
  AccountingProfitlossCategory$Outbound,
  z.ZodTypeDef,
  AccountingProfitlossCategory
> = z.object({
  amount: z.number().optional(),
  name: z.string().optional(),
  subItems: z.array(AccountingProfitlossSubcategory$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    subItems: "sub_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingProfitlossCategory$ {
  /** @deprecated use `AccountingProfitlossCategory$inboundSchema` instead. */
  export const inboundSchema = AccountingProfitlossCategory$inboundSchema;
  /** @deprecated use `AccountingProfitlossCategory$outboundSchema` instead. */
  export const outboundSchema = AccountingProfitlossCategory$outboundSchema;
  /** @deprecated use `AccountingProfitlossCategory$Outbound` instead. */
  export type Outbound = AccountingProfitlossCategory$Outbound;
}

export function accountingProfitlossCategoryToJSON(
  accountingProfitlossCategory: AccountingProfitlossCategory,
): string {
  return JSON.stringify(
    AccountingProfitlossCategory$outboundSchema.parse(
      accountingProfitlossCategory,
    ),
  );
}

export function accountingProfitlossCategoryFromJSON(
  jsonString: string,
): SafeParseResult<AccountingProfitlossCategory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingProfitlossCategory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingProfitlossCategory' from JSON`,
  );
}
