/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RepoCommit = {
  branchId?: string | undefined;
  createdAt?: Date | undefined;
  id?: string | undefined;
  message?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  repoId: string;
  updatedAt?: Date | undefined;
  userId?: string | undefined;
};

/** @internal */
export const RepoCommit$inboundSchema: z.ZodType<
  RepoCommit,
  z.ZodTypeDef,
  unknown
> = z.object({
  branch_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  id: z.string().optional(),
  message: z.string().optional(),
  raw: z.record(z.any()).optional(),
  repo_id: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "branch_id": "branchId",
    "created_at": "createdAt",
    "repo_id": "repoId",
    "updated_at": "updatedAt",
    "user_id": "userId",
  });
});

/** @internal */
export type RepoCommit$Outbound = {
  branch_id?: string | undefined;
  created_at?: string | undefined;
  id?: string | undefined;
  message?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  repo_id: string;
  updated_at?: string | undefined;
  user_id?: string | undefined;
};

/** @internal */
export const RepoCommit$outboundSchema: z.ZodType<
  RepoCommit$Outbound,
  z.ZodTypeDef,
  RepoCommit
> = z.object({
  branchId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  id: z.string().optional(),
  message: z.string().optional(),
  raw: z.record(z.any()).optional(),
  repoId: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    branchId: "branch_id",
    createdAt: "created_at",
    repoId: "repo_id",
    updatedAt: "updated_at",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepoCommit$ {
  /** @deprecated use `RepoCommit$inboundSchema` instead. */
  export const inboundSchema = RepoCommit$inboundSchema;
  /** @deprecated use `RepoCommit$outboundSchema` instead. */
  export const outboundSchema = RepoCommit$outboundSchema;
  /** @deprecated use `RepoCommit$Outbound` instead. */
  export type Outbound = RepoCommit$Outbound;
}

export function repoCommitToJSON(repoCommit: RepoCommit): string {
  return JSON.stringify(RepoCommit$outboundSchema.parse(repoCommit));
}

export function repoCommitFromJSON(
  jsonString: string,
): SafeParseResult<RepoCommit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RepoCommit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RepoCommit' from JSON`,
  );
}
