/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AccountingContactPaymentMethodType = {
  Ach: "ACH",
  Alipay: "ALIPAY",
  Card: "CARD",
  Giropay: "GIROPAY",
  Ideal: "IDEAL",
  Other: "OTHER",
  Paypal: "PAYPAL",
} as const;
export type AccountingContactPaymentMethodType = ClosedEnum<
  typeof AccountingContactPaymentMethodType
>;

export type AccountingContactPaymentMethod = {
  default?: boolean | undefined;
  id?: string | undefined;
  name?: string | undefined;
  type: AccountingContactPaymentMethodType;
};

/** @internal */
export const AccountingContactPaymentMethodType$inboundSchema: z.ZodNativeEnum<
  typeof AccountingContactPaymentMethodType
> = z.nativeEnum(AccountingContactPaymentMethodType);

/** @internal */
export const AccountingContactPaymentMethodType$outboundSchema: z.ZodNativeEnum<
  typeof AccountingContactPaymentMethodType
> = AccountingContactPaymentMethodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingContactPaymentMethodType$ {
  /** @deprecated use `AccountingContactPaymentMethodType$inboundSchema` instead. */
  export const inboundSchema = AccountingContactPaymentMethodType$inboundSchema;
  /** @deprecated use `AccountingContactPaymentMethodType$outboundSchema` instead. */
  export const outboundSchema =
    AccountingContactPaymentMethodType$outboundSchema;
}

/** @internal */
export const AccountingContactPaymentMethod$inboundSchema: z.ZodType<
  AccountingContactPaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  default: z.boolean().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  type: AccountingContactPaymentMethodType$inboundSchema,
});

/** @internal */
export type AccountingContactPaymentMethod$Outbound = {
  default?: boolean | undefined;
  id?: string | undefined;
  name?: string | undefined;
  type: string;
};

/** @internal */
export const AccountingContactPaymentMethod$outboundSchema: z.ZodType<
  AccountingContactPaymentMethod$Outbound,
  z.ZodTypeDef,
  AccountingContactPaymentMethod
> = z.object({
  default: z.boolean().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  type: AccountingContactPaymentMethodType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingContactPaymentMethod$ {
  /** @deprecated use `AccountingContactPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = AccountingContactPaymentMethod$inboundSchema;
  /** @deprecated use `AccountingContactPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = AccountingContactPaymentMethod$outboundSchema;
  /** @deprecated use `AccountingContactPaymentMethod$Outbound` instead. */
  export type Outbound = AccountingContactPaymentMethod$Outbound;
}

export function accountingContactPaymentMethodToJSON(
  accountingContactPaymentMethod: AccountingContactPaymentMethod,
): string {
  return JSON.stringify(
    AccountingContactPaymentMethod$outboundSchema.parse(
      accountingContactPaymentMethod,
    ),
  );
}

export function accountingContactPaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<AccountingContactPaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingContactPaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingContactPaymentMethod' from JSON`,
  );
}
