/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TicketingEmailType = {
  Work: "WORK",
  Home: "HOME",
  Other: "OTHER",
} as const;
export type TicketingEmailType = OpenEnum<typeof TicketingEmailType>;

export type TicketingEmail = {
  email: string;
  type?: TicketingEmailType | undefined;
};

/** @internal */
export const TicketingEmailType$inboundSchema: z.ZodType<
  TicketingEmailType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TicketingEmailType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TicketingEmailType$outboundSchema: z.ZodType<
  TicketingEmailType,
  z.ZodTypeDef,
  TicketingEmailType
> = z.union([
  z.nativeEnum(TicketingEmailType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingEmailType$ {
  /** @deprecated use `TicketingEmailType$inboundSchema` instead. */
  export const inboundSchema = TicketingEmailType$inboundSchema;
  /** @deprecated use `TicketingEmailType$outboundSchema` instead. */
  export const outboundSchema = TicketingEmailType$outboundSchema;
}

/** @internal */
export const TicketingEmail$inboundSchema: z.ZodType<
  TicketingEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  type: TicketingEmailType$inboundSchema.optional(),
});

/** @internal */
export type TicketingEmail$Outbound = {
  email: string;
  type?: string | undefined;
};

/** @internal */
export const TicketingEmail$outboundSchema: z.ZodType<
  TicketingEmail$Outbound,
  z.ZodTypeDef,
  TicketingEmail
> = z.object({
  email: z.string(),
  type: TicketingEmailType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TicketingEmail$ {
  /** @deprecated use `TicketingEmail$inboundSchema` instead. */
  export const inboundSchema = TicketingEmail$inboundSchema;
  /** @deprecated use `TicketingEmail$outboundSchema` instead. */
  export const outboundSchema = TicketingEmail$outboundSchema;
  /** @deprecated use `TicketingEmail$Outbound` instead. */
  export type Outbound = TicketingEmail$Outbound;
}

export function ticketingEmailToJSON(ticketingEmail: TicketingEmail): string {
  return JSON.stringify(TicketingEmail$outboundSchema.parse(ticketingEmail));
}

export function ticketingEmailFromJSON(
  jsonString: string,
): SafeParseResult<TicketingEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TicketingEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TicketingEmail' from JSON`,
  );
}
