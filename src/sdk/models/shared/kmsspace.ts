/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type KmsSpace = {
  createdAt?: Date | undefined;
  description?: string | undefined;
  id?: string | undefined;
  isActive?: boolean | undefined;
  name: string;
  parentPageId?: string | undefined;
  parentSpaceId?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  updatedAt?: Date | undefined;
  userId?: string | undefined;
};

/** @internal */
export const KmsSpace$inboundSchema: z.ZodType<
  KmsSpace,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  name: z.string(),
  parent_page_id: z.string().optional(),
  parent_space_id: z.string().default("sp"),
  raw: z.record(z.any()).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "is_active": "isActive",
    "parent_page_id": "parentPageId",
    "parent_space_id": "parentSpaceId",
    "updated_at": "updatedAt",
    "user_id": "userId",
  });
});

/** @internal */
export type KmsSpace$Outbound = {
  created_at?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  is_active?: boolean | undefined;
  name: string;
  parent_page_id?: string | undefined;
  parent_space_id: string;
  raw?: { [k: string]: any } | undefined;
  updated_at?: string | undefined;
  user_id?: string | undefined;
};

/** @internal */
export const KmsSpace$outboundSchema: z.ZodType<
  KmsSpace$Outbound,
  z.ZodTypeDef,
  KmsSpace
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  isActive: z.boolean().optional(),
  name: z.string(),
  parentPageId: z.string().optional(),
  parentSpaceId: z.string().default("sp"),
  raw: z.record(z.any()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    isActive: "is_active",
    parentPageId: "parent_page_id",
    parentSpaceId: "parent_space_id",
    updatedAt: "updated_at",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KmsSpace$ {
  /** @deprecated use `KmsSpace$inboundSchema` instead. */
  export const inboundSchema = KmsSpace$inboundSchema;
  /** @deprecated use `KmsSpace$outboundSchema` instead. */
  export const outboundSchema = KmsSpace$outboundSchema;
  /** @deprecated use `KmsSpace$Outbound` instead. */
  export type Outbound = KmsSpace$Outbound;
}

export function kmsSpaceToJSON(kmsSpace: KmsSpace): string {
  return JSON.stringify(KmsSpace$outboundSchema.parse(kmsSpace));
}

export function kmsSpaceFromJSON(
  jsonString: string,
): SafeParseResult<KmsSpace, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KmsSpace$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KmsSpace' from JSON`,
  );
}
