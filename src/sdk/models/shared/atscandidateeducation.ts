/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AtsCandidateEducation = {
  degree?: string | undefined;
  endAt?: Date | undefined;
  fieldOfStudy?: string | undefined;
  institution?: string | undefined;
  level?: string | undefined;
  startAt?: Date | undefined;
};

/** @internal */
export const AtsCandidateEducation$inboundSchema: z.ZodType<
  AtsCandidateEducation,
  z.ZodTypeDef,
  unknown
> = z.object({
  degree: z.string().optional(),
  end_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  field_of_study: z.string().optional(),
  institution: z.string().optional(),
  level: z.string().optional(),
  start_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "end_at": "endAt",
    "field_of_study": "fieldOfStudy",
    "start_at": "startAt",
  });
});

/** @internal */
export type AtsCandidateEducation$Outbound = {
  degree?: string | undefined;
  end_at?: string | undefined;
  field_of_study?: string | undefined;
  institution?: string | undefined;
  level?: string | undefined;
  start_at?: string | undefined;
};

/** @internal */
export const AtsCandidateEducation$outboundSchema: z.ZodType<
  AtsCandidateEducation$Outbound,
  z.ZodTypeDef,
  AtsCandidateEducation
> = z.object({
  degree: z.string().optional(),
  endAt: z.date().transform(v => v.toISOString()).optional(),
  fieldOfStudy: z.string().optional(),
  institution: z.string().optional(),
  level: z.string().optional(),
  startAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    endAt: "end_at",
    fieldOfStudy: "field_of_study",
    startAt: "start_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsCandidateEducation$ {
  /** @deprecated use `AtsCandidateEducation$inboundSchema` instead. */
  export const inboundSchema = AtsCandidateEducation$inboundSchema;
  /** @deprecated use `AtsCandidateEducation$outboundSchema` instead. */
  export const outboundSchema = AtsCandidateEducation$outboundSchema;
  /** @deprecated use `AtsCandidateEducation$Outbound` instead. */
  export type Outbound = AtsCandidateEducation$Outbound;
}

export function atsCandidateEducationToJSON(
  atsCandidateEducation: AtsCandidateEducation,
): string {
  return JSON.stringify(
    AtsCandidateEducation$outboundSchema.parse(atsCandidateEducation),
  );
}

export function atsCandidateEducationFromJSON(
  jsonString: string,
): SafeParseResult<AtsCandidateEducation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsCandidateEducation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsCandidateEducation' from JSON`,
  );
}
