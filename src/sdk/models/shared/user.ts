/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  PropertyUserMeta,
  PropertyUserMeta$inboundSchema,
  PropertyUserMeta$Outbound,
  PropertyUserMeta$outboundSchema,
} from "./propertyusermeta.js";
import {
  PropertyUserName,
  PropertyUserName$inboundSchema,
  PropertyUserName$Outbound,
  PropertyUserName$outboundSchema,
} from "./propertyusername.js";
import {
  PropertyUserSchemas,
  PropertyUserSchemas$inboundSchema,
  PropertyUserSchemas$outboundSchema,
} from "./propertyuserschemas.js";
import {
  PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User,
  PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User$inboundSchema,
  PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User$Outbound,
  PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User$outboundSchema,
} from "./propertyuserurnietfparamsscimschemasextensionenterprise20user.js";
import {
  PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User,
  PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User$inboundSchema,
  PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User$Outbound,
  PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User$outboundSchema,
} from "./propertyuserurnietfparamsscimschemasextensionlatticeattributes10user.js";
import {
  PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User,
  PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User$inboundSchema,
  PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User$Outbound,
  PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User$outboundSchema,
} from "./propertyuserurnietfparamsscimschemasextensionpeakon20user.js";
import {
  Undefined,
  Undefined$inboundSchema,
  Undefined$Outbound,
  Undefined$outboundSchema,
} from "./undefined.js";

export type User = {
  active?: boolean | undefined;
  addresses?: Array<Undefined> | undefined;
  displayName?: string | undefined;
  emails?: Array<Undefined> | undefined;
  entitlements?: Array<Undefined> | undefined;
  externalId?: string | undefined;
  groups?: Array<Undefined> | undefined;
  id?: string | undefined;
  ims?: Array<Undefined> | undefined;
  locale?: string | undefined;
  meta?: PropertyUserMeta | undefined;
  name?: PropertyUserName | undefined;
  nickName?: string | undefined;
  password?: string | undefined;
  phoneNumbers?: Array<Undefined> | undefined;
  photos?: Array<Undefined> | undefined;
  preferredLanguage?: string | undefined;
  profileUrl?: string | undefined;
  roles?: Array<Undefined> | undefined;
  schemas?: Array<PropertyUserSchemas> | undefined;
  timezone?: string | undefined;
  title?: string | undefined;
  urnIetfParamsScimSchemasExtensionEnterprise20User?:
    | PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User
    | undefined;
  urnIetfParamsScimSchemasExtensionLatticeAttributes10User?:
    | PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User
    | undefined;
  urnIetfParamsScimSchemasExtensionPeakon20User?:
    | PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User
    | undefined;
  userName?: string | undefined;
  userType?: string | undefined;
  x509Certificates?: Array<Undefined> | undefined;
};

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    active: z.boolean().optional(),
    addresses: z.array(Undefined$inboundSchema).optional(),
    displayName: z.string().optional(),
    emails: z.array(Undefined$inboundSchema).optional(),
    entitlements: z.array(Undefined$inboundSchema).optional(),
    externalId: z.string().optional(),
    groups: z.array(Undefined$inboundSchema).optional(),
    id: z.string().optional(),
    ims: z.array(Undefined$inboundSchema).optional(),
    locale: z.string().optional(),
    meta: PropertyUserMeta$inboundSchema.optional(),
    name: PropertyUserName$inboundSchema.optional(),
    nickName: z.string().optional(),
    password: z.string().optional(),
    phoneNumbers: z.array(Undefined$inboundSchema).optional(),
    photos: z.array(Undefined$inboundSchema).optional(),
    preferredLanguage: z.string().optional(),
    profileUrl: z.string().optional(),
    roles: z.array(Undefined$inboundSchema).optional(),
    schemas: z.array(PropertyUserSchemas$inboundSchema).optional(),
    timezone: z.string().optional(),
    title: z.string().optional(),
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User":
      PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User$inboundSchema
        .optional(),
    "urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User":
      PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User$inboundSchema
        .optional(),
    "urn:ietf:params:scim:schemas:extension:peakon:2.0:User":
      PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User$inboundSchema
        .optional(),
    userName: z.string().optional(),
    userType: z.string().optional(),
    x509Certificates: z.array(Undefined$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User":
        "urnIetfParamsScimSchemasExtensionEnterprise20User",
      "urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User":
        "urnIetfParamsScimSchemasExtensionLatticeAttributes10User",
      "urn:ietf:params:scim:schemas:extension:peakon:2.0:User":
        "urnIetfParamsScimSchemasExtensionPeakon20User",
    });
  });

/** @internal */
export type User$Outbound = {
  active?: boolean | undefined;
  addresses?: Array<Undefined$Outbound> | undefined;
  displayName?: string | undefined;
  emails?: Array<Undefined$Outbound> | undefined;
  entitlements?: Array<Undefined$Outbound> | undefined;
  externalId?: string | undefined;
  groups?: Array<Undefined$Outbound> | undefined;
  id?: string | undefined;
  ims?: Array<Undefined$Outbound> | undefined;
  locale?: string | undefined;
  meta?: PropertyUserMeta$Outbound | undefined;
  name?: PropertyUserName$Outbound | undefined;
  nickName?: string | undefined;
  password?: string | undefined;
  phoneNumbers?: Array<Undefined$Outbound> | undefined;
  photos?: Array<Undefined$Outbound> | undefined;
  preferredLanguage?: string | undefined;
  profileUrl?: string | undefined;
  roles?: Array<Undefined$Outbound> | undefined;
  schemas?: Array<string> | undefined;
  timezone?: string | undefined;
  title?: string | undefined;
  "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"?:
    | PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User$Outbound
    | undefined;
  "urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User"?:
    | PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User$Outbound
    | undefined;
  "urn:ietf:params:scim:schemas:extension:peakon:2.0:User"?:
    | PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User$Outbound
    | undefined;
  userName?: string | undefined;
  userType?: string | undefined;
  x509Certificates?: Array<Undefined$Outbound> | undefined;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    active: z.boolean().optional(),
    addresses: z.array(Undefined$outboundSchema).optional(),
    displayName: z.string().optional(),
    emails: z.array(Undefined$outboundSchema).optional(),
    entitlements: z.array(Undefined$outboundSchema).optional(),
    externalId: z.string().optional(),
    groups: z.array(Undefined$outboundSchema).optional(),
    id: z.string().optional(),
    ims: z.array(Undefined$outboundSchema).optional(),
    locale: z.string().optional(),
    meta: PropertyUserMeta$outboundSchema.optional(),
    name: PropertyUserName$outboundSchema.optional(),
    nickName: z.string().optional(),
    password: z.string().optional(),
    phoneNumbers: z.array(Undefined$outboundSchema).optional(),
    photos: z.array(Undefined$outboundSchema).optional(),
    preferredLanguage: z.string().optional(),
    profileUrl: z.string().optional(),
    roles: z.array(Undefined$outboundSchema).optional(),
    schemas: z.array(PropertyUserSchemas$outboundSchema).optional(),
    timezone: z.string().optional(),
    title: z.string().optional(),
    urnIetfParamsScimSchemasExtensionEnterprise20User:
      PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User$outboundSchema
        .optional(),
    urnIetfParamsScimSchemasExtensionLatticeAttributes10User:
      PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User$outboundSchema
        .optional(),
    urnIetfParamsScimSchemasExtensionPeakon20User:
      PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User$outboundSchema
        .optional(),
    userName: z.string().optional(),
    userType: z.string().optional(),
    x509Certificates: z.array(Undefined$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      urnIetfParamsScimSchemasExtensionEnterprise20User:
        "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User",
      urnIetfParamsScimSchemasExtensionLatticeAttributes10User:
        "urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User",
      urnIetfParamsScimSchemasExtensionPeakon20User:
        "urn:ietf:params:scim:schemas:extension:peakon:2.0:User",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}
