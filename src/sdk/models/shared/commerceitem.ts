/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CommerceItemMedia,
  CommerceItemMedia$inboundSchema,
  CommerceItemMedia$Outbound,
  CommerceItemMedia$outboundSchema,
} from "./commerceitemmedia.js";
import {
  CommerceItemMetadata,
  CommerceItemMetadata$inboundSchema,
  CommerceItemMetadata$Outbound,
  CommerceItemMetadata$outboundSchema,
} from "./commerceitemmetadata.js";
import {
  CommerceItemVariant,
  CommerceItemVariant$inboundSchema,
  CommerceItemVariant$Outbound,
  CommerceItemVariant$outboundSchema,
} from "./commerceitemvariant.js";

export type CommerceItem = {
  accountId?: string | undefined;
  collectionIds?: Array<string> | undefined;
  createdAt?: Date | undefined;
  description?: string | undefined;
  id?: string | undefined;
  isActive?: boolean | undefined;
  isTaxable?: boolean | undefined;
  media?: Array<CommerceItemMedia> | undefined;
  metadata?: Array<CommerceItemMetadata> | undefined;
  name?: string | undefined;
  publicDescription?: string | undefined;
  publicName?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  slug?: string | undefined;
  tags?: Array<string> | undefined;
  type?: string | undefined;
  updatedAt?: Date | undefined;
  /**
   * first variant is the default variant
   */
  variants?: Array<CommerceItemVariant> | undefined;
  vendorName?: string | undefined;
};

/** @internal */
export const CommerceItem$inboundSchema: z.ZodType<
  CommerceItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string().optional(),
  collection_ids: z.array(z.string()).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  is_taxable: z.boolean().optional(),
  media: z.array(CommerceItemMedia$inboundSchema).optional(),
  metadata: z.array(CommerceItemMetadata$inboundSchema).optional(),
  name: z.string().optional(),
  public_description: z.string().optional(),
  public_name: z.string().optional(),
  raw: z.record(z.any()).optional(),
  slug: z.string().optional(),
  tags: z.array(z.string()).optional(),
  type: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  variants: z.array(CommerceItemVariant$inboundSchema).optional(),
  vendor_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "collection_ids": "collectionIds",
    "created_at": "createdAt",
    "is_active": "isActive",
    "is_taxable": "isTaxable",
    "public_description": "publicDescription",
    "public_name": "publicName",
    "updated_at": "updatedAt",
    "vendor_name": "vendorName",
  });
});

/** @internal */
export type CommerceItem$Outbound = {
  account_id?: string | undefined;
  collection_ids?: Array<string> | undefined;
  created_at?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  is_active?: boolean | undefined;
  is_taxable?: boolean | undefined;
  media?: Array<CommerceItemMedia$Outbound> | undefined;
  metadata?: Array<CommerceItemMetadata$Outbound> | undefined;
  name?: string | undefined;
  public_description?: string | undefined;
  public_name?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  slug?: string | undefined;
  tags?: Array<string> | undefined;
  type?: string | undefined;
  updated_at?: string | undefined;
  variants?: Array<CommerceItemVariant$Outbound> | undefined;
  vendor_name?: string | undefined;
};

/** @internal */
export const CommerceItem$outboundSchema: z.ZodType<
  CommerceItem$Outbound,
  z.ZodTypeDef,
  CommerceItem
> = z.object({
  accountId: z.string().optional(),
  collectionIds: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  isActive: z.boolean().optional(),
  isTaxable: z.boolean().optional(),
  media: z.array(CommerceItemMedia$outboundSchema).optional(),
  metadata: z.array(CommerceItemMetadata$outboundSchema).optional(),
  name: z.string().optional(),
  publicDescription: z.string().optional(),
  publicName: z.string().optional(),
  raw: z.record(z.any()).optional(),
  slug: z.string().optional(),
  tags: z.array(z.string()).optional(),
  type: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  variants: z.array(CommerceItemVariant$outboundSchema).optional(),
  vendorName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    collectionIds: "collection_ids",
    createdAt: "created_at",
    isActive: "is_active",
    isTaxable: "is_taxable",
    publicDescription: "public_description",
    publicName: "public_name",
    updatedAt: "updated_at",
    vendorName: "vendor_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceItem$ {
  /** @deprecated use `CommerceItem$inboundSchema` instead. */
  export const inboundSchema = CommerceItem$inboundSchema;
  /** @deprecated use `CommerceItem$outboundSchema` instead. */
  export const outboundSchema = CommerceItem$outboundSchema;
  /** @deprecated use `CommerceItem$Outbound` instead. */
  export type Outbound = CommerceItem$Outbound;
}

export function commerceItemToJSON(commerceItem: CommerceItem): string {
  return JSON.stringify(CommerceItem$outboundSchema.parse(commerceItem));
}

export function commerceItemFromJSON(
  jsonString: string,
): SafeParseResult<CommerceItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceItem' from JSON`,
  );
}
