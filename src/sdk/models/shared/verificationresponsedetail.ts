/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VerificationResponseDetail = {
  downloadUrl?: string | undefined;
  isFailedReason?: boolean | undefined;
  isPrivate?: boolean | undefined;
  parameterId?: string | undefined;
  text?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const VerificationResponseDetail$inboundSchema: z.ZodType<
  VerificationResponseDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  download_url: z.string().optional(),
  is_failed_reason: z.boolean().optional(),
  is_private: z.boolean().optional(),
  parameter_id: z.string().optional(),
  text: z.string().optional(),
  title: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "download_url": "downloadUrl",
    "is_failed_reason": "isFailedReason",
    "is_private": "isPrivate",
    "parameter_id": "parameterId",
  });
});

/** @internal */
export type VerificationResponseDetail$Outbound = {
  download_url?: string | undefined;
  is_failed_reason?: boolean | undefined;
  is_private?: boolean | undefined;
  parameter_id?: string | undefined;
  text?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const VerificationResponseDetail$outboundSchema: z.ZodType<
  VerificationResponseDetail$Outbound,
  z.ZodTypeDef,
  VerificationResponseDetail
> = z.object({
  downloadUrl: z.string().optional(),
  isFailedReason: z.boolean().optional(),
  isPrivate: z.boolean().optional(),
  parameterId: z.string().optional(),
  text: z.string().optional(),
  title: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    downloadUrl: "download_url",
    isFailedReason: "is_failed_reason",
    isPrivate: "is_private",
    parameterId: "parameter_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerificationResponseDetail$ {
  /** @deprecated use `VerificationResponseDetail$inboundSchema` instead. */
  export const inboundSchema = VerificationResponseDetail$inboundSchema;
  /** @deprecated use `VerificationResponseDetail$outboundSchema` instead. */
  export const outboundSchema = VerificationResponseDetail$outboundSchema;
  /** @deprecated use `VerificationResponseDetail$Outbound` instead. */
  export type Outbound = VerificationResponseDetail$Outbound;
}

export function verificationResponseDetailToJSON(
  verificationResponseDetail: VerificationResponseDetail,
): string {
  return JSON.stringify(
    VerificationResponseDetail$outboundSchema.parse(verificationResponseDetail),
  );
}

export function verificationResponseDetailFromJSON(
  jsonString: string,
): SafeParseResult<VerificationResponseDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerificationResponseDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerificationResponseDetail' from JSON`,
  );
}
