/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RepoOrganization = {
  avatarUrl?: string | undefined;
  createdAt?: Date | undefined;
  description?: string | undefined;
  id?: string | undefined;
  name?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  updatedAt?: Date | undefined;
  /**
   * id values of the users/employees associated with this organization
   */
  userIds?: Array<string> | undefined;
  webUrl?: string | undefined;
};

/** @internal */
export const RepoOrganization$inboundSchema: z.ZodType<
  RepoOrganization,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatar_url: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  raw: z.record(z.any()).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user_ids: z.array(z.string()).optional(),
  web_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "avatar_url": "avatarUrl",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "user_ids": "userIds",
    "web_url": "webUrl",
  });
});

/** @internal */
export type RepoOrganization$Outbound = {
  avatar_url?: string | undefined;
  created_at?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  name?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  updated_at?: string | undefined;
  user_ids?: Array<string> | undefined;
  web_url?: string | undefined;
};

/** @internal */
export const RepoOrganization$outboundSchema: z.ZodType<
  RepoOrganization$Outbound,
  z.ZodTypeDef,
  RepoOrganization
> = z.object({
  avatarUrl: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  raw: z.record(z.any()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  userIds: z.array(z.string()).optional(),
  webUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    avatarUrl: "avatar_url",
    createdAt: "created_at",
    updatedAt: "updated_at",
    userIds: "user_ids",
    webUrl: "web_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepoOrganization$ {
  /** @deprecated use `RepoOrganization$inboundSchema` instead. */
  export const inboundSchema = RepoOrganization$inboundSchema;
  /** @deprecated use `RepoOrganization$outboundSchema` instead. */
  export const outboundSchema = RepoOrganization$outboundSchema;
  /** @deprecated use `RepoOrganization$Outbound` instead. */
  export type Outbound = RepoOrganization$Outbound;
}

export function repoOrganizationToJSON(
  repoOrganization: RepoOrganization,
): string {
  return JSON.stringify(
    RepoOrganization$outboundSchema.parse(repoOrganization),
  );
}

export function repoOrganizationFromJSON(
  jsonString: string,
): SafeParseResult<RepoOrganization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RepoOrganization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RepoOrganization' from JSON`,
  );
}
