/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PropertyScimUserMetaResourceType = {
  User: "User",
  Group: "Group",
} as const;
export type PropertyScimUserMetaResourceType = OpenEnum<
  typeof PropertyScimUserMetaResourceType
>;

export type PropertyScimUserMeta = {
  created?: string | undefined;
  lastModified?: string | undefined;
  location?: string | undefined;
  resourceType?: PropertyScimUserMetaResourceType | undefined;
  version?: string | undefined;
};

/** @internal */
export const PropertyScimUserMetaResourceType$inboundSchema: z.ZodType<
  PropertyScimUserMetaResourceType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PropertyScimUserMetaResourceType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PropertyScimUserMetaResourceType$outboundSchema: z.ZodType<
  PropertyScimUserMetaResourceType,
  z.ZodTypeDef,
  PropertyScimUserMetaResourceType
> = z.union([
  z.nativeEnum(PropertyScimUserMetaResourceType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyScimUserMetaResourceType$ {
  /** @deprecated use `PropertyScimUserMetaResourceType$inboundSchema` instead. */
  export const inboundSchema = PropertyScimUserMetaResourceType$inboundSchema;
  /** @deprecated use `PropertyScimUserMetaResourceType$outboundSchema` instead. */
  export const outboundSchema = PropertyScimUserMetaResourceType$outboundSchema;
}

/** @internal */
export const PropertyScimUserMeta$inboundSchema: z.ZodType<
  PropertyScimUserMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  created: z.string().optional(),
  lastModified: z.string().optional(),
  location: z.string().optional(),
  resourceType: PropertyScimUserMetaResourceType$inboundSchema.optional(),
  version: z.string().optional(),
});

/** @internal */
export type PropertyScimUserMeta$Outbound = {
  created?: string | undefined;
  lastModified?: string | undefined;
  location?: string | undefined;
  resourceType?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const PropertyScimUserMeta$outboundSchema: z.ZodType<
  PropertyScimUserMeta$Outbound,
  z.ZodTypeDef,
  PropertyScimUserMeta
> = z.object({
  created: z.string().optional(),
  lastModified: z.string().optional(),
  location: z.string().optional(),
  resourceType: PropertyScimUserMetaResourceType$outboundSchema.optional(),
  version: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyScimUserMeta$ {
  /** @deprecated use `PropertyScimUserMeta$inboundSchema` instead. */
  export const inboundSchema = PropertyScimUserMeta$inboundSchema;
  /** @deprecated use `PropertyScimUserMeta$outboundSchema` instead. */
  export const outboundSchema = PropertyScimUserMeta$outboundSchema;
  /** @deprecated use `PropertyScimUserMeta$Outbound` instead. */
  export type Outbound = PropertyScimUserMeta$Outbound;
}

export function propertyScimUserMetaToJSON(
  propertyScimUserMeta: PropertyScimUserMeta,
): string {
  return JSON.stringify(
    PropertyScimUserMeta$outboundSchema.parse(propertyScimUserMeta),
  );
}

export function propertyScimUserMetaFromJSON(
  jsonString: string,
): SafeParseResult<PropertyScimUserMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyScimUserMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyScimUserMeta' from JSON`,
  );
}
