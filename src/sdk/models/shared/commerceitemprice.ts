/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CommerceItemPrice = {
  compareAtPrice?: number | undefined;
  currency?: string | undefined;
  price: number;
};

/** @internal */
export const CommerceItemPrice$inboundSchema: z.ZodType<
  CommerceItemPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  compare_at_price: z.number().optional(),
  currency: z.string().optional(),
  price: z.number(),
}).transform((v) => {
  return remap$(v, {
    "compare_at_price": "compareAtPrice",
  });
});

/** @internal */
export type CommerceItemPrice$Outbound = {
  compare_at_price?: number | undefined;
  currency?: string | undefined;
  price: number;
};

/** @internal */
export const CommerceItemPrice$outboundSchema: z.ZodType<
  CommerceItemPrice$Outbound,
  z.ZodTypeDef,
  CommerceItemPrice
> = z.object({
  compareAtPrice: z.number().optional(),
  currency: z.string().optional(),
  price: z.number(),
}).transform((v) => {
  return remap$(v, {
    compareAtPrice: "compare_at_price",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceItemPrice$ {
  /** @deprecated use `CommerceItemPrice$inboundSchema` instead. */
  export const inboundSchema = CommerceItemPrice$inboundSchema;
  /** @deprecated use `CommerceItemPrice$outboundSchema` instead. */
  export const outboundSchema = CommerceItemPrice$outboundSchema;
  /** @deprecated use `CommerceItemPrice$Outbound` instead. */
  export type Outbound = CommerceItemPrice$Outbound;
}

export function commerceItemPriceToJSON(
  commerceItemPrice: CommerceItemPrice,
): string {
  return JSON.stringify(
    CommerceItemPrice$outboundSchema.parse(commerceItemPrice),
  );
}

export function commerceItemPriceFromJSON(
  jsonString: string,
): SafeParseResult<CommerceItemPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceItemPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceItemPrice' from JSON`,
  );
}
