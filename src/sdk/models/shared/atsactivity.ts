/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const AtsActivityType = {
    Note: "NOTE",
    Task: "TASK",
} as const;
export type AtsActivityType = ClosedEnum<typeof AtsActivityType>;

export type AtsActivity = {
    applicationId?: string | undefined;
    candidateId?: string | undefined;
    createdAt?: Date | undefined;
    description?: string | undefined;
    documentId?: string | undefined;
    id?: string | undefined;
    interviewId?: string | undefined;
    isPrivate?: boolean | undefined;
    jobId?: string | undefined;
    raw?: { [k: string]: any } | undefined;
    title: string;
    type?: AtsActivityType | undefined;
    updatedAt?: Date | undefined;
    /**
     * id values of the recruiters associated with the activity.
     */
    userIds?: Array<string> | undefined;
};

/** @internal */
export const AtsActivityType$inboundSchema: z.ZodNativeEnum<typeof AtsActivityType> =
    z.nativeEnum(AtsActivityType);

/** @internal */
export const AtsActivityType$outboundSchema: z.ZodNativeEnum<typeof AtsActivityType> =
    AtsActivityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsActivityType$ {
    /** @deprecated use `AtsActivityType$inboundSchema` instead. */
    export const inboundSchema = AtsActivityType$inboundSchema;
    /** @deprecated use `AtsActivityType$outboundSchema` instead. */
    export const outboundSchema = AtsActivityType$outboundSchema;
}

/** @internal */
export const AtsActivity$inboundSchema: z.ZodType<AtsActivity, z.ZodTypeDef, unknown> = z
    .object({
        application_id: z.string().optional(),
        candidate_id: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        description: z.string().optional(),
        document_id: z.string().optional(),
        id: z.string().optional(),
        interview_id: z.string().optional(),
        is_private: z.boolean().optional(),
        job_id: z.string().optional(),
        raw: z.record(z.any()).optional(),
        title: z.string(),
        type: AtsActivityType$inboundSchema.optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        user_ids: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            application_id: "applicationId",
            candidate_id: "candidateId",
            created_at: "createdAt",
            document_id: "documentId",
            interview_id: "interviewId",
            is_private: "isPrivate",
            job_id: "jobId",
            updated_at: "updatedAt",
            user_ids: "userIds",
        });
    });

/** @internal */
export type AtsActivity$Outbound = {
    application_id?: string | undefined;
    candidate_id?: string | undefined;
    created_at?: string | undefined;
    description?: string | undefined;
    document_id?: string | undefined;
    id?: string | undefined;
    interview_id?: string | undefined;
    is_private?: boolean | undefined;
    job_id?: string | undefined;
    raw?: { [k: string]: any } | undefined;
    title: string;
    type?: string | undefined;
    updated_at?: string | undefined;
    user_ids?: Array<string> | undefined;
};

/** @internal */
export const AtsActivity$outboundSchema: z.ZodType<
    AtsActivity$Outbound,
    z.ZodTypeDef,
    AtsActivity
> = z
    .object({
        applicationId: z.string().optional(),
        candidateId: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        description: z.string().optional(),
        documentId: z.string().optional(),
        id: z.string().optional(),
        interviewId: z.string().optional(),
        isPrivate: z.boolean().optional(),
        jobId: z.string().optional(),
        raw: z.record(z.any()).optional(),
        title: z.string(),
        type: AtsActivityType$outboundSchema.optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        userIds: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            applicationId: "application_id",
            candidateId: "candidate_id",
            createdAt: "created_at",
            documentId: "document_id",
            interviewId: "interview_id",
            isPrivate: "is_private",
            jobId: "job_id",
            updatedAt: "updated_at",
            userIds: "user_ids",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsActivity$ {
    /** @deprecated use `AtsActivity$inboundSchema` instead. */
    export const inboundSchema = AtsActivity$inboundSchema;
    /** @deprecated use `AtsActivity$outboundSchema` instead. */
    export const outboundSchema = AtsActivity$outboundSchema;
    /** @deprecated use `AtsActivity$Outbound` instead. */
    export type Outbound = AtsActivity$Outbound;
}
