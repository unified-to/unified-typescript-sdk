/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CrmEmail } from "./crmemail";
import { CrmTelephone } from "./crmtelephone";
import { PropertyCrmLeadAddress } from "./propertycrmleadaddress";
import { Expose, Transform, Type } from "class-transformer";

export class CrmLead extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "address" })
    @Type(() => PropertyCrmLeadAddress)
    address?: PropertyCrmLeadAddress;

    @SpeakeasyMetadata()
    @Expose({ name: "company_id" })
    companyId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "company_name" })
    companyName?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "contact_id" })
    contactId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "creator_user_id" })
    creatorUserId?: string;

    @SpeakeasyMetadata({ elemType: CrmEmail })
    @Expose({ name: "emails" })
    @Type(() => CrmEmail)
    emails?: CrmEmail[];

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "is_active" })
    isActive?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "raw" })
    raw?: Record<string, any>;

    @SpeakeasyMetadata()
    @Expose({ name: "source" })
    source?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: string;

    @SpeakeasyMetadata({ elemType: CrmTelephone })
    @Expose({ name: "telephones" })
    @Type(() => CrmTelephone)
    telephones?: CrmTelephone[];

    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "user_id" })
    userId?: string;
}
