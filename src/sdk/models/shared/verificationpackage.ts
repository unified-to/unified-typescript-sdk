/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  VerificationParameter,
  VerificationParameter$inboundSchema,
  VerificationParameter$Outbound,
  VerificationParameter$outboundSchema,
} from "./verificationparameter.js";
import {
  VerificationTime,
  VerificationTime$inboundSchema,
  VerificationTime$Outbound,
  VerificationTime$outboundSchema,
} from "./verificationtime.js";

export const VerificationPackageType = {
  IdentityVerification: "IDENTITY_VERIFICATION",
  Screening: "SCREENING",
  BackgroundCheck: "BACKGROUND_CHECK",
  EmploymentVerification: "EMPLOYMENT_VERIFICATION",
  EducationVerification: "EDUCATION_VERIFICATION",
  CreditCheck: "CREDIT_CHECK",
  FraudPrevention: "FRAUD_PREVENTION",
  Other: "OTHER",
} as const;
export type VerificationPackageType = OpenEnum<typeof VerificationPackageType>;

export type VerificationPackage = {
  aliases?: Array<string> | undefined;
  /**
   * average processing time in minutes
   */
  averageProcessingTimes?: Array<VerificationTime> | undefined;
  costAmount?: number | undefined;
  createdAt?: Date | undefined;
  currency?: string | undefined;
  description?: string | undefined;
  hasRedirectUrl?: boolean | undefined;
  hasTargetUrl?: boolean | undefined;
  id: string;
  infoUrl?: string | undefined;
  maxScore?: number | undefined;
  name: string;
  needsIpAddress?: boolean | undefined;
  /**
   * Questions that need to be answered for this verification
   */
  parameters?: Array<VerificationParameter> | undefined;
  raw?: { [k: string]: any } | undefined;
  /**
   * Category (Verification, Validation, Background Check)
   */
  tags?: Array<string> | undefined;
  type: VerificationPackageType;
  updatedAt?: Date | undefined;
};

/** @internal */
export const VerificationPackageType$inboundSchema: z.ZodType<
  VerificationPackageType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(VerificationPackageType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const VerificationPackageType$outboundSchema: z.ZodType<
  VerificationPackageType,
  z.ZodTypeDef,
  VerificationPackageType
> = z.union([
  z.nativeEnum(VerificationPackageType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerificationPackageType$ {
  /** @deprecated use `VerificationPackageType$inboundSchema` instead. */
  export const inboundSchema = VerificationPackageType$inboundSchema;
  /** @deprecated use `VerificationPackageType$outboundSchema` instead. */
  export const outboundSchema = VerificationPackageType$outboundSchema;
}

/** @internal */
export const VerificationPackage$inboundSchema: z.ZodType<
  VerificationPackage,
  z.ZodTypeDef,
  unknown
> = z.object({
  aliases: z.array(z.string()).optional(),
  average_processing_times: z.array(VerificationTime$inboundSchema).optional(),
  cost_amount: z.number().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  currency: z.string().optional(),
  description: z.string().optional(),
  has_redirect_url: z.boolean().optional(),
  has_target_url: z.boolean().optional(),
  id: z.string(),
  info_url: z.string().optional(),
  max_score: z.number().optional(),
  name: z.string(),
  needs_ip_address: z.boolean().optional(),
  parameters: z.array(VerificationParameter$inboundSchema).optional(),
  raw: z.record(z.any()).optional(),
  tags: z.array(z.string()).optional(),
  type: VerificationPackageType$inboundSchema,
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "average_processing_times": "averageProcessingTimes",
    "cost_amount": "costAmount",
    "created_at": "createdAt",
    "has_redirect_url": "hasRedirectUrl",
    "has_target_url": "hasTargetUrl",
    "info_url": "infoUrl",
    "max_score": "maxScore",
    "needs_ip_address": "needsIpAddress",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type VerificationPackage$Outbound = {
  aliases?: Array<string> | undefined;
  average_processing_times?: Array<VerificationTime$Outbound> | undefined;
  cost_amount?: number | undefined;
  created_at?: string | undefined;
  currency?: string | undefined;
  description?: string | undefined;
  has_redirect_url?: boolean | undefined;
  has_target_url?: boolean | undefined;
  id: string;
  info_url?: string | undefined;
  max_score?: number | undefined;
  name: string;
  needs_ip_address?: boolean | undefined;
  parameters?: Array<VerificationParameter$Outbound> | undefined;
  raw?: { [k: string]: any } | undefined;
  tags?: Array<string> | undefined;
  type: string;
  updated_at?: string | undefined;
};

/** @internal */
export const VerificationPackage$outboundSchema: z.ZodType<
  VerificationPackage$Outbound,
  z.ZodTypeDef,
  VerificationPackage
> = z.object({
  aliases: z.array(z.string()).optional(),
  averageProcessingTimes: z.array(VerificationTime$outboundSchema).optional(),
  costAmount: z.number().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  currency: z.string().optional(),
  description: z.string().optional(),
  hasRedirectUrl: z.boolean().optional(),
  hasTargetUrl: z.boolean().optional(),
  id: z.string(),
  infoUrl: z.string().optional(),
  maxScore: z.number().optional(),
  name: z.string(),
  needsIpAddress: z.boolean().optional(),
  parameters: z.array(VerificationParameter$outboundSchema).optional(),
  raw: z.record(z.any()).optional(),
  tags: z.array(z.string()).optional(),
  type: VerificationPackageType$outboundSchema,
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    averageProcessingTimes: "average_processing_times",
    costAmount: "cost_amount",
    createdAt: "created_at",
    hasRedirectUrl: "has_redirect_url",
    hasTargetUrl: "has_target_url",
    infoUrl: "info_url",
    maxScore: "max_score",
    needsIpAddress: "needs_ip_address",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerificationPackage$ {
  /** @deprecated use `VerificationPackage$inboundSchema` instead. */
  export const inboundSchema = VerificationPackage$inboundSchema;
  /** @deprecated use `VerificationPackage$outboundSchema` instead. */
  export const outboundSchema = VerificationPackage$outboundSchema;
  /** @deprecated use `VerificationPackage$Outbound` instead. */
  export type Outbound = VerificationPackage$Outbound;
}

export function verificationPackageToJSON(
  verificationPackage: VerificationPackage,
): string {
  return JSON.stringify(
    VerificationPackage$outboundSchema.parse(verificationPackage),
  );
}

export function verificationPackageFromJSON(
  jsonString: string,
): SafeParseResult<VerificationPackage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerificationPackage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerificationPackage' from JSON`,
  );
}
