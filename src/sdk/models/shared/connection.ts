/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PropertyConnectionAuth } from "./propertyconnectionauth";
import { PropertyConnectionCategories } from "./propertyconnectioncategories";
import { PropertyConnectionPermissions } from "./propertyconnectionpermissions";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A connection represents a specific authentication of an integration.
 */
export class Connection extends SpeakeasyBase {
    /**
     * An authentication object that represents a specific authorized user's connection to an integration.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "auth" })
    @Type(() => PropertyConnectionAuth)
    auth?: PropertyConnectionAuth;

    @SpeakeasyMetadata()
    @Expose({ name: "auth_aws_arn" })
    authAwsArn?: string;

    /**
     * The Integration categories that this connection supports
     */
    @SpeakeasyMetadata()
    @Expose({ name: "categories" })
    categories: PropertyConnectionCategories[];

    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "environment" })
    environment?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "external_xref" })
    externalXref?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "integration_type" })
    integrationType: string;

    @SpeakeasyMetadata()
    @Expose({ name: "is_paused" })
    isPaused?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "permissions" })
    permissions: PropertyConnectionPermissions[];

    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "workspace_id" })
    workspaceId?: string;
}
