/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  PropertyConnectionAuth,
  PropertyConnectionAuth$inboundSchema,
  PropertyConnectionAuth$Outbound,
  PropertyConnectionAuth$outboundSchema,
} from "./propertyconnectionauth.js";
import {
  PropertyConnectionCategories,
  PropertyConnectionCategories$inboundSchema,
  PropertyConnectionCategories$outboundSchema,
} from "./propertyconnectioncategories.js";
import {
  PropertyConnectionPermissions,
  PropertyConnectionPermissions$inboundSchema,
  PropertyConnectionPermissions$outboundSchema,
} from "./propertyconnectionpermissions.js";

/**
 * A connection represents a specific authentication of an integration.
 */
export type Connection = {
  /**
   * An authentication object that represents a specific authorized user's connection to an integration.
   */
  auth?: PropertyConnectionAuth | undefined;
  authAwsArn?: string | undefined;
  /**
   * The Integration categories that this connection supports
   */
  categories: Array<PropertyConnectionCategories>;
  createdAt?: Date | undefined;
  environment?: string | undefined;
  externalXref?: string | undefined;
  id?: string | undefined;
  integrationType: string;
  isPaused?: boolean | undefined;
  lastHealthyAt?: Date | undefined;
  lastUnhealthyAt?: Date | undefined;
  permissions: Array<PropertyConnectionPermissions>;
  updatedAt?: Date | undefined;
  workspaceId?: string | undefined;
};

/** @internal */
export const Connection$inboundSchema: z.ZodType<
  Connection,
  z.ZodTypeDef,
  unknown
> = z.object({
  auth: PropertyConnectionAuth$inboundSchema.optional(),
  auth_aws_arn: z.string().optional(),
  categories: z.array(PropertyConnectionCategories$inboundSchema),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  environment: z.string().default("Production"),
  external_xref: z.string().optional(),
  id: z.string().optional(),
  integration_type: z.string(),
  is_paused: z.boolean().optional(),
  last_healthy_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  last_unhealthy_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  permissions: z.array(PropertyConnectionPermissions$inboundSchema),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  workspace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "auth_aws_arn": "authAwsArn",
    "created_at": "createdAt",
    "external_xref": "externalXref",
    "integration_type": "integrationType",
    "is_paused": "isPaused",
    "last_healthy_at": "lastHealthyAt",
    "last_unhealthy_at": "lastUnhealthyAt",
    "updated_at": "updatedAt",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type Connection$Outbound = {
  auth?: PropertyConnectionAuth$Outbound | undefined;
  auth_aws_arn?: string | undefined;
  categories: Array<string>;
  created_at?: string | undefined;
  environment: string;
  external_xref?: string | undefined;
  id?: string | undefined;
  integration_type: string;
  is_paused?: boolean | undefined;
  last_healthy_at?: string | undefined;
  last_unhealthy_at?: string | undefined;
  permissions: Array<string>;
  updated_at?: string | undefined;
  workspace_id?: string | undefined;
};

/** @internal */
export const Connection$outboundSchema: z.ZodType<
  Connection$Outbound,
  z.ZodTypeDef,
  Connection
> = z.object({
  auth: PropertyConnectionAuth$outboundSchema.optional(),
  authAwsArn: z.string().optional(),
  categories: z.array(PropertyConnectionCategories$outboundSchema),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  environment: z.string().default("Production"),
  externalXref: z.string().optional(),
  id: z.string().optional(),
  integrationType: z.string(),
  isPaused: z.boolean().optional(),
  lastHealthyAt: z.date().transform(v => v.toISOString()).optional(),
  lastUnhealthyAt: z.date().transform(v => v.toISOString()).optional(),
  permissions: z.array(PropertyConnectionPermissions$outboundSchema),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  workspaceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    authAwsArn: "auth_aws_arn",
    createdAt: "created_at",
    externalXref: "external_xref",
    integrationType: "integration_type",
    isPaused: "is_paused",
    lastHealthyAt: "last_healthy_at",
    lastUnhealthyAt: "last_unhealthy_at",
    updatedAt: "updated_at",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Connection$ {
  /** @deprecated use `Connection$inboundSchema` instead. */
  export const inboundSchema = Connection$inboundSchema;
  /** @deprecated use `Connection$outboundSchema` instead. */
  export const outboundSchema = Connection$outboundSchema;
  /** @deprecated use `Connection$Outbound` instead. */
  export type Outbound = Connection$Outbound;
}
