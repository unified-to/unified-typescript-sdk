/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ApiCallType = {
    Login: "login",
    Webhook: "webhook",
    Inbound: "inbound",
} as const;
export type ApiCallType = ClosedEnum<typeof ApiCallType>;

export type ApiCall = {
    connectionId?: string | undefined;
    createdAt?: Date | undefined;
    environment?: string | undefined;
    error?: string | undefined;
    externalXref?: string | undefined;
    id?: string | undefined;
    integrationType: string;
    ipAddress?: string | undefined;
    method: string;
    name: string;
    path: string;
    size?: number | undefined;
    status: string;
    type: ApiCallType;
    workspaceId: string;
};

/** @internal */
export const ApiCallType$inboundSchema: z.ZodNativeEnum<typeof ApiCallType> =
    z.nativeEnum(ApiCallType);

/** @internal */
export const ApiCallType$outboundSchema: z.ZodNativeEnum<typeof ApiCallType> =
    ApiCallType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiCallType$ {
    /** @deprecated use `ApiCallType$inboundSchema` instead. */
    export const inboundSchema = ApiCallType$inboundSchema;
    /** @deprecated use `ApiCallType$outboundSchema` instead. */
    export const outboundSchema = ApiCallType$outboundSchema;
}

/** @internal */
export const ApiCall$inboundSchema: z.ZodType<ApiCall, z.ZodTypeDef, unknown> = z
    .object({
        connection_id: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        environment: z.string().default("Production"),
        error: z.string().optional(),
        external_xref: z.string().optional(),
        id: z.string().optional(),
        integration_type: z.string(),
        ip_address: z.string().optional(),
        method: z.string(),
        name: z.string(),
        path: z.string(),
        size: z.number().optional(),
        status: z.string(),
        type: ApiCallType$inboundSchema,
        workspace_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            connection_id: "connectionId",
            created_at: "createdAt",
            external_xref: "externalXref",
            integration_type: "integrationType",
            ip_address: "ipAddress",
            workspace_id: "workspaceId",
        });
    });

/** @internal */
export type ApiCall$Outbound = {
    connection_id?: string | undefined;
    created_at?: string | undefined;
    environment: string;
    error?: string | undefined;
    external_xref?: string | undefined;
    id?: string | undefined;
    integration_type: string;
    ip_address?: string | undefined;
    method: string;
    name: string;
    path: string;
    size?: number | undefined;
    status: string;
    type: string;
    workspace_id: string;
};

/** @internal */
export const ApiCall$outboundSchema: z.ZodType<ApiCall$Outbound, z.ZodTypeDef, ApiCall> = z
    .object({
        connectionId: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        environment: z.string().default("Production"),
        error: z.string().optional(),
        externalXref: z.string().optional(),
        id: z.string().optional(),
        integrationType: z.string(),
        ipAddress: z.string().optional(),
        method: z.string(),
        name: z.string(),
        path: z.string(),
        size: z.number().optional(),
        status: z.string(),
        type: ApiCallType$outboundSchema,
        workspaceId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            connectionId: "connection_id",
            createdAt: "created_at",
            externalXref: "external_xref",
            integrationType: "integration_type",
            ipAddress: "ip_address",
            workspaceId: "workspace_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiCall$ {
    /** @deprecated use `ApiCall$inboundSchema` instead. */
    export const inboundSchema = ApiCall$inboundSchema;
    /** @deprecated use `ApiCall$outboundSchema` instead. */
    export const outboundSchema = ApiCall$outboundSchema;
    /** @deprecated use `ApiCall$Outbound` instead. */
    export type Outbound = ApiCall$Outbound;
}
