/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  PropertyIntegrationSupportWebhookEvents,
  PropertyIntegrationSupportWebhookEvents$inboundSchema,
  PropertyIntegrationSupportWebhookEvents$Outbound,
  PropertyIntegrationSupportWebhookEvents$outboundSchema,
} from "./propertyintegrationsupportwebhookevents.js";

export const FromWebhook = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type FromWebhook = ClosedEnum<typeof FromWebhook>;

export const ListAccountId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListAccountId = ClosedEnum<typeof ListAccountId>;

export const ListApplicationId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListApplicationId = ClosedEnum<typeof ListApplicationId>;

export const ListCandidateId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListCandidateId = ClosedEnum<typeof ListCandidateId>;

export const ListChannelId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListChannelId = ClosedEnum<typeof ListChannelId>;

export const ListCollectionId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListCollectionId = ClosedEnum<typeof ListCollectionId>;

export const ListCompanyId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListCompanyId = ClosedEnum<typeof ListCompanyId>;

export const ListContactId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListContactId = ClosedEnum<typeof ListContactId>;

export const ListCustomerId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListCustomerId = ClosedEnum<typeof ListCustomerId>;

export const ListDealId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListDealId = ClosedEnum<typeof ListDealId>;

export const ListInterviewId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListInterviewId = ClosedEnum<typeof ListInterviewId>;

export const ListInvoiceId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListInvoiceId = ClosedEnum<typeof ListInvoiceId>;

export const ListItemId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListItemId = ClosedEnum<typeof ListItemId>;

export const ListItemVariantId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListItemVariantId = ClosedEnum<typeof ListItemVariantId>;

export const ListJobId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListJobId = ClosedEnum<typeof ListJobId>;

export const ListLimit = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListLimit = ClosedEnum<typeof ListLimit>;

export const ListLinkId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListLinkId = ClosedEnum<typeof ListLinkId>;

export const ListListId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListListId = ClosedEnum<typeof ListListId>;

export const ListLocationId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListLocationId = ClosedEnum<typeof ListLocationId>;

export const ListOffset = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListOffset = ClosedEnum<typeof ListOffset>;

export const ListOrder = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListOrder = ClosedEnum<typeof ListOrder>;

export const ListParentId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListParentId = ClosedEnum<typeof ListParentId>;

export const ListProjectId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListProjectId = ClosedEnum<typeof ListProjectId>;

export const ListQuery = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListQuery = ClosedEnum<typeof ListQuery>;

export const ListRawFields = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListRawFields = ClosedEnum<typeof ListRawFields>;

export const ListSortByCreatedAt = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListSortByCreatedAt = ClosedEnum<typeof ListSortByCreatedAt>;

export const ListSortByName = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListSortByName = ClosedEnum<typeof ListSortByName>;

export const ListSortByUpdatedAt = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListSortByUpdatedAt = ClosedEnum<typeof ListSortByUpdatedAt>;

export const ListSpaceId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListSpaceId = ClosedEnum<typeof ListSpaceId>;

export const ListTicketId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListTicketId = ClosedEnum<typeof ListTicketId>;

export const ListType = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListType = ClosedEnum<typeof ListType>;

export const ListUpdatedGte = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListUpdatedGte = ClosedEnum<typeof ListUpdatedGte>;

export const ListUserId = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type ListUserId = ClosedEnum<typeof ListUserId>;

export const SearchDomain = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type SearchDomain = ClosedEnum<typeof SearchDomain>;

export const SearchEmail = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type SearchEmail = ClosedEnum<typeof SearchEmail>;

export const SearchLinkedinurl = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type SearchLinkedinurl = ClosedEnum<typeof SearchLinkedinurl>;

export const SearchName = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type SearchName = ClosedEnum<typeof SearchName>;

export const SearchTwitter = {
  SupportedRequired: "supported-required",
  Supported: "supported",
  NotSupported: "not-supported",
} as const;
export type SearchTwitter = ClosedEnum<typeof SearchTwitter>;

export type IntegrationSupport = {
  fromWebhook?: FromWebhook | undefined;
  inboundFields?: { [k: string]: any } | undefined;
  listAccountId?: ListAccountId | undefined;
  listApplicationId?: ListApplicationId | undefined;
  listCandidateId?: ListCandidateId | undefined;
  listChannelId?: ListChannelId | undefined;
  listCollectionId?: ListCollectionId | undefined;
  listCompanyId?: ListCompanyId | undefined;
  listContactId?: ListContactId | undefined;
  listCustomerId?: ListCustomerId | undefined;
  listDealId?: ListDealId | undefined;
  listInterviewId?: ListInterviewId | undefined;
  listInvoiceId?: ListInvoiceId | undefined;
  listItemId?: ListItemId | undefined;
  listItemVariantId?: ListItemVariantId | undefined;
  listJobId?: ListJobId | undefined;
  listLimit?: ListLimit | undefined;
  listLinkId?: ListLinkId | undefined;
  listListId?: ListListId | undefined;
  listLocationId?: ListLocationId | undefined;
  listOffset?: ListOffset | undefined;
  listOrder?: ListOrder | undefined;
  listParentId?: ListParentId | undefined;
  listProjectId?: ListProjectId | undefined;
  listQuery?: ListQuery | undefined;
  listRawFields?: ListRawFields | undefined;
  listSortByCreatedAt?: ListSortByCreatedAt | undefined;
  listSortByName?: ListSortByName | undefined;
  listSortByUpdatedAt?: ListSortByUpdatedAt | undefined;
  listSpaceId?: ListSpaceId | undefined;
  listTicketId?: ListTicketId | undefined;
  listType?: ListType | undefined;
  listUpdatedGte?: ListUpdatedGte | undefined;
  listUserId?: ListUserId | undefined;
  methods?: { [k: string]: boolean } | undefined;
  outboundFields?: { [k: string]: any } | undefined;
  /**
   * objects that we map from in the integration
   */
  rawObjects?: Array<string> | undefined;
  searchDomain?: SearchDomain | undefined;
  searchEmail?: SearchEmail | undefined;
  searchLinkedinurl?: SearchLinkedinurl | undefined;
  searchName?: SearchName | undefined;
  searchTwitter?: SearchTwitter | undefined;
  webhookEvents?: PropertyIntegrationSupportWebhookEvents | undefined;
};

/** @internal */
export const FromWebhook$inboundSchema: z.ZodNativeEnum<typeof FromWebhook> = z
  .nativeEnum(FromWebhook);

/** @internal */
export const FromWebhook$outboundSchema: z.ZodNativeEnum<typeof FromWebhook> =
  FromWebhook$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FromWebhook$ {
  /** @deprecated use `FromWebhook$inboundSchema` instead. */
  export const inboundSchema = FromWebhook$inboundSchema;
  /** @deprecated use `FromWebhook$outboundSchema` instead. */
  export const outboundSchema = FromWebhook$outboundSchema;
}

/** @internal */
export const ListAccountId$inboundSchema: z.ZodNativeEnum<
  typeof ListAccountId
> = z.nativeEnum(ListAccountId);

/** @internal */
export const ListAccountId$outboundSchema: z.ZodNativeEnum<
  typeof ListAccountId
> = ListAccountId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountId$ {
  /** @deprecated use `ListAccountId$inboundSchema` instead. */
  export const inboundSchema = ListAccountId$inboundSchema;
  /** @deprecated use `ListAccountId$outboundSchema` instead. */
  export const outboundSchema = ListAccountId$outboundSchema;
}

/** @internal */
export const ListApplicationId$inboundSchema: z.ZodNativeEnum<
  typeof ListApplicationId
> = z.nativeEnum(ListApplicationId);

/** @internal */
export const ListApplicationId$outboundSchema: z.ZodNativeEnum<
  typeof ListApplicationId
> = ListApplicationId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListApplicationId$ {
  /** @deprecated use `ListApplicationId$inboundSchema` instead. */
  export const inboundSchema = ListApplicationId$inboundSchema;
  /** @deprecated use `ListApplicationId$outboundSchema` instead. */
  export const outboundSchema = ListApplicationId$outboundSchema;
}

/** @internal */
export const ListCandidateId$inboundSchema: z.ZodNativeEnum<
  typeof ListCandidateId
> = z.nativeEnum(ListCandidateId);

/** @internal */
export const ListCandidateId$outboundSchema: z.ZodNativeEnum<
  typeof ListCandidateId
> = ListCandidateId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCandidateId$ {
  /** @deprecated use `ListCandidateId$inboundSchema` instead. */
  export const inboundSchema = ListCandidateId$inboundSchema;
  /** @deprecated use `ListCandidateId$outboundSchema` instead. */
  export const outboundSchema = ListCandidateId$outboundSchema;
}

/** @internal */
export const ListChannelId$inboundSchema: z.ZodNativeEnum<
  typeof ListChannelId
> = z.nativeEnum(ListChannelId);

/** @internal */
export const ListChannelId$outboundSchema: z.ZodNativeEnum<
  typeof ListChannelId
> = ListChannelId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChannelId$ {
  /** @deprecated use `ListChannelId$inboundSchema` instead. */
  export const inboundSchema = ListChannelId$inboundSchema;
  /** @deprecated use `ListChannelId$outboundSchema` instead. */
  export const outboundSchema = ListChannelId$outboundSchema;
}

/** @internal */
export const ListCollectionId$inboundSchema: z.ZodNativeEnum<
  typeof ListCollectionId
> = z.nativeEnum(ListCollectionId);

/** @internal */
export const ListCollectionId$outboundSchema: z.ZodNativeEnum<
  typeof ListCollectionId
> = ListCollectionId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCollectionId$ {
  /** @deprecated use `ListCollectionId$inboundSchema` instead. */
  export const inboundSchema = ListCollectionId$inboundSchema;
  /** @deprecated use `ListCollectionId$outboundSchema` instead. */
  export const outboundSchema = ListCollectionId$outboundSchema;
}

/** @internal */
export const ListCompanyId$inboundSchema: z.ZodNativeEnum<
  typeof ListCompanyId
> = z.nativeEnum(ListCompanyId);

/** @internal */
export const ListCompanyId$outboundSchema: z.ZodNativeEnum<
  typeof ListCompanyId
> = ListCompanyId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCompanyId$ {
  /** @deprecated use `ListCompanyId$inboundSchema` instead. */
  export const inboundSchema = ListCompanyId$inboundSchema;
  /** @deprecated use `ListCompanyId$outboundSchema` instead. */
  export const outboundSchema = ListCompanyId$outboundSchema;
}

/** @internal */
export const ListContactId$inboundSchema: z.ZodNativeEnum<
  typeof ListContactId
> = z.nativeEnum(ListContactId);

/** @internal */
export const ListContactId$outboundSchema: z.ZodNativeEnum<
  typeof ListContactId
> = ListContactId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContactId$ {
  /** @deprecated use `ListContactId$inboundSchema` instead. */
  export const inboundSchema = ListContactId$inboundSchema;
  /** @deprecated use `ListContactId$outboundSchema` instead. */
  export const outboundSchema = ListContactId$outboundSchema;
}

/** @internal */
export const ListCustomerId$inboundSchema: z.ZodNativeEnum<
  typeof ListCustomerId
> = z.nativeEnum(ListCustomerId);

/** @internal */
export const ListCustomerId$outboundSchema: z.ZodNativeEnum<
  typeof ListCustomerId
> = ListCustomerId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomerId$ {
  /** @deprecated use `ListCustomerId$inboundSchema` instead. */
  export const inboundSchema = ListCustomerId$inboundSchema;
  /** @deprecated use `ListCustomerId$outboundSchema` instead. */
  export const outboundSchema = ListCustomerId$outboundSchema;
}

/** @internal */
export const ListDealId$inboundSchema: z.ZodNativeEnum<typeof ListDealId> = z
  .nativeEnum(ListDealId);

/** @internal */
export const ListDealId$outboundSchema: z.ZodNativeEnum<typeof ListDealId> =
  ListDealId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDealId$ {
  /** @deprecated use `ListDealId$inboundSchema` instead. */
  export const inboundSchema = ListDealId$inboundSchema;
  /** @deprecated use `ListDealId$outboundSchema` instead. */
  export const outboundSchema = ListDealId$outboundSchema;
}

/** @internal */
export const ListInterviewId$inboundSchema: z.ZodNativeEnum<
  typeof ListInterviewId
> = z.nativeEnum(ListInterviewId);

/** @internal */
export const ListInterviewId$outboundSchema: z.ZodNativeEnum<
  typeof ListInterviewId
> = ListInterviewId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInterviewId$ {
  /** @deprecated use `ListInterviewId$inboundSchema` instead. */
  export const inboundSchema = ListInterviewId$inboundSchema;
  /** @deprecated use `ListInterviewId$outboundSchema` instead. */
  export const outboundSchema = ListInterviewId$outboundSchema;
}

/** @internal */
export const ListInvoiceId$inboundSchema: z.ZodNativeEnum<
  typeof ListInvoiceId
> = z.nativeEnum(ListInvoiceId);

/** @internal */
export const ListInvoiceId$outboundSchema: z.ZodNativeEnum<
  typeof ListInvoiceId
> = ListInvoiceId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInvoiceId$ {
  /** @deprecated use `ListInvoiceId$inboundSchema` instead. */
  export const inboundSchema = ListInvoiceId$inboundSchema;
  /** @deprecated use `ListInvoiceId$outboundSchema` instead. */
  export const outboundSchema = ListInvoiceId$outboundSchema;
}

/** @internal */
export const ListItemId$inboundSchema: z.ZodNativeEnum<typeof ListItemId> = z
  .nativeEnum(ListItemId);

/** @internal */
export const ListItemId$outboundSchema: z.ZodNativeEnum<typeof ListItemId> =
  ListItemId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListItemId$ {
  /** @deprecated use `ListItemId$inboundSchema` instead. */
  export const inboundSchema = ListItemId$inboundSchema;
  /** @deprecated use `ListItemId$outboundSchema` instead. */
  export const outboundSchema = ListItemId$outboundSchema;
}

/** @internal */
export const ListItemVariantId$inboundSchema: z.ZodNativeEnum<
  typeof ListItemVariantId
> = z.nativeEnum(ListItemVariantId);

/** @internal */
export const ListItemVariantId$outboundSchema: z.ZodNativeEnum<
  typeof ListItemVariantId
> = ListItemVariantId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListItemVariantId$ {
  /** @deprecated use `ListItemVariantId$inboundSchema` instead. */
  export const inboundSchema = ListItemVariantId$inboundSchema;
  /** @deprecated use `ListItemVariantId$outboundSchema` instead. */
  export const outboundSchema = ListItemVariantId$outboundSchema;
}

/** @internal */
export const ListJobId$inboundSchema: z.ZodNativeEnum<typeof ListJobId> = z
  .nativeEnum(ListJobId);

/** @internal */
export const ListJobId$outboundSchema: z.ZodNativeEnum<typeof ListJobId> =
  ListJobId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListJobId$ {
  /** @deprecated use `ListJobId$inboundSchema` instead. */
  export const inboundSchema = ListJobId$inboundSchema;
  /** @deprecated use `ListJobId$outboundSchema` instead. */
  export const outboundSchema = ListJobId$outboundSchema;
}

/** @internal */
export const ListLimit$inboundSchema: z.ZodNativeEnum<typeof ListLimit> = z
  .nativeEnum(ListLimit);

/** @internal */
export const ListLimit$outboundSchema: z.ZodNativeEnum<typeof ListLimit> =
  ListLimit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLimit$ {
  /** @deprecated use `ListLimit$inboundSchema` instead. */
  export const inboundSchema = ListLimit$inboundSchema;
  /** @deprecated use `ListLimit$outboundSchema` instead. */
  export const outboundSchema = ListLimit$outboundSchema;
}

/** @internal */
export const ListLinkId$inboundSchema: z.ZodNativeEnum<typeof ListLinkId> = z
  .nativeEnum(ListLinkId);

/** @internal */
export const ListLinkId$outboundSchema: z.ZodNativeEnum<typeof ListLinkId> =
  ListLinkId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLinkId$ {
  /** @deprecated use `ListLinkId$inboundSchema` instead. */
  export const inboundSchema = ListLinkId$inboundSchema;
  /** @deprecated use `ListLinkId$outboundSchema` instead. */
  export const outboundSchema = ListLinkId$outboundSchema;
}

/** @internal */
export const ListListId$inboundSchema: z.ZodNativeEnum<typeof ListListId> = z
  .nativeEnum(ListListId);

/** @internal */
export const ListListId$outboundSchema: z.ZodNativeEnum<typeof ListListId> =
  ListListId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListListId$ {
  /** @deprecated use `ListListId$inboundSchema` instead. */
  export const inboundSchema = ListListId$inboundSchema;
  /** @deprecated use `ListListId$outboundSchema` instead. */
  export const outboundSchema = ListListId$outboundSchema;
}

/** @internal */
export const ListLocationId$inboundSchema: z.ZodNativeEnum<
  typeof ListLocationId
> = z.nativeEnum(ListLocationId);

/** @internal */
export const ListLocationId$outboundSchema: z.ZodNativeEnum<
  typeof ListLocationId
> = ListLocationId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLocationId$ {
  /** @deprecated use `ListLocationId$inboundSchema` instead. */
  export const inboundSchema = ListLocationId$inboundSchema;
  /** @deprecated use `ListLocationId$outboundSchema` instead. */
  export const outboundSchema = ListLocationId$outboundSchema;
}

/** @internal */
export const ListOffset$inboundSchema: z.ZodNativeEnum<typeof ListOffset> = z
  .nativeEnum(ListOffset);

/** @internal */
export const ListOffset$outboundSchema: z.ZodNativeEnum<typeof ListOffset> =
  ListOffset$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOffset$ {
  /** @deprecated use `ListOffset$inboundSchema` instead. */
  export const inboundSchema = ListOffset$inboundSchema;
  /** @deprecated use `ListOffset$outboundSchema` instead. */
  export const outboundSchema = ListOffset$outboundSchema;
}

/** @internal */
export const ListOrder$inboundSchema: z.ZodNativeEnum<typeof ListOrder> = z
  .nativeEnum(ListOrder);

/** @internal */
export const ListOrder$outboundSchema: z.ZodNativeEnum<typeof ListOrder> =
  ListOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrder$ {
  /** @deprecated use `ListOrder$inboundSchema` instead. */
  export const inboundSchema = ListOrder$inboundSchema;
  /** @deprecated use `ListOrder$outboundSchema` instead. */
  export const outboundSchema = ListOrder$outboundSchema;
}

/** @internal */
export const ListParentId$inboundSchema: z.ZodNativeEnum<typeof ListParentId> =
  z.nativeEnum(ListParentId);

/** @internal */
export const ListParentId$outboundSchema: z.ZodNativeEnum<typeof ListParentId> =
  ListParentId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListParentId$ {
  /** @deprecated use `ListParentId$inboundSchema` instead. */
  export const inboundSchema = ListParentId$inboundSchema;
  /** @deprecated use `ListParentId$outboundSchema` instead. */
  export const outboundSchema = ListParentId$outboundSchema;
}

/** @internal */
export const ListProjectId$inboundSchema: z.ZodNativeEnum<
  typeof ListProjectId
> = z.nativeEnum(ListProjectId);

/** @internal */
export const ListProjectId$outboundSchema: z.ZodNativeEnum<
  typeof ListProjectId
> = ListProjectId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProjectId$ {
  /** @deprecated use `ListProjectId$inboundSchema` instead. */
  export const inboundSchema = ListProjectId$inboundSchema;
  /** @deprecated use `ListProjectId$outboundSchema` instead. */
  export const outboundSchema = ListProjectId$outboundSchema;
}

/** @internal */
export const ListQuery$inboundSchema: z.ZodNativeEnum<typeof ListQuery> = z
  .nativeEnum(ListQuery);

/** @internal */
export const ListQuery$outboundSchema: z.ZodNativeEnum<typeof ListQuery> =
  ListQuery$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListQuery$ {
  /** @deprecated use `ListQuery$inboundSchema` instead. */
  export const inboundSchema = ListQuery$inboundSchema;
  /** @deprecated use `ListQuery$outboundSchema` instead. */
  export const outboundSchema = ListQuery$outboundSchema;
}

/** @internal */
export const ListRawFields$inboundSchema: z.ZodNativeEnum<
  typeof ListRawFields
> = z.nativeEnum(ListRawFields);

/** @internal */
export const ListRawFields$outboundSchema: z.ZodNativeEnum<
  typeof ListRawFields
> = ListRawFields$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRawFields$ {
  /** @deprecated use `ListRawFields$inboundSchema` instead. */
  export const inboundSchema = ListRawFields$inboundSchema;
  /** @deprecated use `ListRawFields$outboundSchema` instead. */
  export const outboundSchema = ListRawFields$outboundSchema;
}

/** @internal */
export const ListSortByCreatedAt$inboundSchema: z.ZodNativeEnum<
  typeof ListSortByCreatedAt
> = z.nativeEnum(ListSortByCreatedAt);

/** @internal */
export const ListSortByCreatedAt$outboundSchema: z.ZodNativeEnum<
  typeof ListSortByCreatedAt
> = ListSortByCreatedAt$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSortByCreatedAt$ {
  /** @deprecated use `ListSortByCreatedAt$inboundSchema` instead. */
  export const inboundSchema = ListSortByCreatedAt$inboundSchema;
  /** @deprecated use `ListSortByCreatedAt$outboundSchema` instead. */
  export const outboundSchema = ListSortByCreatedAt$outboundSchema;
}

/** @internal */
export const ListSortByName$inboundSchema: z.ZodNativeEnum<
  typeof ListSortByName
> = z.nativeEnum(ListSortByName);

/** @internal */
export const ListSortByName$outboundSchema: z.ZodNativeEnum<
  typeof ListSortByName
> = ListSortByName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSortByName$ {
  /** @deprecated use `ListSortByName$inboundSchema` instead. */
  export const inboundSchema = ListSortByName$inboundSchema;
  /** @deprecated use `ListSortByName$outboundSchema` instead. */
  export const outboundSchema = ListSortByName$outboundSchema;
}

/** @internal */
export const ListSortByUpdatedAt$inboundSchema: z.ZodNativeEnum<
  typeof ListSortByUpdatedAt
> = z.nativeEnum(ListSortByUpdatedAt);

/** @internal */
export const ListSortByUpdatedAt$outboundSchema: z.ZodNativeEnum<
  typeof ListSortByUpdatedAt
> = ListSortByUpdatedAt$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSortByUpdatedAt$ {
  /** @deprecated use `ListSortByUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = ListSortByUpdatedAt$inboundSchema;
  /** @deprecated use `ListSortByUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = ListSortByUpdatedAt$outboundSchema;
}

/** @internal */
export const ListSpaceId$inboundSchema: z.ZodNativeEnum<typeof ListSpaceId> = z
  .nativeEnum(ListSpaceId);

/** @internal */
export const ListSpaceId$outboundSchema: z.ZodNativeEnum<typeof ListSpaceId> =
  ListSpaceId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSpaceId$ {
  /** @deprecated use `ListSpaceId$inboundSchema` instead. */
  export const inboundSchema = ListSpaceId$inboundSchema;
  /** @deprecated use `ListSpaceId$outboundSchema` instead. */
  export const outboundSchema = ListSpaceId$outboundSchema;
}

/** @internal */
export const ListTicketId$inboundSchema: z.ZodNativeEnum<typeof ListTicketId> =
  z.nativeEnum(ListTicketId);

/** @internal */
export const ListTicketId$outboundSchema: z.ZodNativeEnum<typeof ListTicketId> =
  ListTicketId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketId$ {
  /** @deprecated use `ListTicketId$inboundSchema` instead. */
  export const inboundSchema = ListTicketId$inboundSchema;
  /** @deprecated use `ListTicketId$outboundSchema` instead. */
  export const outboundSchema = ListTicketId$outboundSchema;
}

/** @internal */
export const ListType$inboundSchema: z.ZodNativeEnum<typeof ListType> = z
  .nativeEnum(ListType);

/** @internal */
export const ListType$outboundSchema: z.ZodNativeEnum<typeof ListType> =
  ListType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListType$ {
  /** @deprecated use `ListType$inboundSchema` instead. */
  export const inboundSchema = ListType$inboundSchema;
  /** @deprecated use `ListType$outboundSchema` instead. */
  export const outboundSchema = ListType$outboundSchema;
}

/** @internal */
export const ListUpdatedGte$inboundSchema: z.ZodNativeEnum<
  typeof ListUpdatedGte
> = z.nativeEnum(ListUpdatedGte);

/** @internal */
export const ListUpdatedGte$outboundSchema: z.ZodNativeEnum<
  typeof ListUpdatedGte
> = ListUpdatedGte$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUpdatedGte$ {
  /** @deprecated use `ListUpdatedGte$inboundSchema` instead. */
  export const inboundSchema = ListUpdatedGte$inboundSchema;
  /** @deprecated use `ListUpdatedGte$outboundSchema` instead. */
  export const outboundSchema = ListUpdatedGte$outboundSchema;
}

/** @internal */
export const ListUserId$inboundSchema: z.ZodNativeEnum<typeof ListUserId> = z
  .nativeEnum(ListUserId);

/** @internal */
export const ListUserId$outboundSchema: z.ZodNativeEnum<typeof ListUserId> =
  ListUserId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserId$ {
  /** @deprecated use `ListUserId$inboundSchema` instead. */
  export const inboundSchema = ListUserId$inboundSchema;
  /** @deprecated use `ListUserId$outboundSchema` instead. */
  export const outboundSchema = ListUserId$outboundSchema;
}

/** @internal */
export const SearchDomain$inboundSchema: z.ZodNativeEnum<typeof SearchDomain> =
  z.nativeEnum(SearchDomain);

/** @internal */
export const SearchDomain$outboundSchema: z.ZodNativeEnum<typeof SearchDomain> =
  SearchDomain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchDomain$ {
  /** @deprecated use `SearchDomain$inboundSchema` instead. */
  export const inboundSchema = SearchDomain$inboundSchema;
  /** @deprecated use `SearchDomain$outboundSchema` instead. */
  export const outboundSchema = SearchDomain$outboundSchema;
}

/** @internal */
export const SearchEmail$inboundSchema: z.ZodNativeEnum<typeof SearchEmail> = z
  .nativeEnum(SearchEmail);

/** @internal */
export const SearchEmail$outboundSchema: z.ZodNativeEnum<typeof SearchEmail> =
  SearchEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchEmail$ {
  /** @deprecated use `SearchEmail$inboundSchema` instead. */
  export const inboundSchema = SearchEmail$inboundSchema;
  /** @deprecated use `SearchEmail$outboundSchema` instead. */
  export const outboundSchema = SearchEmail$outboundSchema;
}

/** @internal */
export const SearchLinkedinurl$inboundSchema: z.ZodNativeEnum<
  typeof SearchLinkedinurl
> = z.nativeEnum(SearchLinkedinurl);

/** @internal */
export const SearchLinkedinurl$outboundSchema: z.ZodNativeEnum<
  typeof SearchLinkedinurl
> = SearchLinkedinurl$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchLinkedinurl$ {
  /** @deprecated use `SearchLinkedinurl$inboundSchema` instead. */
  export const inboundSchema = SearchLinkedinurl$inboundSchema;
  /** @deprecated use `SearchLinkedinurl$outboundSchema` instead. */
  export const outboundSchema = SearchLinkedinurl$outboundSchema;
}

/** @internal */
export const SearchName$inboundSchema: z.ZodNativeEnum<typeof SearchName> = z
  .nativeEnum(SearchName);

/** @internal */
export const SearchName$outboundSchema: z.ZodNativeEnum<typeof SearchName> =
  SearchName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchName$ {
  /** @deprecated use `SearchName$inboundSchema` instead. */
  export const inboundSchema = SearchName$inboundSchema;
  /** @deprecated use `SearchName$outboundSchema` instead. */
  export const outboundSchema = SearchName$outboundSchema;
}

/** @internal */
export const SearchTwitter$inboundSchema: z.ZodNativeEnum<
  typeof SearchTwitter
> = z.nativeEnum(SearchTwitter);

/** @internal */
export const SearchTwitter$outboundSchema: z.ZodNativeEnum<
  typeof SearchTwitter
> = SearchTwitter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTwitter$ {
  /** @deprecated use `SearchTwitter$inboundSchema` instead. */
  export const inboundSchema = SearchTwitter$inboundSchema;
  /** @deprecated use `SearchTwitter$outboundSchema` instead. */
  export const outboundSchema = SearchTwitter$outboundSchema;
}

/** @internal */
export const IntegrationSupport$inboundSchema: z.ZodType<
  IntegrationSupport,
  z.ZodTypeDef,
  unknown
> = z.object({
  from_webhook: FromWebhook$inboundSchema.optional(),
  inbound_fields: z.record(z.any()).optional(),
  list_account_id: ListAccountId$inboundSchema.optional(),
  list_application_id: ListApplicationId$inboundSchema.optional(),
  list_candidate_id: ListCandidateId$inboundSchema.optional(),
  list_channel_id: ListChannelId$inboundSchema.optional(),
  list_collection_id: ListCollectionId$inboundSchema.optional(),
  list_company_id: ListCompanyId$inboundSchema.optional(),
  list_contact_id: ListContactId$inboundSchema.optional(),
  list_customer_id: ListCustomerId$inboundSchema.optional(),
  list_deal_id: ListDealId$inboundSchema.optional(),
  list_interview_id: ListInterviewId$inboundSchema.optional(),
  list_invoice_id: ListInvoiceId$inboundSchema.optional(),
  list_item_id: ListItemId$inboundSchema.optional(),
  list_item_variant_id: ListItemVariantId$inboundSchema.optional(),
  list_job_id: ListJobId$inboundSchema.optional(),
  list_limit: ListLimit$inboundSchema.optional(),
  list_link_id: ListLinkId$inboundSchema.optional(),
  list_list_id: ListListId$inboundSchema.optional(),
  list_location_id: ListLocationId$inboundSchema.optional(),
  list_offset: ListOffset$inboundSchema.optional(),
  list_order: ListOrder$inboundSchema.optional(),
  list_parent_id: ListParentId$inboundSchema.optional(),
  list_project_id: ListProjectId$inboundSchema.optional(),
  list_query: ListQuery$inboundSchema.optional(),
  list_raw_fields: ListRawFields$inboundSchema.optional(),
  list_sort_by_created_at: ListSortByCreatedAt$inboundSchema.optional(),
  list_sort_by_name: ListSortByName$inboundSchema.optional(),
  list_sort_by_updated_at: ListSortByUpdatedAt$inboundSchema.optional(),
  list_space_id: ListSpaceId$inboundSchema.optional(),
  list_ticket_id: ListTicketId$inboundSchema.optional(),
  list_type: ListType$inboundSchema.optional(),
  list_updated_gte: ListUpdatedGte$inboundSchema.optional(),
  list_user_id: ListUserId$inboundSchema.optional(),
  methods: z.record(z.boolean()).optional(),
  outbound_fields: z.record(z.any()).optional(),
  raw_objects: z.array(z.string()).optional(),
  search_domain: SearchDomain$inboundSchema.optional(),
  search_email: SearchEmail$inboundSchema.optional(),
  search_linkedinurl: SearchLinkedinurl$inboundSchema.optional(),
  search_name: SearchName$inboundSchema.optional(),
  search_twitter: SearchTwitter$inboundSchema.optional(),
  webhook_events: PropertyIntegrationSupportWebhookEvents$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "from_webhook": "fromWebhook",
    "inbound_fields": "inboundFields",
    "list_account_id": "listAccountId",
    "list_application_id": "listApplicationId",
    "list_candidate_id": "listCandidateId",
    "list_channel_id": "listChannelId",
    "list_collection_id": "listCollectionId",
    "list_company_id": "listCompanyId",
    "list_contact_id": "listContactId",
    "list_customer_id": "listCustomerId",
    "list_deal_id": "listDealId",
    "list_interview_id": "listInterviewId",
    "list_invoice_id": "listInvoiceId",
    "list_item_id": "listItemId",
    "list_item_variant_id": "listItemVariantId",
    "list_job_id": "listJobId",
    "list_limit": "listLimit",
    "list_link_id": "listLinkId",
    "list_list_id": "listListId",
    "list_location_id": "listLocationId",
    "list_offset": "listOffset",
    "list_order": "listOrder",
    "list_parent_id": "listParentId",
    "list_project_id": "listProjectId",
    "list_query": "listQuery",
    "list_raw_fields": "listRawFields",
    "list_sort_by_created_at": "listSortByCreatedAt",
    "list_sort_by_name": "listSortByName",
    "list_sort_by_updated_at": "listSortByUpdatedAt",
    "list_space_id": "listSpaceId",
    "list_ticket_id": "listTicketId",
    "list_type": "listType",
    "list_updated_gte": "listUpdatedGte",
    "list_user_id": "listUserId",
    "outbound_fields": "outboundFields",
    "raw_objects": "rawObjects",
    "search_domain": "searchDomain",
    "search_email": "searchEmail",
    "search_linkedinurl": "searchLinkedinurl",
    "search_name": "searchName",
    "search_twitter": "searchTwitter",
    "webhook_events": "webhookEvents",
  });
});

/** @internal */
export type IntegrationSupport$Outbound = {
  from_webhook?: string | undefined;
  inbound_fields?: { [k: string]: any } | undefined;
  list_account_id?: string | undefined;
  list_application_id?: string | undefined;
  list_candidate_id?: string | undefined;
  list_channel_id?: string | undefined;
  list_collection_id?: string | undefined;
  list_company_id?: string | undefined;
  list_contact_id?: string | undefined;
  list_customer_id?: string | undefined;
  list_deal_id?: string | undefined;
  list_interview_id?: string | undefined;
  list_invoice_id?: string | undefined;
  list_item_id?: string | undefined;
  list_item_variant_id?: string | undefined;
  list_job_id?: string | undefined;
  list_limit?: string | undefined;
  list_link_id?: string | undefined;
  list_list_id?: string | undefined;
  list_location_id?: string | undefined;
  list_offset?: string | undefined;
  list_order?: string | undefined;
  list_parent_id?: string | undefined;
  list_project_id?: string | undefined;
  list_query?: string | undefined;
  list_raw_fields?: string | undefined;
  list_sort_by_created_at?: string | undefined;
  list_sort_by_name?: string | undefined;
  list_sort_by_updated_at?: string | undefined;
  list_space_id?: string | undefined;
  list_ticket_id?: string | undefined;
  list_type?: string | undefined;
  list_updated_gte?: string | undefined;
  list_user_id?: string | undefined;
  methods?: { [k: string]: boolean } | undefined;
  outbound_fields?: { [k: string]: any } | undefined;
  raw_objects?: Array<string> | undefined;
  search_domain?: string | undefined;
  search_email?: string | undefined;
  search_linkedinurl?: string | undefined;
  search_name?: string | undefined;
  search_twitter?: string | undefined;
  webhook_events?: PropertyIntegrationSupportWebhookEvents$Outbound | undefined;
};

/** @internal */
export const IntegrationSupport$outboundSchema: z.ZodType<
  IntegrationSupport$Outbound,
  z.ZodTypeDef,
  IntegrationSupport
> = z.object({
  fromWebhook: FromWebhook$outboundSchema.optional(),
  inboundFields: z.record(z.any()).optional(),
  listAccountId: ListAccountId$outboundSchema.optional(),
  listApplicationId: ListApplicationId$outboundSchema.optional(),
  listCandidateId: ListCandidateId$outboundSchema.optional(),
  listChannelId: ListChannelId$outboundSchema.optional(),
  listCollectionId: ListCollectionId$outboundSchema.optional(),
  listCompanyId: ListCompanyId$outboundSchema.optional(),
  listContactId: ListContactId$outboundSchema.optional(),
  listCustomerId: ListCustomerId$outboundSchema.optional(),
  listDealId: ListDealId$outboundSchema.optional(),
  listInterviewId: ListInterviewId$outboundSchema.optional(),
  listInvoiceId: ListInvoiceId$outboundSchema.optional(),
  listItemId: ListItemId$outboundSchema.optional(),
  listItemVariantId: ListItemVariantId$outboundSchema.optional(),
  listJobId: ListJobId$outboundSchema.optional(),
  listLimit: ListLimit$outboundSchema.optional(),
  listLinkId: ListLinkId$outboundSchema.optional(),
  listListId: ListListId$outboundSchema.optional(),
  listLocationId: ListLocationId$outboundSchema.optional(),
  listOffset: ListOffset$outboundSchema.optional(),
  listOrder: ListOrder$outboundSchema.optional(),
  listParentId: ListParentId$outboundSchema.optional(),
  listProjectId: ListProjectId$outboundSchema.optional(),
  listQuery: ListQuery$outboundSchema.optional(),
  listRawFields: ListRawFields$outboundSchema.optional(),
  listSortByCreatedAt: ListSortByCreatedAt$outboundSchema.optional(),
  listSortByName: ListSortByName$outboundSchema.optional(),
  listSortByUpdatedAt: ListSortByUpdatedAt$outboundSchema.optional(),
  listSpaceId: ListSpaceId$outboundSchema.optional(),
  listTicketId: ListTicketId$outboundSchema.optional(),
  listType: ListType$outboundSchema.optional(),
  listUpdatedGte: ListUpdatedGte$outboundSchema.optional(),
  listUserId: ListUserId$outboundSchema.optional(),
  methods: z.record(z.boolean()).optional(),
  outboundFields: z.record(z.any()).optional(),
  rawObjects: z.array(z.string()).optional(),
  searchDomain: SearchDomain$outboundSchema.optional(),
  searchEmail: SearchEmail$outboundSchema.optional(),
  searchLinkedinurl: SearchLinkedinurl$outboundSchema.optional(),
  searchName: SearchName$outboundSchema.optional(),
  searchTwitter: SearchTwitter$outboundSchema.optional(),
  webhookEvents: PropertyIntegrationSupportWebhookEvents$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    fromWebhook: "from_webhook",
    inboundFields: "inbound_fields",
    listAccountId: "list_account_id",
    listApplicationId: "list_application_id",
    listCandidateId: "list_candidate_id",
    listChannelId: "list_channel_id",
    listCollectionId: "list_collection_id",
    listCompanyId: "list_company_id",
    listContactId: "list_contact_id",
    listCustomerId: "list_customer_id",
    listDealId: "list_deal_id",
    listInterviewId: "list_interview_id",
    listInvoiceId: "list_invoice_id",
    listItemId: "list_item_id",
    listItemVariantId: "list_item_variant_id",
    listJobId: "list_job_id",
    listLimit: "list_limit",
    listLinkId: "list_link_id",
    listListId: "list_list_id",
    listLocationId: "list_location_id",
    listOffset: "list_offset",
    listOrder: "list_order",
    listParentId: "list_parent_id",
    listProjectId: "list_project_id",
    listQuery: "list_query",
    listRawFields: "list_raw_fields",
    listSortByCreatedAt: "list_sort_by_created_at",
    listSortByName: "list_sort_by_name",
    listSortByUpdatedAt: "list_sort_by_updated_at",
    listSpaceId: "list_space_id",
    listTicketId: "list_ticket_id",
    listType: "list_type",
    listUpdatedGte: "list_updated_gte",
    listUserId: "list_user_id",
    outboundFields: "outbound_fields",
    rawObjects: "raw_objects",
    searchDomain: "search_domain",
    searchEmail: "search_email",
    searchLinkedinurl: "search_linkedinurl",
    searchName: "search_name",
    searchTwitter: "search_twitter",
    webhookEvents: "webhook_events",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationSupport$ {
  /** @deprecated use `IntegrationSupport$inboundSchema` instead. */
  export const inboundSchema = IntegrationSupport$inboundSchema;
  /** @deprecated use `IntegrationSupport$outboundSchema` instead. */
  export const outboundSchema = IntegrationSupport$outboundSchema;
  /** @deprecated use `IntegrationSupport$Outbound` instead. */
  export type Outbound = IntegrationSupport$Outbound;
}
