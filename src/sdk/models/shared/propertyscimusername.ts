/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PropertyScimUserName = {
  familyName?: string | undefined;
  formatted?: string | undefined;
  givenName?: string | undefined;
  honorificPrefix?: string | undefined;
  honorificSuffix?: string | undefined;
  middleName?: string | undefined;
};

/** @internal */
export const PropertyScimUserName$inboundSchema: z.ZodType<
  PropertyScimUserName,
  z.ZodTypeDef,
  unknown
> = z.object({
  familyName: z.string().optional(),
  formatted: z.string().optional(),
  givenName: z.string().optional(),
  honorificPrefix: z.string().optional(),
  honorificSuffix: z.string().optional(),
  middleName: z.string().optional(),
});

/** @internal */
export type PropertyScimUserName$Outbound = {
  familyName?: string | undefined;
  formatted?: string | undefined;
  givenName?: string | undefined;
  honorificPrefix?: string | undefined;
  honorificSuffix?: string | undefined;
  middleName?: string | undefined;
};

/** @internal */
export const PropertyScimUserName$outboundSchema: z.ZodType<
  PropertyScimUserName$Outbound,
  z.ZodTypeDef,
  PropertyScimUserName
> = z.object({
  familyName: z.string().optional(),
  formatted: z.string().optional(),
  givenName: z.string().optional(),
  honorificPrefix: z.string().optional(),
  honorificSuffix: z.string().optional(),
  middleName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyScimUserName$ {
  /** @deprecated use `PropertyScimUserName$inboundSchema` instead. */
  export const inboundSchema = PropertyScimUserName$inboundSchema;
  /** @deprecated use `PropertyScimUserName$outboundSchema` instead. */
  export const outboundSchema = PropertyScimUserName$outboundSchema;
  /** @deprecated use `PropertyScimUserName$Outbound` instead. */
  export type Outbound = PropertyScimUserName$Outbound;
}

export function propertyScimUserNameToJSON(
  propertyScimUserName: PropertyScimUserName,
): string {
  return JSON.stringify(
    PropertyScimUserName$outboundSchema.parse(propertyScimUserName),
  );
}

export function propertyScimUserNameFromJSON(
  jsonString: string,
): SafeParseResult<PropertyScimUserName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyScimUserName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyScimUserName' from JSON`,
  );
}
