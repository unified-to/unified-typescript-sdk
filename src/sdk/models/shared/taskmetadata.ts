/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TaskMetadataSchemasExtraData52 = {};

export type TaskMetadata5 = TaskMetadataSchemasExtraData52 | Array<any>;

export type TaskMetadataSchemasExtraData2 = {};

export type TaskMetadata4 = TaskMetadataSchemasExtraData2 | boolean;

export type TaskMetadataSchemasExtraData32 = {};

export type TaskMetadata3 = TaskMetadataSchemasExtraData32 | number;

export type TaskMetadataSchemasExtraData22 = {};

export type TaskMetadata2 = TaskMetadataSchemasExtraData22 | string;

export type TaskMetadata1 = {};

export type TaskMetadataExtraData =
  | TaskMetadata1
  | TaskMetadataSchemasExtraData22
  | string
  | TaskMetadataSchemasExtraData32
  | number
  | TaskMetadataSchemasExtraData2
  | boolean
  | TaskMetadataSchemasExtraData52
  | Array<any>;

export const TaskMetadataFormat = {
  Text: "TEXT",
  Number: "NUMBER",
  Date: "DATE",
  Boolean: "BOOLEAN",
  File: "FILE",
  Textarea: "TEXTAREA",
  SingleSelect: "SINGLE_SELECT",
  MultipleSelect: "MULTIPLE_SELECT",
  Measurement: "MEASUREMENT",
  Price: "PRICE",
  YesNo: "YES_NO",
  Currency: "CURRENCY",
  Url: "URL",
} as const;
export type TaskMetadataFormat = OpenEnum<typeof TaskMetadataFormat>;

export type TaskMetadataSchemasValue52 = {};

export type TaskMetadataSchemas5 = TaskMetadataSchemasValue52 | Array<any>;

export type TaskMetadataSchemasValue42 = {};

export type TaskMetadataSchemas4 = TaskMetadataSchemasValue42 | boolean;

export type TaskMetadataSchemasValue32 = {};

export type TaskMetadataSchemas3 = TaskMetadataSchemasValue32 | number;

export type TaskMetadataSchemasValue2 = {};

export type TaskMetadataSchemas2 = TaskMetadataSchemasValue2 | string;

export type TaskMetadataSchemas1 = {};

export type TaskMetadataValue =
  | TaskMetadataSchemas1
  | TaskMetadataSchemasValue2
  | string
  | TaskMetadataSchemasValue32
  | number
  | TaskMetadataSchemasValue42
  | boolean
  | TaskMetadataSchemasValue52
  | Array<any>;

export type TaskMetadata = {
  extraData?:
    | TaskMetadata1
    | TaskMetadataSchemasExtraData22
    | string
    | TaskMetadataSchemasExtraData32
    | number
    | TaskMetadataSchemasExtraData2
    | boolean
    | TaskMetadataSchemasExtraData52
    | Array<any>
    | undefined;
  format?: TaskMetadataFormat | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?:
    | TaskMetadataSchemas1
    | TaskMetadataSchemasValue2
    | string
    | TaskMetadataSchemasValue32
    | number
    | TaskMetadataSchemasValue42
    | boolean
    | TaskMetadataSchemasValue52
    | Array<any>
    | undefined;
};

/** @internal */
export const TaskMetadataSchemasExtraData52$inboundSchema: z.ZodType<
  TaskMetadataSchemasExtraData52,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMetadataSchemasExtraData52$Outbound = {};

/** @internal */
export const TaskMetadataSchemasExtraData52$outboundSchema: z.ZodType<
  TaskMetadataSchemasExtraData52$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemasExtraData52
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemasExtraData52$ {
  /** @deprecated use `TaskMetadataSchemasExtraData52$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemasExtraData52$inboundSchema;
  /** @deprecated use `TaskMetadataSchemasExtraData52$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemasExtraData52$outboundSchema;
  /** @deprecated use `TaskMetadataSchemasExtraData52$Outbound` instead. */
  export type Outbound = TaskMetadataSchemasExtraData52$Outbound;
}

export function taskMetadataSchemasExtraData52ToJSON(
  taskMetadataSchemasExtraData52: TaskMetadataSchemasExtraData52,
): string {
  return JSON.stringify(
    TaskMetadataSchemasExtraData52$outboundSchema.parse(
      taskMetadataSchemasExtraData52,
    ),
  );
}

export function taskMetadataSchemasExtraData52FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemasExtraData52, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemasExtraData52$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemasExtraData52' from JSON`,
  );
}

/** @internal */
export const TaskMetadata5$inboundSchema: z.ZodType<
  TaskMetadata5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TaskMetadataSchemasExtraData52$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type TaskMetadata5$Outbound =
  | TaskMetadataSchemasExtraData52$Outbound
  | Array<any>;

/** @internal */
export const TaskMetadata5$outboundSchema: z.ZodType<
  TaskMetadata5$Outbound,
  z.ZodTypeDef,
  TaskMetadata5
> = z.union([
  z.lazy(() => TaskMetadataSchemasExtraData52$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadata5$ {
  /** @deprecated use `TaskMetadata5$inboundSchema` instead. */
  export const inboundSchema = TaskMetadata5$inboundSchema;
  /** @deprecated use `TaskMetadata5$outboundSchema` instead. */
  export const outboundSchema = TaskMetadata5$outboundSchema;
  /** @deprecated use `TaskMetadata5$Outbound` instead. */
  export type Outbound = TaskMetadata5$Outbound;
}

export function taskMetadata5ToJSON(taskMetadata5: TaskMetadata5): string {
  return JSON.stringify(TaskMetadata5$outboundSchema.parse(taskMetadata5));
}

export function taskMetadata5FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadata5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadata5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadata5' from JSON`,
  );
}

/** @internal */
export const TaskMetadataSchemasExtraData2$inboundSchema: z.ZodType<
  TaskMetadataSchemasExtraData2,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMetadataSchemasExtraData2$Outbound = {};

/** @internal */
export const TaskMetadataSchemasExtraData2$outboundSchema: z.ZodType<
  TaskMetadataSchemasExtraData2$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemasExtraData2
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemasExtraData2$ {
  /** @deprecated use `TaskMetadataSchemasExtraData2$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemasExtraData2$inboundSchema;
  /** @deprecated use `TaskMetadataSchemasExtraData2$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemasExtraData2$outboundSchema;
  /** @deprecated use `TaskMetadataSchemasExtraData2$Outbound` instead. */
  export type Outbound = TaskMetadataSchemasExtraData2$Outbound;
}

export function taskMetadataSchemasExtraData2ToJSON(
  taskMetadataSchemasExtraData2: TaskMetadataSchemasExtraData2,
): string {
  return JSON.stringify(
    TaskMetadataSchemasExtraData2$outboundSchema.parse(
      taskMetadataSchemasExtraData2,
    ),
  );
}

export function taskMetadataSchemasExtraData2FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemasExtraData2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemasExtraData2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemasExtraData2' from JSON`,
  );
}

/** @internal */
export const TaskMetadata4$inboundSchema: z.ZodType<
  TaskMetadata4,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TaskMetadataSchemasExtraData2$inboundSchema),
  z.boolean(),
]);

/** @internal */
export type TaskMetadata4$Outbound =
  | TaskMetadataSchemasExtraData2$Outbound
  | boolean;

/** @internal */
export const TaskMetadata4$outboundSchema: z.ZodType<
  TaskMetadata4$Outbound,
  z.ZodTypeDef,
  TaskMetadata4
> = z.union([
  z.lazy(() => TaskMetadataSchemasExtraData2$outboundSchema),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadata4$ {
  /** @deprecated use `TaskMetadata4$inboundSchema` instead. */
  export const inboundSchema = TaskMetadata4$inboundSchema;
  /** @deprecated use `TaskMetadata4$outboundSchema` instead. */
  export const outboundSchema = TaskMetadata4$outboundSchema;
  /** @deprecated use `TaskMetadata4$Outbound` instead. */
  export type Outbound = TaskMetadata4$Outbound;
}

export function taskMetadata4ToJSON(taskMetadata4: TaskMetadata4): string {
  return JSON.stringify(TaskMetadata4$outboundSchema.parse(taskMetadata4));
}

export function taskMetadata4FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadata4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadata4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadata4' from JSON`,
  );
}

/** @internal */
export const TaskMetadataSchemasExtraData32$inboundSchema: z.ZodType<
  TaskMetadataSchemasExtraData32,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMetadataSchemasExtraData32$Outbound = {};

/** @internal */
export const TaskMetadataSchemasExtraData32$outboundSchema: z.ZodType<
  TaskMetadataSchemasExtraData32$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemasExtraData32
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemasExtraData32$ {
  /** @deprecated use `TaskMetadataSchemasExtraData32$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemasExtraData32$inboundSchema;
  /** @deprecated use `TaskMetadataSchemasExtraData32$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemasExtraData32$outboundSchema;
  /** @deprecated use `TaskMetadataSchemasExtraData32$Outbound` instead. */
  export type Outbound = TaskMetadataSchemasExtraData32$Outbound;
}

export function taskMetadataSchemasExtraData32ToJSON(
  taskMetadataSchemasExtraData32: TaskMetadataSchemasExtraData32,
): string {
  return JSON.stringify(
    TaskMetadataSchemasExtraData32$outboundSchema.parse(
      taskMetadataSchemasExtraData32,
    ),
  );
}

export function taskMetadataSchemasExtraData32FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemasExtraData32, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemasExtraData32$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemasExtraData32' from JSON`,
  );
}

/** @internal */
export const TaskMetadata3$inboundSchema: z.ZodType<
  TaskMetadata3,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TaskMetadataSchemasExtraData32$inboundSchema),
  z.number(),
]);

/** @internal */
export type TaskMetadata3$Outbound =
  | TaskMetadataSchemasExtraData32$Outbound
  | number;

/** @internal */
export const TaskMetadata3$outboundSchema: z.ZodType<
  TaskMetadata3$Outbound,
  z.ZodTypeDef,
  TaskMetadata3
> = z.union([
  z.lazy(() => TaskMetadataSchemasExtraData32$outboundSchema),
  z.number(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadata3$ {
  /** @deprecated use `TaskMetadata3$inboundSchema` instead. */
  export const inboundSchema = TaskMetadata3$inboundSchema;
  /** @deprecated use `TaskMetadata3$outboundSchema` instead. */
  export const outboundSchema = TaskMetadata3$outboundSchema;
  /** @deprecated use `TaskMetadata3$Outbound` instead. */
  export type Outbound = TaskMetadata3$Outbound;
}

export function taskMetadata3ToJSON(taskMetadata3: TaskMetadata3): string {
  return JSON.stringify(TaskMetadata3$outboundSchema.parse(taskMetadata3));
}

export function taskMetadata3FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadata3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadata3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadata3' from JSON`,
  );
}

/** @internal */
export const TaskMetadataSchemasExtraData22$inboundSchema: z.ZodType<
  TaskMetadataSchemasExtraData22,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMetadataSchemasExtraData22$Outbound = {};

/** @internal */
export const TaskMetadataSchemasExtraData22$outboundSchema: z.ZodType<
  TaskMetadataSchemasExtraData22$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemasExtraData22
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemasExtraData22$ {
  /** @deprecated use `TaskMetadataSchemasExtraData22$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemasExtraData22$inboundSchema;
  /** @deprecated use `TaskMetadataSchemasExtraData22$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemasExtraData22$outboundSchema;
  /** @deprecated use `TaskMetadataSchemasExtraData22$Outbound` instead. */
  export type Outbound = TaskMetadataSchemasExtraData22$Outbound;
}

export function taskMetadataSchemasExtraData22ToJSON(
  taskMetadataSchemasExtraData22: TaskMetadataSchemasExtraData22,
): string {
  return JSON.stringify(
    TaskMetadataSchemasExtraData22$outboundSchema.parse(
      taskMetadataSchemasExtraData22,
    ),
  );
}

export function taskMetadataSchemasExtraData22FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemasExtraData22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemasExtraData22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemasExtraData22' from JSON`,
  );
}

/** @internal */
export const TaskMetadata2$inboundSchema: z.ZodType<
  TaskMetadata2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TaskMetadataSchemasExtraData22$inboundSchema),
  z.string(),
]);

/** @internal */
export type TaskMetadata2$Outbound =
  | TaskMetadataSchemasExtraData22$Outbound
  | string;

/** @internal */
export const TaskMetadata2$outboundSchema: z.ZodType<
  TaskMetadata2$Outbound,
  z.ZodTypeDef,
  TaskMetadata2
> = z.union([
  z.lazy(() => TaskMetadataSchemasExtraData22$outboundSchema),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadata2$ {
  /** @deprecated use `TaskMetadata2$inboundSchema` instead. */
  export const inboundSchema = TaskMetadata2$inboundSchema;
  /** @deprecated use `TaskMetadata2$outboundSchema` instead. */
  export const outboundSchema = TaskMetadata2$outboundSchema;
  /** @deprecated use `TaskMetadata2$Outbound` instead. */
  export type Outbound = TaskMetadata2$Outbound;
}

export function taskMetadata2ToJSON(taskMetadata2: TaskMetadata2): string {
  return JSON.stringify(TaskMetadata2$outboundSchema.parse(taskMetadata2));
}

export function taskMetadata2FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadata2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadata2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadata2' from JSON`,
  );
}

/** @internal */
export const TaskMetadata1$inboundSchema: z.ZodType<
  TaskMetadata1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMetadata1$Outbound = {};

/** @internal */
export const TaskMetadata1$outboundSchema: z.ZodType<
  TaskMetadata1$Outbound,
  z.ZodTypeDef,
  TaskMetadata1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadata1$ {
  /** @deprecated use `TaskMetadata1$inboundSchema` instead. */
  export const inboundSchema = TaskMetadata1$inboundSchema;
  /** @deprecated use `TaskMetadata1$outboundSchema` instead. */
  export const outboundSchema = TaskMetadata1$outboundSchema;
  /** @deprecated use `TaskMetadata1$Outbound` instead. */
  export type Outbound = TaskMetadata1$Outbound;
}

export function taskMetadata1ToJSON(taskMetadata1: TaskMetadata1): string {
  return JSON.stringify(TaskMetadata1$outboundSchema.parse(taskMetadata1));
}

export function taskMetadata1FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadata1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadata1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadata1' from JSON`,
  );
}

/** @internal */
export const TaskMetadataExtraData$inboundSchema: z.ZodType<
  TaskMetadataExtraData,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TaskMetadata1$inboundSchema),
  z.union([
    z.lazy(() => TaskMetadataSchemasExtraData22$inboundSchema),
    z.string(),
  ]),
  z.union([
    z.lazy(() => TaskMetadataSchemasExtraData32$inboundSchema),
    z.number(),
  ]),
  z.union([
    z.lazy(() => TaskMetadataSchemasExtraData2$inboundSchema),
    z.boolean(),
  ]),
  z.union([
    z.lazy(() => TaskMetadataSchemasExtraData52$inboundSchema),
    z.array(z.any()),
  ]),
]);

/** @internal */
export type TaskMetadataExtraData$Outbound =
  | TaskMetadata1$Outbound
  | TaskMetadataSchemasExtraData22$Outbound
  | string
  | TaskMetadataSchemasExtraData32$Outbound
  | number
  | TaskMetadataSchemasExtraData2$Outbound
  | boolean
  | TaskMetadataSchemasExtraData52$Outbound
  | Array<any>;

/** @internal */
export const TaskMetadataExtraData$outboundSchema: z.ZodType<
  TaskMetadataExtraData$Outbound,
  z.ZodTypeDef,
  TaskMetadataExtraData
> = z.union([
  z.lazy(() => TaskMetadata1$outboundSchema),
  z.union([
    z.lazy(() => TaskMetadataSchemasExtraData22$outboundSchema),
    z.string(),
  ]),
  z.union([
    z.lazy(() => TaskMetadataSchemasExtraData32$outboundSchema),
    z.number(),
  ]),
  z.union([
    z.lazy(() => TaskMetadataSchemasExtraData2$outboundSchema),
    z.boolean(),
  ]),
  z.union([
    z.lazy(() => TaskMetadataSchemasExtraData52$outboundSchema),
    z.array(z.any()),
  ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataExtraData$ {
  /** @deprecated use `TaskMetadataExtraData$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataExtraData$inboundSchema;
  /** @deprecated use `TaskMetadataExtraData$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataExtraData$outboundSchema;
  /** @deprecated use `TaskMetadataExtraData$Outbound` instead. */
  export type Outbound = TaskMetadataExtraData$Outbound;
}

export function taskMetadataExtraDataToJSON(
  taskMetadataExtraData: TaskMetadataExtraData,
): string {
  return JSON.stringify(
    TaskMetadataExtraData$outboundSchema.parse(taskMetadataExtraData),
  );
}

export function taskMetadataExtraDataFromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataExtraData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataExtraData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataExtraData' from JSON`,
  );
}

/** @internal */
export const TaskMetadataFormat$inboundSchema: z.ZodType<
  TaskMetadataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskMetadataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskMetadataFormat$outboundSchema: z.ZodType<
  TaskMetadataFormat,
  z.ZodTypeDef,
  TaskMetadataFormat
> = z.union([
  z.nativeEnum(TaskMetadataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataFormat$ {
  /** @deprecated use `TaskMetadataFormat$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataFormat$inboundSchema;
  /** @deprecated use `TaskMetadataFormat$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataFormat$outboundSchema;
}

/** @internal */
export const TaskMetadataSchemasValue52$inboundSchema: z.ZodType<
  TaskMetadataSchemasValue52,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMetadataSchemasValue52$Outbound = {};

/** @internal */
export const TaskMetadataSchemasValue52$outboundSchema: z.ZodType<
  TaskMetadataSchemasValue52$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemasValue52
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemasValue52$ {
  /** @deprecated use `TaskMetadataSchemasValue52$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemasValue52$inboundSchema;
  /** @deprecated use `TaskMetadataSchemasValue52$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemasValue52$outboundSchema;
  /** @deprecated use `TaskMetadataSchemasValue52$Outbound` instead. */
  export type Outbound = TaskMetadataSchemasValue52$Outbound;
}

export function taskMetadataSchemasValue52ToJSON(
  taskMetadataSchemasValue52: TaskMetadataSchemasValue52,
): string {
  return JSON.stringify(
    TaskMetadataSchemasValue52$outboundSchema.parse(taskMetadataSchemasValue52),
  );
}

export function taskMetadataSchemasValue52FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemasValue52, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemasValue52$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemasValue52' from JSON`,
  );
}

/** @internal */
export const TaskMetadataSchemas5$inboundSchema: z.ZodType<
  TaskMetadataSchemas5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TaskMetadataSchemasValue52$inboundSchema),
  z.array(z.any()),
]);

/** @internal */
export type TaskMetadataSchemas5$Outbound =
  | TaskMetadataSchemasValue52$Outbound
  | Array<any>;

/** @internal */
export const TaskMetadataSchemas5$outboundSchema: z.ZodType<
  TaskMetadataSchemas5$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemas5
> = z.union([
  z.lazy(() => TaskMetadataSchemasValue52$outboundSchema),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemas5$ {
  /** @deprecated use `TaskMetadataSchemas5$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemas5$inboundSchema;
  /** @deprecated use `TaskMetadataSchemas5$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemas5$outboundSchema;
  /** @deprecated use `TaskMetadataSchemas5$Outbound` instead. */
  export type Outbound = TaskMetadataSchemas5$Outbound;
}

export function taskMetadataSchemas5ToJSON(
  taskMetadataSchemas5: TaskMetadataSchemas5,
): string {
  return JSON.stringify(
    TaskMetadataSchemas5$outboundSchema.parse(taskMetadataSchemas5),
  );
}

export function taskMetadataSchemas5FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemas5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemas5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemas5' from JSON`,
  );
}

/** @internal */
export const TaskMetadataSchemasValue42$inboundSchema: z.ZodType<
  TaskMetadataSchemasValue42,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMetadataSchemasValue42$Outbound = {};

/** @internal */
export const TaskMetadataSchemasValue42$outboundSchema: z.ZodType<
  TaskMetadataSchemasValue42$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemasValue42
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemasValue42$ {
  /** @deprecated use `TaskMetadataSchemasValue42$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemasValue42$inboundSchema;
  /** @deprecated use `TaskMetadataSchemasValue42$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemasValue42$outboundSchema;
  /** @deprecated use `TaskMetadataSchemasValue42$Outbound` instead. */
  export type Outbound = TaskMetadataSchemasValue42$Outbound;
}

export function taskMetadataSchemasValue42ToJSON(
  taskMetadataSchemasValue42: TaskMetadataSchemasValue42,
): string {
  return JSON.stringify(
    TaskMetadataSchemasValue42$outboundSchema.parse(taskMetadataSchemasValue42),
  );
}

export function taskMetadataSchemasValue42FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemasValue42, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemasValue42$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemasValue42' from JSON`,
  );
}

/** @internal */
export const TaskMetadataSchemas4$inboundSchema: z.ZodType<
  TaskMetadataSchemas4,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TaskMetadataSchemasValue42$inboundSchema),
  z.boolean(),
]);

/** @internal */
export type TaskMetadataSchemas4$Outbound =
  | TaskMetadataSchemasValue42$Outbound
  | boolean;

/** @internal */
export const TaskMetadataSchemas4$outboundSchema: z.ZodType<
  TaskMetadataSchemas4$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemas4
> = z.union([
  z.lazy(() => TaskMetadataSchemasValue42$outboundSchema),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemas4$ {
  /** @deprecated use `TaskMetadataSchemas4$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemas4$inboundSchema;
  /** @deprecated use `TaskMetadataSchemas4$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemas4$outboundSchema;
  /** @deprecated use `TaskMetadataSchemas4$Outbound` instead. */
  export type Outbound = TaskMetadataSchemas4$Outbound;
}

export function taskMetadataSchemas4ToJSON(
  taskMetadataSchemas4: TaskMetadataSchemas4,
): string {
  return JSON.stringify(
    TaskMetadataSchemas4$outboundSchema.parse(taskMetadataSchemas4),
  );
}

export function taskMetadataSchemas4FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemas4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemas4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemas4' from JSON`,
  );
}

/** @internal */
export const TaskMetadataSchemasValue32$inboundSchema: z.ZodType<
  TaskMetadataSchemasValue32,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMetadataSchemasValue32$Outbound = {};

/** @internal */
export const TaskMetadataSchemasValue32$outboundSchema: z.ZodType<
  TaskMetadataSchemasValue32$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemasValue32
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemasValue32$ {
  /** @deprecated use `TaskMetadataSchemasValue32$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemasValue32$inboundSchema;
  /** @deprecated use `TaskMetadataSchemasValue32$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemasValue32$outboundSchema;
  /** @deprecated use `TaskMetadataSchemasValue32$Outbound` instead. */
  export type Outbound = TaskMetadataSchemasValue32$Outbound;
}

export function taskMetadataSchemasValue32ToJSON(
  taskMetadataSchemasValue32: TaskMetadataSchemasValue32,
): string {
  return JSON.stringify(
    TaskMetadataSchemasValue32$outboundSchema.parse(taskMetadataSchemasValue32),
  );
}

export function taskMetadataSchemasValue32FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemasValue32, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemasValue32$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemasValue32' from JSON`,
  );
}

/** @internal */
export const TaskMetadataSchemas3$inboundSchema: z.ZodType<
  TaskMetadataSchemas3,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TaskMetadataSchemasValue32$inboundSchema),
  z.number(),
]);

/** @internal */
export type TaskMetadataSchemas3$Outbound =
  | TaskMetadataSchemasValue32$Outbound
  | number;

/** @internal */
export const TaskMetadataSchemas3$outboundSchema: z.ZodType<
  TaskMetadataSchemas3$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemas3
> = z.union([
  z.lazy(() => TaskMetadataSchemasValue32$outboundSchema),
  z.number(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemas3$ {
  /** @deprecated use `TaskMetadataSchemas3$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemas3$inboundSchema;
  /** @deprecated use `TaskMetadataSchemas3$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemas3$outboundSchema;
  /** @deprecated use `TaskMetadataSchemas3$Outbound` instead. */
  export type Outbound = TaskMetadataSchemas3$Outbound;
}

export function taskMetadataSchemas3ToJSON(
  taskMetadataSchemas3: TaskMetadataSchemas3,
): string {
  return JSON.stringify(
    TaskMetadataSchemas3$outboundSchema.parse(taskMetadataSchemas3),
  );
}

export function taskMetadataSchemas3FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemas3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemas3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemas3' from JSON`,
  );
}

/** @internal */
export const TaskMetadataSchemasValue2$inboundSchema: z.ZodType<
  TaskMetadataSchemasValue2,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMetadataSchemasValue2$Outbound = {};

/** @internal */
export const TaskMetadataSchemasValue2$outboundSchema: z.ZodType<
  TaskMetadataSchemasValue2$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemasValue2
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemasValue2$ {
  /** @deprecated use `TaskMetadataSchemasValue2$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemasValue2$inboundSchema;
  /** @deprecated use `TaskMetadataSchemasValue2$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemasValue2$outboundSchema;
  /** @deprecated use `TaskMetadataSchemasValue2$Outbound` instead. */
  export type Outbound = TaskMetadataSchemasValue2$Outbound;
}

export function taskMetadataSchemasValue2ToJSON(
  taskMetadataSchemasValue2: TaskMetadataSchemasValue2,
): string {
  return JSON.stringify(
    TaskMetadataSchemasValue2$outboundSchema.parse(taskMetadataSchemasValue2),
  );
}

export function taskMetadataSchemasValue2FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemasValue2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemasValue2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemasValue2' from JSON`,
  );
}

/** @internal */
export const TaskMetadataSchemas2$inboundSchema: z.ZodType<
  TaskMetadataSchemas2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TaskMetadataSchemasValue2$inboundSchema),
  z.string(),
]);

/** @internal */
export type TaskMetadataSchemas2$Outbound =
  | TaskMetadataSchemasValue2$Outbound
  | string;

/** @internal */
export const TaskMetadataSchemas2$outboundSchema: z.ZodType<
  TaskMetadataSchemas2$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemas2
> = z.union([
  z.lazy(() => TaskMetadataSchemasValue2$outboundSchema),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemas2$ {
  /** @deprecated use `TaskMetadataSchemas2$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemas2$inboundSchema;
  /** @deprecated use `TaskMetadataSchemas2$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemas2$outboundSchema;
  /** @deprecated use `TaskMetadataSchemas2$Outbound` instead. */
  export type Outbound = TaskMetadataSchemas2$Outbound;
}

export function taskMetadataSchemas2ToJSON(
  taskMetadataSchemas2: TaskMetadataSchemas2,
): string {
  return JSON.stringify(
    TaskMetadataSchemas2$outboundSchema.parse(taskMetadataSchemas2),
  );
}

export function taskMetadataSchemas2FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemas2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemas2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemas2' from JSON`,
  );
}

/** @internal */
export const TaskMetadataSchemas1$inboundSchema: z.ZodType<
  TaskMetadataSchemas1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMetadataSchemas1$Outbound = {};

/** @internal */
export const TaskMetadataSchemas1$outboundSchema: z.ZodType<
  TaskMetadataSchemas1$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemas1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemas1$ {
  /** @deprecated use `TaskMetadataSchemas1$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemas1$inboundSchema;
  /** @deprecated use `TaskMetadataSchemas1$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemas1$outboundSchema;
  /** @deprecated use `TaskMetadataSchemas1$Outbound` instead. */
  export type Outbound = TaskMetadataSchemas1$Outbound;
}

export function taskMetadataSchemas1ToJSON(
  taskMetadataSchemas1: TaskMetadataSchemas1,
): string {
  return JSON.stringify(
    TaskMetadataSchemas1$outboundSchema.parse(taskMetadataSchemas1),
  );
}

export function taskMetadataSchemas1FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemas1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemas1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemas1' from JSON`,
  );
}

/** @internal */
export const TaskMetadataValue$inboundSchema: z.ZodType<
  TaskMetadataValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TaskMetadataSchemas1$inboundSchema),
  z.union([z.lazy(() => TaskMetadataSchemasValue2$inboundSchema), z.string()]),
  z.union([z.lazy(() => TaskMetadataSchemasValue32$inboundSchema), z.number()]),
  z.union([
    z.lazy(() => TaskMetadataSchemasValue42$inboundSchema),
    z.boolean(),
  ]),
  z.union([
    z.lazy(() => TaskMetadataSchemasValue52$inboundSchema),
    z.array(z.any()),
  ]),
]);

/** @internal */
export type TaskMetadataValue$Outbound =
  | TaskMetadataSchemas1$Outbound
  | TaskMetadataSchemasValue2$Outbound
  | string
  | TaskMetadataSchemasValue32$Outbound
  | number
  | TaskMetadataSchemasValue42$Outbound
  | boolean
  | TaskMetadataSchemasValue52$Outbound
  | Array<any>;

/** @internal */
export const TaskMetadataValue$outboundSchema: z.ZodType<
  TaskMetadataValue$Outbound,
  z.ZodTypeDef,
  TaskMetadataValue
> = z.union([
  z.lazy(() => TaskMetadataSchemas1$outboundSchema),
  z.union([z.lazy(() => TaskMetadataSchemasValue2$outboundSchema), z.string()]),
  z.union([
    z.lazy(() => TaskMetadataSchemasValue32$outboundSchema),
    z.number(),
  ]),
  z.union([
    z.lazy(() => TaskMetadataSchemasValue42$outboundSchema),
    z.boolean(),
  ]),
  z.union([
    z.lazy(() => TaskMetadataSchemasValue52$outboundSchema),
    z.array(z.any()),
  ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataValue$ {
  /** @deprecated use `TaskMetadataValue$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataValue$inboundSchema;
  /** @deprecated use `TaskMetadataValue$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataValue$outboundSchema;
  /** @deprecated use `TaskMetadataValue$Outbound` instead. */
  export type Outbound = TaskMetadataValue$Outbound;
}

export function taskMetadataValueToJSON(
  taskMetadataValue: TaskMetadataValue,
): string {
  return JSON.stringify(
    TaskMetadataValue$outboundSchema.parse(taskMetadataValue),
  );
}

export function taskMetadataValueFromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataValue' from JSON`,
  );
}

/** @internal */
export const TaskMetadata$inboundSchema: z.ZodType<
  TaskMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  extra_data: z.union([
    z.lazy(() => TaskMetadata1$inboundSchema),
    z.union([
      z.lazy(() => TaskMetadataSchemasExtraData22$inboundSchema),
      z.string(),
    ]),
    z.union([
      z.lazy(() => TaskMetadataSchemasExtraData32$inboundSchema),
      z.number(),
    ]),
    z.union([
      z.lazy(() => TaskMetadataSchemasExtraData2$inboundSchema),
      z.boolean(),
    ]),
    z.union([
      z.lazy(() => TaskMetadataSchemasExtraData52$inboundSchema),
      z.array(z.any()),
    ]),
  ]).optional(),
  format: TaskMetadataFormat$inboundSchema.optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.union([
    z.lazy(() => TaskMetadataSchemas1$inboundSchema),
    z.union([
      z.lazy(() => TaskMetadataSchemasValue2$inboundSchema),
      z.string(),
    ]),
    z.union([
      z.lazy(() => TaskMetadataSchemasValue32$inboundSchema),
      z.number(),
    ]),
    z.union([
      z.lazy(() => TaskMetadataSchemasValue42$inboundSchema),
      z.boolean(),
    ]),
    z.union([
      z.lazy(() => TaskMetadataSchemasValue52$inboundSchema),
      z.array(z.any()),
    ]),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "extra_data": "extraData",
  });
});

/** @internal */
export type TaskMetadata$Outbound = {
  extra_data?:
    | TaskMetadata1$Outbound
    | TaskMetadataSchemasExtraData22$Outbound
    | string
    | TaskMetadataSchemasExtraData32$Outbound
    | number
    | TaskMetadataSchemasExtraData2$Outbound
    | boolean
    | TaskMetadataSchemasExtraData52$Outbound
    | Array<any>
    | undefined;
  format?: string | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?:
    | TaskMetadataSchemas1$Outbound
    | TaskMetadataSchemasValue2$Outbound
    | string
    | TaskMetadataSchemasValue32$Outbound
    | number
    | TaskMetadataSchemasValue42$Outbound
    | boolean
    | TaskMetadataSchemasValue52$Outbound
    | Array<any>
    | undefined;
};

/** @internal */
export const TaskMetadata$outboundSchema: z.ZodType<
  TaskMetadata$Outbound,
  z.ZodTypeDef,
  TaskMetadata
> = z.object({
  extraData: z.union([
    z.lazy(() => TaskMetadata1$outboundSchema),
    z.union([
      z.lazy(() => TaskMetadataSchemasExtraData22$outboundSchema),
      z.string(),
    ]),
    z.union([
      z.lazy(() => TaskMetadataSchemasExtraData32$outboundSchema),
      z.number(),
    ]),
    z.union([
      z.lazy(() => TaskMetadataSchemasExtraData2$outboundSchema),
      z.boolean(),
    ]),
    z.union([
      z.lazy(() => TaskMetadataSchemasExtraData52$outboundSchema),
      z.array(z.any()),
    ]),
  ]).optional(),
  format: TaskMetadataFormat$outboundSchema.optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.union([
    z.lazy(() => TaskMetadataSchemas1$outboundSchema),
    z.union([
      z.lazy(() => TaskMetadataSchemasValue2$outboundSchema),
      z.string(),
    ]),
    z.union([
      z.lazy(() => TaskMetadataSchemasValue32$outboundSchema),
      z.number(),
    ]),
    z.union([
      z.lazy(() => TaskMetadataSchemasValue42$outboundSchema),
      z.boolean(),
    ]),
    z.union([
      z.lazy(() => TaskMetadataSchemasValue52$outboundSchema),
      z.array(z.any()),
    ]),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    extraData: "extra_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadata$ {
  /** @deprecated use `TaskMetadata$inboundSchema` instead. */
  export const inboundSchema = TaskMetadata$inboundSchema;
  /** @deprecated use `TaskMetadata$outboundSchema` instead. */
  export const outboundSchema = TaskMetadata$outboundSchema;
  /** @deprecated use `TaskMetadata$Outbound` instead. */
  export type Outbound = TaskMetadata$Outbound;
}

export function taskMetadataToJSON(taskMetadata: TaskMetadata): string {
  return JSON.stringify(TaskMetadata$outboundSchema.parse(taskMetadata));
}

export function taskMetadataFromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadata' from JSON`,
  );
}
