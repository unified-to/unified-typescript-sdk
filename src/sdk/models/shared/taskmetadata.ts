/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TaskMetadata1 = {};

export type TaskMetadata5 = TaskMetadata1 | string | number | boolean;

export type TaskMetadataExtraData =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<TaskMetadata1 | string | number | boolean>;

export const TaskMetadataFormat = {
  Text: "TEXT",
  Number: "NUMBER",
  Date: "DATE",
  Boolean: "BOOLEAN",
  File: "FILE",
  Textarea: "TEXTAREA",
  SingleSelect: "SINGLE_SELECT",
  MultipleSelect: "MULTIPLE_SELECT",
  Measurement: "MEASUREMENT",
  Price: "PRICE",
  YesNo: "YES_NO",
  Currency: "CURRENCY",
  Url: "URL",
} as const;
export type TaskMetadataFormat = OpenEnum<typeof TaskMetadataFormat>;

export type TaskMetadataSchemas1 = {};

export type TaskMetadataSchemas5 =
  | TaskMetadataSchemas1
  | string
  | number
  | boolean;

export type TaskMetadataValue =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<TaskMetadataSchemas1 | string | number | boolean>;

export type TaskMetadata = {
  extraData?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<TaskMetadata1 | string | number | boolean>
    | undefined;
  format?: TaskMetadataFormat | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<TaskMetadataSchemas1 | string | number | boolean>
    | undefined;
};

/** @internal */
export const TaskMetadata1$inboundSchema: z.ZodType<
  TaskMetadata1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMetadata1$Outbound = {};

/** @internal */
export const TaskMetadata1$outboundSchema: z.ZodType<
  TaskMetadata1$Outbound,
  z.ZodTypeDef,
  TaskMetadata1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadata1$ {
  /** @deprecated use `TaskMetadata1$inboundSchema` instead. */
  export const inboundSchema = TaskMetadata1$inboundSchema;
  /** @deprecated use `TaskMetadata1$outboundSchema` instead. */
  export const outboundSchema = TaskMetadata1$outboundSchema;
  /** @deprecated use `TaskMetadata1$Outbound` instead. */
  export type Outbound = TaskMetadata1$Outbound;
}

export function taskMetadata1ToJSON(taskMetadata1: TaskMetadata1): string {
  return JSON.stringify(TaskMetadata1$outboundSchema.parse(taskMetadata1));
}

export function taskMetadata1FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadata1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadata1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadata1' from JSON`,
  );
}

/** @internal */
export const TaskMetadata5$inboundSchema: z.ZodType<
  TaskMetadata5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TaskMetadata1$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/** @internal */
export type TaskMetadata5$Outbound =
  | TaskMetadata1$Outbound
  | string
  | number
  | boolean;

/** @internal */
export const TaskMetadata5$outboundSchema: z.ZodType<
  TaskMetadata5$Outbound,
  z.ZodTypeDef,
  TaskMetadata5
> = z.union([
  z.lazy(() => TaskMetadata1$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadata5$ {
  /** @deprecated use `TaskMetadata5$inboundSchema` instead. */
  export const inboundSchema = TaskMetadata5$inboundSchema;
  /** @deprecated use `TaskMetadata5$outboundSchema` instead. */
  export const outboundSchema = TaskMetadata5$outboundSchema;
  /** @deprecated use `TaskMetadata5$Outbound` instead. */
  export type Outbound = TaskMetadata5$Outbound;
}

export function taskMetadata5ToJSON(taskMetadata5: TaskMetadata5): string {
  return JSON.stringify(TaskMetadata5$outboundSchema.parse(taskMetadata5));
}

export function taskMetadata5FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadata5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadata5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadata5' from JSON`,
  );
}

/** @internal */
export const TaskMetadataExtraData$inboundSchema: z.ZodType<
  TaskMetadataExtraData,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => TaskMetadata1$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/** @internal */
export type TaskMetadataExtraData$Outbound =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<TaskMetadata1$Outbound | string | number | boolean>;

/** @internal */
export const TaskMetadataExtraData$outboundSchema: z.ZodType<
  TaskMetadataExtraData$Outbound,
  z.ZodTypeDef,
  TaskMetadataExtraData
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => TaskMetadata1$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataExtraData$ {
  /** @deprecated use `TaskMetadataExtraData$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataExtraData$inboundSchema;
  /** @deprecated use `TaskMetadataExtraData$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataExtraData$outboundSchema;
  /** @deprecated use `TaskMetadataExtraData$Outbound` instead. */
  export type Outbound = TaskMetadataExtraData$Outbound;
}

export function taskMetadataExtraDataToJSON(
  taskMetadataExtraData: TaskMetadataExtraData,
): string {
  return JSON.stringify(
    TaskMetadataExtraData$outboundSchema.parse(taskMetadataExtraData),
  );
}

export function taskMetadataExtraDataFromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataExtraData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataExtraData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataExtraData' from JSON`,
  );
}

/** @internal */
export const TaskMetadataFormat$inboundSchema: z.ZodType<
  TaskMetadataFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(TaskMetadataFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const TaskMetadataFormat$outboundSchema: z.ZodType<
  TaskMetadataFormat,
  z.ZodTypeDef,
  TaskMetadataFormat
> = z.union([
  z.nativeEnum(TaskMetadataFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataFormat$ {
  /** @deprecated use `TaskMetadataFormat$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataFormat$inboundSchema;
  /** @deprecated use `TaskMetadataFormat$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataFormat$outboundSchema;
}

/** @internal */
export const TaskMetadataSchemas1$inboundSchema: z.ZodType<
  TaskMetadataSchemas1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TaskMetadataSchemas1$Outbound = {};

/** @internal */
export const TaskMetadataSchemas1$outboundSchema: z.ZodType<
  TaskMetadataSchemas1$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemas1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemas1$ {
  /** @deprecated use `TaskMetadataSchemas1$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemas1$inboundSchema;
  /** @deprecated use `TaskMetadataSchemas1$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemas1$outboundSchema;
  /** @deprecated use `TaskMetadataSchemas1$Outbound` instead. */
  export type Outbound = TaskMetadataSchemas1$Outbound;
}

export function taskMetadataSchemas1ToJSON(
  taskMetadataSchemas1: TaskMetadataSchemas1,
): string {
  return JSON.stringify(
    TaskMetadataSchemas1$outboundSchema.parse(taskMetadataSchemas1),
  );
}

export function taskMetadataSchemas1FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemas1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemas1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemas1' from JSON`,
  );
}

/** @internal */
export const TaskMetadataSchemas5$inboundSchema: z.ZodType<
  TaskMetadataSchemas5,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TaskMetadataSchemas1$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/** @internal */
export type TaskMetadataSchemas5$Outbound =
  | TaskMetadataSchemas1$Outbound
  | string
  | number
  | boolean;

/** @internal */
export const TaskMetadataSchemas5$outboundSchema: z.ZodType<
  TaskMetadataSchemas5$Outbound,
  z.ZodTypeDef,
  TaskMetadataSchemas5
> = z.union([
  z.lazy(() => TaskMetadataSchemas1$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataSchemas5$ {
  /** @deprecated use `TaskMetadataSchemas5$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataSchemas5$inboundSchema;
  /** @deprecated use `TaskMetadataSchemas5$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataSchemas5$outboundSchema;
  /** @deprecated use `TaskMetadataSchemas5$Outbound` instead. */
  export type Outbound = TaskMetadataSchemas5$Outbound;
}

export function taskMetadataSchemas5ToJSON(
  taskMetadataSchemas5: TaskMetadataSchemas5,
): string {
  return JSON.stringify(
    TaskMetadataSchemas5$outboundSchema.parse(taskMetadataSchemas5),
  );
}

export function taskMetadataSchemas5FromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataSchemas5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataSchemas5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataSchemas5' from JSON`,
  );
}

/** @internal */
export const TaskMetadataValue$inboundSchema: z.ZodType<
  TaskMetadataValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => TaskMetadataSchemas1$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/** @internal */
export type TaskMetadataValue$Outbound =
  | { [k: string]: any }
  | string
  | number
  | boolean
  | Array<TaskMetadataSchemas1$Outbound | string | number | boolean>;

/** @internal */
export const TaskMetadataValue$outboundSchema: z.ZodType<
  TaskMetadataValue$Outbound,
  z.ZodTypeDef,
  TaskMetadataValue
> = z.union([
  z.record(z.any()),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.union([
      z.lazy(() => TaskMetadataSchemas1$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadataValue$ {
  /** @deprecated use `TaskMetadataValue$inboundSchema` instead. */
  export const inboundSchema = TaskMetadataValue$inboundSchema;
  /** @deprecated use `TaskMetadataValue$outboundSchema` instead. */
  export const outboundSchema = TaskMetadataValue$outboundSchema;
  /** @deprecated use `TaskMetadataValue$Outbound` instead. */
  export type Outbound = TaskMetadataValue$Outbound;
}

export function taskMetadataValueToJSON(
  taskMetadataValue: TaskMetadataValue,
): string {
  return JSON.stringify(
    TaskMetadataValue$outboundSchema.parse(taskMetadataValue),
  );
}

export function taskMetadataValueFromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadataValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadataValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadataValue' from JSON`,
  );
}

/** @internal */
export const TaskMetadata$inboundSchema: z.ZodType<
  TaskMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  extra_data: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => TaskMetadata1$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
  format: TaskMetadataFormat$inboundSchema.optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => TaskMetadataSchemas1$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "extra_data": "extraData",
  });
});

/** @internal */
export type TaskMetadata$Outbound = {
  extra_data?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<TaskMetadata1$Outbound | string | number | boolean>
    | undefined;
  format?: string | undefined;
  id?: string | undefined;
  key?: string | undefined;
  namespace?: string | undefined;
  slug?: string | undefined;
  type?: string | undefined;
  value?:
    | { [k: string]: any }
    | string
    | number
    | boolean
    | Array<TaskMetadataSchemas1$Outbound | string | number | boolean>
    | undefined;
};

/** @internal */
export const TaskMetadata$outboundSchema: z.ZodType<
  TaskMetadata$Outbound,
  z.ZodTypeDef,
  TaskMetadata
> = z.object({
  extraData: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => TaskMetadata1$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
  format: TaskMetadataFormat$outboundSchema.optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  namespace: z.string().optional(),
  slug: z.string().optional(),
  type: z.string().optional(),
  value: z.union([
    z.record(z.any()),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.union([
        z.lazy(() => TaskMetadataSchemas1$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    extraData: "extra_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskMetadata$ {
  /** @deprecated use `TaskMetadata$inboundSchema` instead. */
  export const inboundSchema = TaskMetadata$inboundSchema;
  /** @deprecated use `TaskMetadata$outboundSchema` instead. */
  export const outboundSchema = TaskMetadata$outboundSchema;
  /** @deprecated use `TaskMetadata$Outbound` instead. */
  export type Outbound = TaskMetadata$Outbound;
}

export function taskMetadataToJSON(taskMetadata: TaskMetadata): string {
  return JSON.stringify(TaskMetadata$outboundSchema.parse(taskMetadata));
}

export function taskMetadataFromJSON(
  jsonString: string,
): SafeParseResult<TaskMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskMetadata' from JSON`,
  );
}
