/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CommerceItemMedia,
  CommerceItemMedia$inboundSchema,
  CommerceItemMedia$Outbound,
  CommerceItemMedia$outboundSchema,
} from "./commerceitemmedia.js";
import {
  CommerceItemMetadata,
  CommerceItemMetadata$inboundSchema,
  CommerceItemMetadata$Outbound,
  CommerceItemMetadata$outboundSchema,
} from "./commerceitemmetadata.js";

export type CommerceCollectionRaw = {};

export const CommerceCollectionType = {
  Collection: "COLLECTION",
  SavedSearch: "SAVED_SEARCH",
  Category: "CATEGORY",
} as const;
export type CommerceCollectionType = ClosedEnum<typeof CommerceCollectionType>;

/**
 * A collection of items/products/services
 */
export type CommerceCollection = {
  createdAt?: Date | undefined;
  description?: string | undefined;
  id?: string | undefined;
  isActive?: boolean | undefined;
  isFeatured?: boolean | undefined;
  isVisible?: boolean | undefined;
  media?: Array<CommerceItemMedia> | undefined;
  metadata?: Array<CommerceItemMetadata> | undefined;
  name: string;
  parentId?: string | undefined;
  publicDescription?: string | undefined;
  publicName?: string | undefined;
  raw?: CommerceCollectionRaw | undefined;
  tags?: Array<string> | undefined;
  type?: CommerceCollectionType | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const CommerceCollectionRaw$inboundSchema: z.ZodType<
  CommerceCollectionRaw,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CommerceCollectionRaw$Outbound = {};

/** @internal */
export const CommerceCollectionRaw$outboundSchema: z.ZodType<
  CommerceCollectionRaw$Outbound,
  z.ZodTypeDef,
  CommerceCollectionRaw
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceCollectionRaw$ {
  /** @deprecated use `CommerceCollectionRaw$inboundSchema` instead. */
  export const inboundSchema = CommerceCollectionRaw$inboundSchema;
  /** @deprecated use `CommerceCollectionRaw$outboundSchema` instead. */
  export const outboundSchema = CommerceCollectionRaw$outboundSchema;
  /** @deprecated use `CommerceCollectionRaw$Outbound` instead. */
  export type Outbound = CommerceCollectionRaw$Outbound;
}

export function commerceCollectionRawToJSON(
  commerceCollectionRaw: CommerceCollectionRaw,
): string {
  return JSON.stringify(
    CommerceCollectionRaw$outboundSchema.parse(commerceCollectionRaw),
  );
}

export function commerceCollectionRawFromJSON(
  jsonString: string,
): SafeParseResult<CommerceCollectionRaw, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceCollectionRaw$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceCollectionRaw' from JSON`,
  );
}

/** @internal */
export const CommerceCollectionType$inboundSchema: z.ZodNativeEnum<
  typeof CommerceCollectionType
> = z.nativeEnum(CommerceCollectionType);

/** @internal */
export const CommerceCollectionType$outboundSchema: z.ZodNativeEnum<
  typeof CommerceCollectionType
> = CommerceCollectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceCollectionType$ {
  /** @deprecated use `CommerceCollectionType$inboundSchema` instead. */
  export const inboundSchema = CommerceCollectionType$inboundSchema;
  /** @deprecated use `CommerceCollectionType$outboundSchema` instead. */
  export const outboundSchema = CommerceCollectionType$outboundSchema;
}

/** @internal */
export const CommerceCollection$inboundSchema: z.ZodType<
  CommerceCollection,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  is_featured: z.boolean().optional(),
  is_visible: z.boolean().optional(),
  media: z.array(CommerceItemMedia$inboundSchema).optional(),
  metadata: z.array(CommerceItemMetadata$inboundSchema).optional(),
  name: z.string(),
  parent_id: z.string().optional(),
  public_description: z.string().optional(),
  public_name: z.string().optional(),
  raw: z.lazy(() => CommerceCollectionRaw$inboundSchema).optional(),
  tags: z.array(z.string()).optional(),
  type: CommerceCollectionType$inboundSchema.optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "is_active": "isActive",
    "is_featured": "isFeatured",
    "is_visible": "isVisible",
    "parent_id": "parentId",
    "public_description": "publicDescription",
    "public_name": "publicName",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type CommerceCollection$Outbound = {
  created_at?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  is_active?: boolean | undefined;
  is_featured?: boolean | undefined;
  is_visible?: boolean | undefined;
  media?: Array<CommerceItemMedia$Outbound> | undefined;
  metadata?: Array<CommerceItemMetadata$Outbound> | undefined;
  name: string;
  parent_id?: string | undefined;
  public_description?: string | undefined;
  public_name?: string | undefined;
  raw?: CommerceCollectionRaw$Outbound | undefined;
  tags?: Array<string> | undefined;
  type?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const CommerceCollection$outboundSchema: z.ZodType<
  CommerceCollection$Outbound,
  z.ZodTypeDef,
  CommerceCollection
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  isActive: z.boolean().optional(),
  isFeatured: z.boolean().optional(),
  isVisible: z.boolean().optional(),
  media: z.array(CommerceItemMedia$outboundSchema).optional(),
  metadata: z.array(CommerceItemMetadata$outboundSchema).optional(),
  name: z.string(),
  parentId: z.string().optional(),
  publicDescription: z.string().optional(),
  publicName: z.string().optional(),
  raw: z.lazy(() => CommerceCollectionRaw$outboundSchema).optional(),
  tags: z.array(z.string()).optional(),
  type: CommerceCollectionType$outboundSchema.optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    isActive: "is_active",
    isFeatured: "is_featured",
    isVisible: "is_visible",
    parentId: "parent_id",
    publicDescription: "public_description",
    publicName: "public_name",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommerceCollection$ {
  /** @deprecated use `CommerceCollection$inboundSchema` instead. */
  export const inboundSchema = CommerceCollection$inboundSchema;
  /** @deprecated use `CommerceCollection$outboundSchema` instead. */
  export const outboundSchema = CommerceCollection$outboundSchema;
  /** @deprecated use `CommerceCollection$Outbound` instead. */
  export type Outbound = CommerceCollection$Outbound;
}

export function commerceCollectionToJSON(
  commerceCollection: CommerceCollection,
): string {
  return JSON.stringify(
    CommerceCollection$outboundSchema.parse(commerceCollection),
  );
}

export function commerceCollectionFromJSON(
  jsonString: string,
): SafeParseResult<CommerceCollection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommerceCollection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommerceCollection' from JSON`,
  );
}
