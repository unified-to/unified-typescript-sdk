/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export enum HrisTimeoffStatus {
    Approved = "APPROVED",
    Pending = "PENDING",
    Denied = "DENIED",
}

export enum HrisTimeoffType {
    Paid = "PAID",
    Unpaid = "UNPAID",
}

export class HrisTimeoff extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "approved_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    approvedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "approver_user_id" })
    approverUserId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "comments" })
    comments?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "end_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    endAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "raw" })
    raw?: Record<string, any>;

    @SpeakeasyMetadata()
    @Expose({ name: "start_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    startAt: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: HrisTimeoffStatus;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: HrisTimeoffType;

    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "user_id" })
    userId: string;
}
