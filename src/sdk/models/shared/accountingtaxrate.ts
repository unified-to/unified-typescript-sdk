/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingTaxrateRaw = {};

export type AccountingTaxrate = {
  createdAt?: Date | undefined;
  description?: string | undefined;
  id?: string | undefined;
  isActive?: boolean | undefined;
  name?: string | undefined;
  rate?: number | undefined;
  raw?: AccountingTaxrateRaw | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const AccountingTaxrateRaw$inboundSchema: z.ZodType<
  AccountingTaxrateRaw,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AccountingTaxrateRaw$Outbound = {};

/** @internal */
export const AccountingTaxrateRaw$outboundSchema: z.ZodType<
  AccountingTaxrateRaw$Outbound,
  z.ZodTypeDef,
  AccountingTaxrateRaw
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTaxrateRaw$ {
  /** @deprecated use `AccountingTaxrateRaw$inboundSchema` instead. */
  export const inboundSchema = AccountingTaxrateRaw$inboundSchema;
  /** @deprecated use `AccountingTaxrateRaw$outboundSchema` instead. */
  export const outboundSchema = AccountingTaxrateRaw$outboundSchema;
  /** @deprecated use `AccountingTaxrateRaw$Outbound` instead. */
  export type Outbound = AccountingTaxrateRaw$Outbound;
}

export function accountingTaxrateRawToJSON(
  accountingTaxrateRaw: AccountingTaxrateRaw,
): string {
  return JSON.stringify(
    AccountingTaxrateRaw$outboundSchema.parse(accountingTaxrateRaw),
  );
}

export function accountingTaxrateRawFromJSON(
  jsonString: string,
): SafeParseResult<AccountingTaxrateRaw, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingTaxrateRaw$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingTaxrateRaw' from JSON`,
  );
}

/** @internal */
export const AccountingTaxrate$inboundSchema: z.ZodType<
  AccountingTaxrate,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  name: z.string().optional(),
  rate: z.number().optional(),
  raw: z.lazy(() => AccountingTaxrateRaw$inboundSchema).optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "is_active": "isActive",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AccountingTaxrate$Outbound = {
  created_at?: string | undefined;
  description?: string | undefined;
  id?: string | undefined;
  is_active?: boolean | undefined;
  name?: string | undefined;
  rate?: number | undefined;
  raw?: AccountingTaxrateRaw$Outbound | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const AccountingTaxrate$outboundSchema: z.ZodType<
  AccountingTaxrate$Outbound,
  z.ZodTypeDef,
  AccountingTaxrate
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  isActive: z.boolean().optional(),
  name: z.string().optional(),
  rate: z.number().optional(),
  raw: z.lazy(() => AccountingTaxrateRaw$outboundSchema).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    isActive: "is_active",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTaxrate$ {
  /** @deprecated use `AccountingTaxrate$inboundSchema` instead. */
  export const inboundSchema = AccountingTaxrate$inboundSchema;
  /** @deprecated use `AccountingTaxrate$outboundSchema` instead. */
  export const outboundSchema = AccountingTaxrate$outboundSchema;
  /** @deprecated use `AccountingTaxrate$Outbound` instead. */
  export type Outbound = AccountingTaxrate$Outbound;
}

export function accountingTaxrateToJSON(
  accountingTaxrate: AccountingTaxrate,
): string {
  return JSON.stringify(
    AccountingTaxrate$outboundSchema.parse(accountingTaxrate),
  );
}

export function accountingTaxrateFromJSON(
  jsonString: string,
): SafeParseResult<AccountingTaxrate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingTaxrate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingTaxrate' from JSON`,
  );
}
