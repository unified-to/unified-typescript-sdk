/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const MarketingEmailType = {
  Work: "WORK",
  Home: "HOME",
  Other: "OTHER",
} as const;
export type MarketingEmailType = OpenEnum<typeof MarketingEmailType>;

export type MarketingEmail = {
  email: string;
  type?: MarketingEmailType | undefined;
};

/** @internal */
export const MarketingEmailType$inboundSchema: z.ZodType<
  MarketingEmailType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(MarketingEmailType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const MarketingEmailType$outboundSchema: z.ZodType<
  MarketingEmailType,
  z.ZodTypeDef,
  MarketingEmailType
> = z.union([
  z.nativeEnum(MarketingEmailType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingEmailType$ {
  /** @deprecated use `MarketingEmailType$inboundSchema` instead. */
  export const inboundSchema = MarketingEmailType$inboundSchema;
  /** @deprecated use `MarketingEmailType$outboundSchema` instead. */
  export const outboundSchema = MarketingEmailType$outboundSchema;
}

/** @internal */
export const MarketingEmail$inboundSchema: z.ZodType<
  MarketingEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  type: MarketingEmailType$inboundSchema.optional(),
});

/** @internal */
export type MarketingEmail$Outbound = {
  email: string;
  type?: string | undefined;
};

/** @internal */
export const MarketingEmail$outboundSchema: z.ZodType<
  MarketingEmail$Outbound,
  z.ZodTypeDef,
  MarketingEmail
> = z.object({
  email: z.string(),
  type: MarketingEmailType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketingEmail$ {
  /** @deprecated use `MarketingEmail$inboundSchema` instead. */
  export const inboundSchema = MarketingEmail$inboundSchema;
  /** @deprecated use `MarketingEmail$outboundSchema` instead. */
  export const outboundSchema = MarketingEmail$outboundSchema;
  /** @deprecated use `MarketingEmail$Outbound` instead. */
  export type Outbound = MarketingEmail$Outbound;
}

export function marketingEmailToJSON(marketingEmail: MarketingEmail): string {
  return JSON.stringify(MarketingEmail$outboundSchema.parse(marketingEmail));
}

export function marketingEmailFromJSON(
  jsonString: string,
): SafeParseResult<MarketingEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MarketingEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MarketingEmail' from JSON`,
  );
}
