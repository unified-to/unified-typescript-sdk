/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export enum TaskTaskStatus {
    Opened = "OPENED",
    InProgress = "IN_PROGRESS",
    Completed = "COMPLETED",
}

export class TaskTask extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "assigned_user_ids" })
    assignedUserIds?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "completed_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    completedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "creator_user_id" })
    creatorUserId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "due_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    dueAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "follower_user_ids" })
    followerUserIds?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "notes" })
    notes?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parent_id" })
    parentId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "priority" })
    priority?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "project_id" })
    projectId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "raw" })
    raw?: Record<string, any>;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: TaskTaskStatus;

    @SpeakeasyMetadata()
    @Expose({ name: "tags" })
    tags?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url?: string;
}
