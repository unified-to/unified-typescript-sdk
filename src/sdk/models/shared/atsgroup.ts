/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AtsGroupType = {
  Team: "TEAM",
  Group: "GROUP",
  Department: "DEPARTMENT",
  Division: "DIVISION",
  BusinessUnit: "BUSINESS_UNIT",
  Branch: "BRANCH",
  SubDepartment: "SUB_DEPARTMENT",
} as const;
export type AtsGroupType = OpenEnum<typeof AtsGroupType>;

export type AtsGroup = {
  id?: string | undefined;
  name?: string | undefined;
  type?: AtsGroupType | undefined;
};

/** @internal */
export const AtsGroupType$inboundSchema: z.ZodType<
  AtsGroupType,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(AtsGroupType),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const AtsGroupType$outboundSchema: z.ZodType<
  AtsGroupType,
  z.ZodTypeDef,
  AtsGroupType
> = z.union([
  z.nativeEnum(AtsGroupType),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsGroupType$ {
  /** @deprecated use `AtsGroupType$inboundSchema` instead. */
  export const inboundSchema = AtsGroupType$inboundSchema;
  /** @deprecated use `AtsGroupType$outboundSchema` instead. */
  export const outboundSchema = AtsGroupType$outboundSchema;
}

/** @internal */
export const AtsGroup$inboundSchema: z.ZodType<
  AtsGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  type: AtsGroupType$inboundSchema.optional(),
});

/** @internal */
export type AtsGroup$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const AtsGroup$outboundSchema: z.ZodType<
  AtsGroup$Outbound,
  z.ZodTypeDef,
  AtsGroup
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  type: AtsGroupType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsGroup$ {
  /** @deprecated use `AtsGroup$inboundSchema` instead. */
  export const inboundSchema = AtsGroup$inboundSchema;
  /** @deprecated use `AtsGroup$outboundSchema` instead. */
  export const outboundSchema = AtsGroup$outboundSchema;
  /** @deprecated use `AtsGroup$Outbound` instead. */
  export type Outbound = AtsGroup$Outbound;
}

export function atsGroupToJSON(atsGroup: AtsGroup): string {
  return JSON.stringify(AtsGroup$outboundSchema.parse(atsGroup));
}

export function atsGroupFromJSON(
  jsonString: string,
): SafeParseResult<AtsGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsGroup' from JSON`,
  );
}
