/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GenaiEmbeddingContent,
  GenaiEmbeddingContent$inboundSchema,
  GenaiEmbeddingContent$Outbound,
  GenaiEmbeddingContent$outboundSchema,
} from "./genaiembeddingcontent.js";

export const EncondingFormat = {
  Float: "FLOAT",
  Uint8: "UINT8",
  Int8: "INT8",
  Binary: "BINARY",
  Ubinary: "UBINARY",
  Base64: "BASE64",
} as const;
export type EncondingFormat = OpenEnum<typeof EncondingFormat>;

export type GenaiEmbedding = {
  content?: Array<GenaiEmbeddingContent> | undefined;
  dimension?: number | undefined;
  embeddings?: string | undefined;
  encondingFormat?: EncondingFormat | undefined;
  id?: string | undefined;
  maxTokens?: number | undefined;
  modelId?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  tokensUsed?: number | undefined;
  type?: string | undefined;
};

/** @internal */
export const EncondingFormat$inboundSchema: z.ZodType<
  EncondingFormat,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(EncondingFormat),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const EncondingFormat$outboundSchema: z.ZodType<
  EncondingFormat,
  z.ZodTypeDef,
  EncondingFormat
> = z.union([
  z.nativeEnum(EncondingFormat),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncondingFormat$ {
  /** @deprecated use `EncondingFormat$inboundSchema` instead. */
  export const inboundSchema = EncondingFormat$inboundSchema;
  /** @deprecated use `EncondingFormat$outboundSchema` instead. */
  export const outboundSchema = EncondingFormat$outboundSchema;
}

/** @internal */
export const GenaiEmbedding$inboundSchema: z.ZodType<
  GenaiEmbedding,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.array(GenaiEmbeddingContent$inboundSchema).optional(),
  dimension: z.number().optional(),
  embeddings: z.string().optional(),
  enconding_format: EncondingFormat$inboundSchema.optional(),
  id: z.string().optional(),
  max_tokens: z.number().optional(),
  model_id: z.string().optional(),
  raw: z.record(z.any()).optional(),
  tokens_used: z.number().optional(),
  type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "enconding_format": "encondingFormat",
    "max_tokens": "maxTokens",
    "model_id": "modelId",
    "tokens_used": "tokensUsed",
  });
});

/** @internal */
export type GenaiEmbedding$Outbound = {
  content?: Array<GenaiEmbeddingContent$Outbound> | undefined;
  dimension?: number | undefined;
  embeddings?: string | undefined;
  enconding_format?: string | undefined;
  id?: string | undefined;
  max_tokens?: number | undefined;
  model_id?: string | undefined;
  raw?: { [k: string]: any } | undefined;
  tokens_used?: number | undefined;
  type?: string | undefined;
};

/** @internal */
export const GenaiEmbedding$outboundSchema: z.ZodType<
  GenaiEmbedding$Outbound,
  z.ZodTypeDef,
  GenaiEmbedding
> = z.object({
  content: z.array(GenaiEmbeddingContent$outboundSchema).optional(),
  dimension: z.number().optional(),
  embeddings: z.string().optional(),
  encondingFormat: EncondingFormat$outboundSchema.optional(),
  id: z.string().optional(),
  maxTokens: z.number().optional(),
  modelId: z.string().optional(),
  raw: z.record(z.any()).optional(),
  tokensUsed: z.number().optional(),
  type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    encondingFormat: "enconding_format",
    maxTokens: "max_tokens",
    modelId: "model_id",
    tokensUsed: "tokens_used",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenaiEmbedding$ {
  /** @deprecated use `GenaiEmbedding$inboundSchema` instead. */
  export const inboundSchema = GenaiEmbedding$inboundSchema;
  /** @deprecated use `GenaiEmbedding$outboundSchema` instead. */
  export const outboundSchema = GenaiEmbedding$outboundSchema;
  /** @deprecated use `GenaiEmbedding$Outbound` instead. */
  export type Outbound = GenaiEmbedding$Outbound;
}

export function genaiEmbeddingToJSON(genaiEmbedding: GenaiEmbedding): string {
  return JSON.stringify(GenaiEmbedding$outboundSchema.parse(genaiEmbedding));
}

export function genaiEmbeddingFromJSON(
  jsonString: string,
): SafeParseResult<GenaiEmbedding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenaiEmbedding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenaiEmbedding' from JSON`,
  );
}
