/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingReportRaw = {};

export const AccountingReportType = {
  TrialBalance: "TRIAL_BALANCE",
  BalanceSheet: "BALANCE_SHEET",
  ProfitAndLoss: "PROFIT_AND_LOSS",
} as const;
export type AccountingReportType = ClosedEnum<typeof AccountingReportType>;

export type AccountingReport = {
  accountId?: string | undefined;
  amount?: number | undefined;
  contactId?: string | undefined;
  createdAt?: Date | undefined;
  group?: string | undefined;
  id?: string | undefined;
  raw?: AccountingReportRaw | undefined;
  subgroup?: string | undefined;
  type?: AccountingReportType | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const AccountingReportRaw$inboundSchema: z.ZodType<
  AccountingReportRaw,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AccountingReportRaw$Outbound = {};

/** @internal */
export const AccountingReportRaw$outboundSchema: z.ZodType<
  AccountingReportRaw$Outbound,
  z.ZodTypeDef,
  AccountingReportRaw
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingReportRaw$ {
  /** @deprecated use `AccountingReportRaw$inboundSchema` instead. */
  export const inboundSchema = AccountingReportRaw$inboundSchema;
  /** @deprecated use `AccountingReportRaw$outboundSchema` instead. */
  export const outboundSchema = AccountingReportRaw$outboundSchema;
  /** @deprecated use `AccountingReportRaw$Outbound` instead. */
  export type Outbound = AccountingReportRaw$Outbound;
}

export function accountingReportRawToJSON(
  accountingReportRaw: AccountingReportRaw,
): string {
  return JSON.stringify(
    AccountingReportRaw$outboundSchema.parse(accountingReportRaw),
  );
}

export function accountingReportRawFromJSON(
  jsonString: string,
): SafeParseResult<AccountingReportRaw, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingReportRaw$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingReportRaw' from JSON`,
  );
}

/** @internal */
export const AccountingReportType$inboundSchema: z.ZodNativeEnum<
  typeof AccountingReportType
> = z.nativeEnum(AccountingReportType);

/** @internal */
export const AccountingReportType$outboundSchema: z.ZodNativeEnum<
  typeof AccountingReportType
> = AccountingReportType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingReportType$ {
  /** @deprecated use `AccountingReportType$inboundSchema` instead. */
  export const inboundSchema = AccountingReportType$inboundSchema;
  /** @deprecated use `AccountingReportType$outboundSchema` instead. */
  export const outboundSchema = AccountingReportType$outboundSchema;
}

/** @internal */
export const AccountingReport$inboundSchema: z.ZodType<
  AccountingReport,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string().optional(),
  amount: z.number().optional(),
  contact_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  group: z.string().optional(),
  id: z.string().optional(),
  raw: z.lazy(() => AccountingReportRaw$inboundSchema).optional(),
  subgroup: z.string().optional(),
  type: AccountingReportType$inboundSchema.optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "contact_id": "contactId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AccountingReport$Outbound = {
  account_id?: string | undefined;
  amount?: number | undefined;
  contact_id?: string | undefined;
  created_at?: string | undefined;
  group?: string | undefined;
  id?: string | undefined;
  raw?: AccountingReportRaw$Outbound | undefined;
  subgroup?: string | undefined;
  type?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const AccountingReport$outboundSchema: z.ZodType<
  AccountingReport$Outbound,
  z.ZodTypeDef,
  AccountingReport
> = z.object({
  accountId: z.string().optional(),
  amount: z.number().optional(),
  contactId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  group: z.string().optional(),
  id: z.string().optional(),
  raw: z.lazy(() => AccountingReportRaw$outboundSchema).optional(),
  subgroup: z.string().optional(),
  type: AccountingReportType$outboundSchema.optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    contactId: "contact_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingReport$ {
  /** @deprecated use `AccountingReport$inboundSchema` instead. */
  export const inboundSchema = AccountingReport$inboundSchema;
  /** @deprecated use `AccountingReport$outboundSchema` instead. */
  export const outboundSchema = AccountingReport$outboundSchema;
  /** @deprecated use `AccountingReport$Outbound` instead. */
  export type Outbound = AccountingReport$Outbound;
}

export function accountingReportToJSON(
  accountingReport: AccountingReport,
): string {
  return JSON.stringify(
    AccountingReport$outboundSchema.parse(accountingReport),
  );
}

export function accountingReportFromJSON(
  jsonString: string,
): SafeParseResult<AccountingReport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingReport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingReport' from JSON`,
  );
}
