/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CalendarAttachment,
  CalendarAttachment$inboundSchema,
  CalendarAttachment$Outbound,
  CalendarAttachment$outboundSchema,
} from "./calendarattachment.js";
import {
  CalendarAttendee,
  CalendarAttendee$inboundSchema,
  CalendarAttendee$Outbound,
  CalendarAttendee$outboundSchema,
} from "./calendarattendee.js";
import {
  CalendarConference,
  CalendarConference$inboundSchema,
  CalendarConference$Outbound,
  CalendarConference$outboundSchema,
} from "./calendarconference.js";
import {
  CalendarEventRecurrence,
  CalendarEventRecurrence$inboundSchema,
  CalendarEventRecurrence$Outbound,
  CalendarEventRecurrence$outboundSchema,
} from "./calendareventrecurrence.js";
import {
  PropertyCalendarEventOrganizer,
  PropertyCalendarEventOrganizer$inboundSchema,
  PropertyCalendarEventOrganizer$Outbound,
  PropertyCalendarEventOrganizer$outboundSchema,
} from "./propertycalendareventorganizer.js";

export const CalendarEventStatus = {
  Canceled: "CANCELED",
  Confirmed: "CONFIRMED",
  Tentative: "TENTATIVE",
} as const;
export type CalendarEventStatus = OpenEnum<typeof CalendarEventStatus>;

export type CalendarEvent = {
  attachments?: Array<CalendarAttachment> | undefined;
  attendees?: Array<CalendarAttendee> | undefined;
  calendarId?: string | undefined;
  conference?: Array<CalendarConference> | undefined;
  createdAt?: string | undefined;
  endAt?: string | undefined;
  hasConference?: boolean | undefined;
  id?: string | undefined;
  isAllDay?: boolean | undefined;
  isFree?: boolean | undefined;
  isPrivate?: boolean | undefined;
  location?: string | undefined;
  notes?: string | undefined;
  organizer?: PropertyCalendarEventOrganizer | undefined;
  raw?: { [k: string]: any } | undefined;
  recurrence?: Array<CalendarEventRecurrence> | undefined;
  recurringEventId?: string | undefined;
  startAt?: string | undefined;
  status?: CalendarEventStatus | undefined;
  subject?: string | undefined;
  timezone?: string | undefined;
  updatedAt?: string | undefined;
  webUrl?: string | undefined;
};

/** @internal */
export const CalendarEventStatus$inboundSchema: z.ZodType<
  CalendarEventStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(CalendarEventStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const CalendarEventStatus$outboundSchema: z.ZodType<
  CalendarEventStatus,
  z.ZodTypeDef,
  CalendarEventStatus
> = z.union([
  z.nativeEnum(CalendarEventStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CalendarEventStatus$ {
  /** @deprecated use `CalendarEventStatus$inboundSchema` instead. */
  export const inboundSchema = CalendarEventStatus$inboundSchema;
  /** @deprecated use `CalendarEventStatus$outboundSchema` instead. */
  export const outboundSchema = CalendarEventStatus$outboundSchema;
}

/** @internal */
export const CalendarEvent$inboundSchema: z.ZodType<
  CalendarEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachments: z.array(CalendarAttachment$inboundSchema).optional(),
  attendees: z.array(CalendarAttendee$inboundSchema).optional(),
  calendar_id: z.string().optional(),
  conference: z.array(CalendarConference$inboundSchema).optional(),
  created_at: z.string().optional(),
  end_at: z.string().optional(),
  has_conference: z.boolean().optional(),
  id: z.string().optional(),
  is_all_day: z.boolean().optional(),
  is_free: z.boolean().optional(),
  is_private: z.boolean().optional(),
  location: z.string().optional(),
  notes: z.string().optional(),
  organizer: PropertyCalendarEventOrganizer$inboundSchema.optional(),
  raw: z.record(z.any()).optional(),
  recurrence: z.array(CalendarEventRecurrence$inboundSchema).optional(),
  recurring_event_id: z.string().optional(),
  start_at: z.string().optional(),
  status: CalendarEventStatus$inboundSchema.optional(),
  subject: z.string().optional(),
  timezone: z.string().optional(),
  updated_at: z.string().optional(),
  web_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "calendar_id": "calendarId",
    "created_at": "createdAt",
    "end_at": "endAt",
    "has_conference": "hasConference",
    "is_all_day": "isAllDay",
    "is_free": "isFree",
    "is_private": "isPrivate",
    "recurring_event_id": "recurringEventId",
    "start_at": "startAt",
    "updated_at": "updatedAt",
    "web_url": "webUrl",
  });
});

/** @internal */
export type CalendarEvent$Outbound = {
  attachments?: Array<CalendarAttachment$Outbound> | undefined;
  attendees?: Array<CalendarAttendee$Outbound> | undefined;
  calendar_id?: string | undefined;
  conference?: Array<CalendarConference$Outbound> | undefined;
  created_at?: string | undefined;
  end_at?: string | undefined;
  has_conference?: boolean | undefined;
  id?: string | undefined;
  is_all_day?: boolean | undefined;
  is_free?: boolean | undefined;
  is_private?: boolean | undefined;
  location?: string | undefined;
  notes?: string | undefined;
  organizer?: PropertyCalendarEventOrganizer$Outbound | undefined;
  raw?: { [k: string]: any } | undefined;
  recurrence?: Array<CalendarEventRecurrence$Outbound> | undefined;
  recurring_event_id?: string | undefined;
  start_at?: string | undefined;
  status?: string | undefined;
  subject?: string | undefined;
  timezone?: string | undefined;
  updated_at?: string | undefined;
  web_url?: string | undefined;
};

/** @internal */
export const CalendarEvent$outboundSchema: z.ZodType<
  CalendarEvent$Outbound,
  z.ZodTypeDef,
  CalendarEvent
> = z.object({
  attachments: z.array(CalendarAttachment$outboundSchema).optional(),
  attendees: z.array(CalendarAttendee$outboundSchema).optional(),
  calendarId: z.string().optional(),
  conference: z.array(CalendarConference$outboundSchema).optional(),
  createdAt: z.string().optional(),
  endAt: z.string().optional(),
  hasConference: z.boolean().optional(),
  id: z.string().optional(),
  isAllDay: z.boolean().optional(),
  isFree: z.boolean().optional(),
  isPrivate: z.boolean().optional(),
  location: z.string().optional(),
  notes: z.string().optional(),
  organizer: PropertyCalendarEventOrganizer$outboundSchema.optional(),
  raw: z.record(z.any()).optional(),
  recurrence: z.array(CalendarEventRecurrence$outboundSchema).optional(),
  recurringEventId: z.string().optional(),
  startAt: z.string().optional(),
  status: CalendarEventStatus$outboundSchema.optional(),
  subject: z.string().optional(),
  timezone: z.string().optional(),
  updatedAt: z.string().optional(),
  webUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    calendarId: "calendar_id",
    createdAt: "created_at",
    endAt: "end_at",
    hasConference: "has_conference",
    isAllDay: "is_all_day",
    isFree: "is_free",
    isPrivate: "is_private",
    recurringEventId: "recurring_event_id",
    startAt: "start_at",
    updatedAt: "updated_at",
    webUrl: "web_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CalendarEvent$ {
  /** @deprecated use `CalendarEvent$inboundSchema` instead. */
  export const inboundSchema = CalendarEvent$inboundSchema;
  /** @deprecated use `CalendarEvent$outboundSchema` instead. */
  export const outboundSchema = CalendarEvent$outboundSchema;
  /** @deprecated use `CalendarEvent$Outbound` instead. */
  export type Outbound = CalendarEvent$Outbound;
}

export function calendarEventToJSON(calendarEvent: CalendarEvent): string {
  return JSON.stringify(CalendarEvent$outboundSchema.parse(calendarEvent));
}

export function calendarEventFromJSON(
  jsonString: string,
): SafeParseResult<CalendarEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CalendarEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CalendarEvent' from JSON`,
  );
}
