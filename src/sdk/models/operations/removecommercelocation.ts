/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveCommerceLocationRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Location
   */
  id: string;
};

export type RemoveCommerceLocationResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveCommerceLocationRequest$inboundSchema: z.ZodType<
  RemoveCommerceLocationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveCommerceLocationRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveCommerceLocationRequest$outboundSchema: z.ZodType<
  RemoveCommerceLocationRequest$Outbound,
  z.ZodTypeDef,
  RemoveCommerceLocationRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCommerceLocationRequest$ {
  /** @deprecated use `RemoveCommerceLocationRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveCommerceLocationRequest$inboundSchema;
  /** @deprecated use `RemoveCommerceLocationRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveCommerceLocationRequest$outboundSchema;
  /** @deprecated use `RemoveCommerceLocationRequest$Outbound` instead. */
  export type Outbound = RemoveCommerceLocationRequest$Outbound;
}

export function removeCommerceLocationRequestToJSON(
  removeCommerceLocationRequest: RemoveCommerceLocationRequest,
): string {
  return JSON.stringify(
    RemoveCommerceLocationRequest$outboundSchema.parse(
      removeCommerceLocationRequest,
    ),
  );
}

export function removeCommerceLocationRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCommerceLocationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveCommerceLocationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCommerceLocationRequest' from JSON`,
  );
}

/** @internal */
export const RemoveCommerceLocationResponse$inboundSchema: z.ZodType<
  RemoveCommerceLocationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveCommerceLocationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveCommerceLocationResponse$outboundSchema: z.ZodType<
  RemoveCommerceLocationResponse$Outbound,
  z.ZodTypeDef,
  RemoveCommerceLocationResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCommerceLocationResponse$ {
  /** @deprecated use `RemoveCommerceLocationResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveCommerceLocationResponse$inboundSchema;
  /** @deprecated use `RemoveCommerceLocationResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveCommerceLocationResponse$outboundSchema;
  /** @deprecated use `RemoveCommerceLocationResponse$Outbound` instead. */
  export type Outbound = RemoveCommerceLocationResponse$Outbound;
}

export function removeCommerceLocationResponseToJSON(
  removeCommerceLocationResponse: RemoveCommerceLocationResponse,
): string {
  return JSON.stringify(
    RemoveCommerceLocationResponse$outboundSchema.parse(
      removeCommerceLocationResponse,
    ),
  );
}

export function removeCommerceLocationResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCommerceLocationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveCommerceLocationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCommerceLocationResponse' from JSON`,
  );
}
