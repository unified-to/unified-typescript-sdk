/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveAtsCompanyRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Company
   */
  id: string;
};

export type RemoveAtsCompanyResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAtsCompanyRequest$inboundSchema: z.ZodType<
  RemoveAtsCompanyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveAtsCompanyRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveAtsCompanyRequest$outboundSchema: z.ZodType<
  RemoveAtsCompanyRequest$Outbound,
  z.ZodTypeDef,
  RemoveAtsCompanyRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAtsCompanyRequest$ {
  /** @deprecated use `RemoveAtsCompanyRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveAtsCompanyRequest$inboundSchema;
  /** @deprecated use `RemoveAtsCompanyRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveAtsCompanyRequest$outboundSchema;
  /** @deprecated use `RemoveAtsCompanyRequest$Outbound` instead. */
  export type Outbound = RemoveAtsCompanyRequest$Outbound;
}

export function removeAtsCompanyRequestToJSON(
  removeAtsCompanyRequest: RemoveAtsCompanyRequest,
): string {
  return JSON.stringify(
    RemoveAtsCompanyRequest$outboundSchema.parse(removeAtsCompanyRequest),
  );
}

export function removeAtsCompanyRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAtsCompanyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAtsCompanyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAtsCompanyRequest' from JSON`,
  );
}

/** @internal */
export const RemoveAtsCompanyResponse$inboundSchema: z.ZodType<
  RemoveAtsCompanyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveAtsCompanyResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAtsCompanyResponse$outboundSchema: z.ZodType<
  RemoveAtsCompanyResponse$Outbound,
  z.ZodTypeDef,
  RemoveAtsCompanyResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAtsCompanyResponse$ {
  /** @deprecated use `RemoveAtsCompanyResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveAtsCompanyResponse$inboundSchema;
  /** @deprecated use `RemoveAtsCompanyResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveAtsCompanyResponse$outboundSchema;
  /** @deprecated use `RemoveAtsCompanyResponse$Outbound` instead. */
  export type Outbound = RemoveAtsCompanyResponse$Outbound;
}

export function removeAtsCompanyResponseToJSON(
  removeAtsCompanyResponse: RemoveAtsCompanyResponse,
): string {
  return JSON.stringify(
    RemoveAtsCompanyResponse$outboundSchema.parse(removeAtsCompanyResponse),
  );
}

export function removeAtsCompanyResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAtsCompanyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAtsCompanyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAtsCompanyResponse' from JSON`,
  );
}
