/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type PatchUnifiedWebhookRequest = {
  /**
   * A webhook is used to POST new/updated information to your server.
   */
  webhook?: shared.Webhook | undefined;
  /**
   * ID of the Webhook
   */
  id: string;
};

/** @internal */
export const PatchUnifiedWebhookRequest$inboundSchema: z.ZodType<
  PatchUnifiedWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Webhook: shared.Webhook$inboundSchema.optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Webhook": "webhook",
  });
});

/** @internal */
export type PatchUnifiedWebhookRequest$Outbound = {
  Webhook?: shared.Webhook$Outbound | undefined;
  id: string;
};

/** @internal */
export const PatchUnifiedWebhookRequest$outboundSchema: z.ZodType<
  PatchUnifiedWebhookRequest$Outbound,
  z.ZodTypeDef,
  PatchUnifiedWebhookRequest
> = z.object({
  webhook: shared.Webhook$outboundSchema.optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    webhook: "Webhook",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchUnifiedWebhookRequest$ {
  /** @deprecated use `PatchUnifiedWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = PatchUnifiedWebhookRequest$inboundSchema;
  /** @deprecated use `PatchUnifiedWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = PatchUnifiedWebhookRequest$outboundSchema;
  /** @deprecated use `PatchUnifiedWebhookRequest$Outbound` instead. */
  export type Outbound = PatchUnifiedWebhookRequest$Outbound;
}

export function patchUnifiedWebhookRequestToJSON(
  patchUnifiedWebhookRequest: PatchUnifiedWebhookRequest,
): string {
  return JSON.stringify(
    PatchUnifiedWebhookRequest$outboundSchema.parse(patchUnifiedWebhookRequest),
  );
}

export function patchUnifiedWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchUnifiedWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchUnifiedWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchUnifiedWebhookRequest' from JSON`,
  );
}
