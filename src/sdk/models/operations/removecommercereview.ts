/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveCommerceReviewRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Review
   */
  id: string;
};

export type RemoveCommerceReviewResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveCommerceReviewRequest$inboundSchema: z.ZodType<
  RemoveCommerceReviewRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveCommerceReviewRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveCommerceReviewRequest$outboundSchema: z.ZodType<
  RemoveCommerceReviewRequest$Outbound,
  z.ZodTypeDef,
  RemoveCommerceReviewRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCommerceReviewRequest$ {
  /** @deprecated use `RemoveCommerceReviewRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveCommerceReviewRequest$inboundSchema;
  /** @deprecated use `RemoveCommerceReviewRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveCommerceReviewRequest$outboundSchema;
  /** @deprecated use `RemoveCommerceReviewRequest$Outbound` instead. */
  export type Outbound = RemoveCommerceReviewRequest$Outbound;
}

export function removeCommerceReviewRequestToJSON(
  removeCommerceReviewRequest: RemoveCommerceReviewRequest,
): string {
  return JSON.stringify(
    RemoveCommerceReviewRequest$outboundSchema.parse(
      removeCommerceReviewRequest,
    ),
  );
}

export function removeCommerceReviewRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCommerceReviewRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveCommerceReviewRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCommerceReviewRequest' from JSON`,
  );
}

/** @internal */
export const RemoveCommerceReviewResponse$inboundSchema: z.ZodType<
  RemoveCommerceReviewResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveCommerceReviewResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveCommerceReviewResponse$outboundSchema: z.ZodType<
  RemoveCommerceReviewResponse$Outbound,
  z.ZodTypeDef,
  RemoveCommerceReviewResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCommerceReviewResponse$ {
  /** @deprecated use `RemoveCommerceReviewResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveCommerceReviewResponse$inboundSchema;
  /** @deprecated use `RemoveCommerceReviewResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveCommerceReviewResponse$outboundSchema;
  /** @deprecated use `RemoveCommerceReviewResponse$Outbound` instead. */
  export type Outbound = RemoveCommerceReviewResponse$Outbound;
}

export function removeCommerceReviewResponseToJSON(
  removeCommerceReviewResponse: RemoveCommerceReviewResponse,
): string {
  return JSON.stringify(
    RemoveCommerceReviewResponse$outboundSchema.parse(
      removeCommerceReviewResponse,
    ),
  );
}

export function removeCommerceReviewResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCommerceReviewResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveCommerceReviewResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCommerceReviewResponse' from JSON`,
  );
}
