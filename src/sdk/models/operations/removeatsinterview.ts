/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveAtsInterviewRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Interview
   */
  id: string;
};

export type RemoveAtsInterviewResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAtsInterviewRequest$inboundSchema: z.ZodType<
  RemoveAtsInterviewRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveAtsInterviewRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveAtsInterviewRequest$outboundSchema: z.ZodType<
  RemoveAtsInterviewRequest$Outbound,
  z.ZodTypeDef,
  RemoveAtsInterviewRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAtsInterviewRequest$ {
  /** @deprecated use `RemoveAtsInterviewRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveAtsInterviewRequest$inboundSchema;
  /** @deprecated use `RemoveAtsInterviewRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveAtsInterviewRequest$outboundSchema;
  /** @deprecated use `RemoveAtsInterviewRequest$Outbound` instead. */
  export type Outbound = RemoveAtsInterviewRequest$Outbound;
}

export function removeAtsInterviewRequestToJSON(
  removeAtsInterviewRequest: RemoveAtsInterviewRequest,
): string {
  return JSON.stringify(
    RemoveAtsInterviewRequest$outboundSchema.parse(removeAtsInterviewRequest),
  );
}

export function removeAtsInterviewRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAtsInterviewRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAtsInterviewRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAtsInterviewRequest' from JSON`,
  );
}

/** @internal */
export const RemoveAtsInterviewResponse$inboundSchema: z.ZodType<
  RemoveAtsInterviewResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveAtsInterviewResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAtsInterviewResponse$outboundSchema: z.ZodType<
  RemoveAtsInterviewResponse$Outbound,
  z.ZodTypeDef,
  RemoveAtsInterviewResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAtsInterviewResponse$ {
  /** @deprecated use `RemoveAtsInterviewResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveAtsInterviewResponse$inboundSchema;
  /** @deprecated use `RemoveAtsInterviewResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveAtsInterviewResponse$outboundSchema;
  /** @deprecated use `RemoveAtsInterviewResponse$Outbound` instead. */
  export type Outbound = RemoveAtsInterviewResponse$Outbound;
}

export function removeAtsInterviewResponseToJSON(
  removeAtsInterviewResponse: RemoveAtsInterviewResponse,
): string {
  return JSON.stringify(
    RemoveAtsInterviewResponse$outboundSchema.parse(removeAtsInterviewResponse),
  );
}

export function removeAtsInterviewResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAtsInterviewResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAtsInterviewResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAtsInterviewResponse' from JSON`,
  );
}
