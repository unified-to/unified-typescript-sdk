/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveTaskCommentRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Comment
   */
  id: string;
};

export type RemoveTaskCommentResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveTaskCommentRequest$inboundSchema: z.ZodType<
  RemoveTaskCommentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveTaskCommentRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveTaskCommentRequest$outboundSchema: z.ZodType<
  RemoveTaskCommentRequest$Outbound,
  z.ZodTypeDef,
  RemoveTaskCommentRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveTaskCommentRequest$ {
  /** @deprecated use `RemoveTaskCommentRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveTaskCommentRequest$inboundSchema;
  /** @deprecated use `RemoveTaskCommentRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveTaskCommentRequest$outboundSchema;
  /** @deprecated use `RemoveTaskCommentRequest$Outbound` instead. */
  export type Outbound = RemoveTaskCommentRequest$Outbound;
}

export function removeTaskCommentRequestToJSON(
  removeTaskCommentRequest: RemoveTaskCommentRequest,
): string {
  return JSON.stringify(
    RemoveTaskCommentRequest$outboundSchema.parse(removeTaskCommentRequest),
  );
}

export function removeTaskCommentRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveTaskCommentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveTaskCommentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveTaskCommentRequest' from JSON`,
  );
}

/** @internal */
export const RemoveTaskCommentResponse$inboundSchema: z.ZodType<
  RemoveTaskCommentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveTaskCommentResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveTaskCommentResponse$outboundSchema: z.ZodType<
  RemoveTaskCommentResponse$Outbound,
  z.ZodTypeDef,
  RemoveTaskCommentResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveTaskCommentResponse$ {
  /** @deprecated use `RemoveTaskCommentResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveTaskCommentResponse$inboundSchema;
  /** @deprecated use `RemoveTaskCommentResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveTaskCommentResponse$outboundSchema;
  /** @deprecated use `RemoveTaskCommentResponse$Outbound` instead. */
  export type Outbound = RemoveTaskCommentResponse$Outbound;
}

export function removeTaskCommentResponseToJSON(
  removeTaskCommentResponse: RemoveTaskCommentResponse,
): string {
  return JSON.stringify(
    RemoveTaskCommentResponse$outboundSchema.parse(removeTaskCommentResponse),
  );
}

export function removeTaskCommentResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveTaskCommentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveTaskCommentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveTaskCommentResponse' from JSON`,
  );
}
