/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type CreatePassthroughRequest = {
  /**
   * integration-specific payload
   */
  requestBody?: { [k: string]: any } | undefined;
  /**
   * ID of the connection
   */
  connectionId: string;
  path: string;
};

/** @internal */
export const CreatePassthroughRequest$inboundSchema: z.ZodType<
  CreatePassthroughRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.record(z.any()).optional(),
  connection_id: z.string(),
  path: z.string(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
    "connection_id": "connectionId",
  });
});

/** @internal */
export type CreatePassthroughRequest$Outbound = {
  RequestBody?: { [k: string]: any } | undefined;
  connection_id: string;
  path: string;
};

/** @internal */
export const CreatePassthroughRequest$outboundSchema: z.ZodType<
  CreatePassthroughRequest$Outbound,
  z.ZodTypeDef,
  CreatePassthroughRequest
> = z.object({
  requestBody: z.record(z.any()).optional(),
  connectionId: z.string(),
  path: z.string(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePassthroughRequest$ {
  /** @deprecated use `CreatePassthroughRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePassthroughRequest$inboundSchema;
  /** @deprecated use `CreatePassthroughRequest$outboundSchema` instead. */
  export const outboundSchema = CreatePassthroughRequest$outboundSchema;
  /** @deprecated use `CreatePassthroughRequest$Outbound` instead. */
  export type Outbound = CreatePassthroughRequest$Outbound;
}
