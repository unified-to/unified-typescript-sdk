/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const QueryParamCategories = {
  Passthrough: "passthrough",
  Hris: "hris",
  Ats: "ats",
  Auth: "auth",
  Crm: "crm",
  Enrich: "enrich",
  Martech: "martech",
  Ticketing: "ticketing",
  Uc: "uc",
  Accounting: "accounting",
  Storage: "storage",
  Commerce: "commerce",
  Payment: "payment",
  Genai: "genai",
  Messaging: "messaging",
  Kms: "kms",
  Task: "task",
} as const;
export type QueryParamCategories = ClosedEnum<typeof QueryParamCategories>;

export type ListUnifiedIntegrationWorkspacesRequest = {
  /**
   * Filter the results for only the workspace's active integrations
   */
  active?: boolean | undefined;
  /**
   * Filter the results on these categories
   */
  categories?: Array<QueryParamCategories> | undefined;
  env?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  summary?: boolean | undefined;
  updatedGte?: string | undefined;
  /**
   * The ID of the workspace
   */
  workspaceId: string;
};

/** @internal */
export const QueryParamCategories$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamCategories
> = z.nativeEnum(QueryParamCategories);

/** @internal */
export const QueryParamCategories$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamCategories
> = QueryParamCategories$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamCategories$ {
  /** @deprecated use `QueryParamCategories$inboundSchema` instead. */
  export const inboundSchema = QueryParamCategories$inboundSchema;
  /** @deprecated use `QueryParamCategories$outboundSchema` instead. */
  export const outboundSchema = QueryParamCategories$outboundSchema;
}

/** @internal */
export const ListUnifiedIntegrationWorkspacesRequest$inboundSchema: z.ZodType<
  ListUnifiedIntegrationWorkspacesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  active: z.boolean().optional(),
  categories: z.array(QueryParamCategories$inboundSchema).optional(),
  env: z.string().optional(),
  limit: z.number().optional(),
  offset: z.number().optional(),
  summary: z.boolean().optional(),
  updated_gte: z.string().optional(),
  workspace_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "updated_gte": "updatedGte",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type ListUnifiedIntegrationWorkspacesRequest$Outbound = {
  active?: boolean | undefined;
  categories?: Array<string> | undefined;
  env?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  summary?: boolean | undefined;
  updated_gte?: string | undefined;
  workspace_id: string;
};

/** @internal */
export const ListUnifiedIntegrationWorkspacesRequest$outboundSchema: z.ZodType<
  ListUnifiedIntegrationWorkspacesRequest$Outbound,
  z.ZodTypeDef,
  ListUnifiedIntegrationWorkspacesRequest
> = z.object({
  active: z.boolean().optional(),
  categories: z.array(QueryParamCategories$outboundSchema).optional(),
  env: z.string().optional(),
  limit: z.number().optional(),
  offset: z.number().optional(),
  summary: z.boolean().optional(),
  updatedGte: z.string().optional(),
  workspaceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    updatedGte: "updated_gte",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUnifiedIntegrationWorkspacesRequest$ {
  /** @deprecated use `ListUnifiedIntegrationWorkspacesRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListUnifiedIntegrationWorkspacesRequest$inboundSchema;
  /** @deprecated use `ListUnifiedIntegrationWorkspacesRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListUnifiedIntegrationWorkspacesRequest$outboundSchema;
  /** @deprecated use `ListUnifiedIntegrationWorkspacesRequest$Outbound` instead. */
  export type Outbound = ListUnifiedIntegrationWorkspacesRequest$Outbound;
}
