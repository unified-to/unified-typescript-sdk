/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type CreateCrmPipelineRequest = {
    crmPipeline?: shared.CrmPipeline | undefined;
    /**
     * ID of the connection
     */
    connectionId: string;
};

/** @internal */
export const CreateCrmPipelineRequest$inboundSchema: z.ZodType<
    CreateCrmPipelineRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        CrmPipeline: shared.CrmPipeline$inboundSchema.optional(),
        connection_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            CrmPipeline: "crmPipeline",
            connection_id: "connectionId",
        });
    });

/** @internal */
export type CreateCrmPipelineRequest$Outbound = {
    CrmPipeline?: shared.CrmPipeline$Outbound | undefined;
    connection_id: string;
};

/** @internal */
export const CreateCrmPipelineRequest$outboundSchema: z.ZodType<
    CreateCrmPipelineRequest$Outbound,
    z.ZodTypeDef,
    CreateCrmPipelineRequest
> = z
    .object({
        crmPipeline: shared.CrmPipeline$outboundSchema.optional(),
        connectionId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            crmPipeline: "CrmPipeline",
            connectionId: "connection_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCrmPipelineRequest$ {
    /** @deprecated use `CreateCrmPipelineRequest$inboundSchema` instead. */
    export const inboundSchema = CreateCrmPipelineRequest$inboundSchema;
    /** @deprecated use `CreateCrmPipelineRequest$outboundSchema` instead. */
    export const outboundSchema = CreateCrmPipelineRequest$outboundSchema;
    /** @deprecated use `CreateCrmPipelineRequest$Outbound` instead. */
    export type Outbound = CreateCrmPipelineRequest$Outbound;
}
