/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

/**
 * A connection represents a specific authentication of an integration.
 */
export type ConnectionId = {};

/**
 * Informational object for supported integrations.
 */
export type IntegrationType = {};

export type ListUnifiedWebhooksRequest = {
    /**
     * A connection represents a specific authentication of an integration.
     */
    connectionId?: ConnectionId | undefined;
    /**
     * Return only results whose created date is equal or less to this value
     */
    createdLte?: Date | undefined;
    env?: string | undefined;
    /**
     * Informational object for supported integrations.
     */
    integrationType?: IntegrationType | undefined;
    limit?: number | undefined;
    /**
     * Filter the results for webhooks for only this object
     */
    object?: string | undefined;
    offset?: number | undefined;
    order?: string | undefined;
    sort?: string | undefined;
    /**
     * Return only results whose updated date is equal or greater to this value
     */
    updatedGte?: Date | undefined;
};

/** @internal */
export const ConnectionId$inboundSchema: z.ZodType<ConnectionId, z.ZodTypeDef, unknown> = z.object(
    {}
);

/** @internal */
export type ConnectionId$Outbound = {};

/** @internal */
export const ConnectionId$outboundSchema: z.ZodType<
    ConnectionId$Outbound,
    z.ZodTypeDef,
    ConnectionId
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionId$ {
    /** @deprecated use `ConnectionId$inboundSchema` instead. */
    export const inboundSchema = ConnectionId$inboundSchema;
    /** @deprecated use `ConnectionId$outboundSchema` instead. */
    export const outboundSchema = ConnectionId$outboundSchema;
    /** @deprecated use `ConnectionId$Outbound` instead. */
    export type Outbound = ConnectionId$Outbound;
}

/** @internal */
export const IntegrationType$inboundSchema: z.ZodType<IntegrationType, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type IntegrationType$Outbound = {};

/** @internal */
export const IntegrationType$outboundSchema: z.ZodType<
    IntegrationType$Outbound,
    z.ZodTypeDef,
    IntegrationType
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationType$ {
    /** @deprecated use `IntegrationType$inboundSchema` instead. */
    export const inboundSchema = IntegrationType$inboundSchema;
    /** @deprecated use `IntegrationType$outboundSchema` instead. */
    export const outboundSchema = IntegrationType$outboundSchema;
    /** @deprecated use `IntegrationType$Outbound` instead. */
    export type Outbound = IntegrationType$Outbound;
}

/** @internal */
export const ListUnifiedWebhooksRequest$inboundSchema: z.ZodType<
    ListUnifiedWebhooksRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        connection_id: z.lazy(() => ConnectionId$inboundSchema).optional(),
        created_lte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        env: z.string().optional(),
        integration_type: z.lazy(() => IntegrationType$inboundSchema).optional(),
        limit: z.number().optional(),
        object: z.string().optional(),
        offset: z.number().optional(),
        order: z.string().optional(),
        sort: z.string().optional(),
        updated_gte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            connection_id: "connectionId",
            created_lte: "createdLte",
            integration_type: "integrationType",
            updated_gte: "updatedGte",
        });
    });

/** @internal */
export type ListUnifiedWebhooksRequest$Outbound = {
    connection_id?: ConnectionId$Outbound | undefined;
    created_lte?: string | undefined;
    env?: string | undefined;
    integration_type?: IntegrationType$Outbound | undefined;
    limit?: number | undefined;
    object?: string | undefined;
    offset?: number | undefined;
    order?: string | undefined;
    sort?: string | undefined;
    updated_gte?: string | undefined;
};

/** @internal */
export const ListUnifiedWebhooksRequest$outboundSchema: z.ZodType<
    ListUnifiedWebhooksRequest$Outbound,
    z.ZodTypeDef,
    ListUnifiedWebhooksRequest
> = z
    .object({
        connectionId: z.lazy(() => ConnectionId$outboundSchema).optional(),
        createdLte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        env: z.string().optional(),
        integrationType: z.lazy(() => IntegrationType$outboundSchema).optional(),
        limit: z.number().optional(),
        object: z.string().optional(),
        offset: z.number().optional(),
        order: z.string().optional(),
        sort: z.string().optional(),
        updatedGte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            connectionId: "connection_id",
            createdLte: "created_lte",
            integrationType: "integration_type",
            updatedGte: "updated_gte",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUnifiedWebhooksRequest$ {
    /** @deprecated use `ListUnifiedWebhooksRequest$inboundSchema` instead. */
    export const inboundSchema = ListUnifiedWebhooksRequest$inboundSchema;
    /** @deprecated use `ListUnifiedWebhooksRequest$outboundSchema` instead. */
    export const outboundSchema = ListUnifiedWebhooksRequest$outboundSchema;
    /** @deprecated use `ListUnifiedWebhooksRequest$Outbound` instead. */
    export type Outbound = ListUnifiedWebhooksRequest$Outbound;
}
