/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";

export class ListAtsActivitiesSecurity extends SpeakeasyBase {
    @SpeakeasyMetadata({
        data: "security, scheme=true;type=apiKey;subtype=header;name=authorization",
    })
    jwt: string;
}

export class ListAtsActivitiesRequest extends SpeakeasyBase {
    /**
     * The application ID to filter results
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=application_id" })
    applicationId?: string;

    /**
     * The candidate ID to filter results
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=candidate_id" })
    candidateId?: string;

    /**
     * ID of the connection
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=connection_id" })
    connectionId: string;

    /**
     * The document ID to filter results
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=document_id" })
    documentId?: string;

    /**
     * Comma-delimited fields to return
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=fields" })
    fields?: string[];

    /**
     * The interview ID to filter results
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=interview_id" })
    interviewId?: string;

    /**
     * The job ID to filter results
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=job_id" })
    jobId?: string;

    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
    limit?: number;

    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=offset" })
    offset?: number;

    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=order" })
    order?: string;

    /**
     * Query string to search. eg. email address or name
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
    query?: string;

    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
    sort?: string;

    /**
     * Return only results whose updated date is equal or greater to this value
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=updated_gte" })
    updatedGte?: Date;

    /**
     * The user ID to filter results
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=user_id" })
    userId?: string;
}

export class ListAtsActivitiesResponse extends SpeakeasyBase {
    /**
     * Successful
     */
    @SpeakeasyMetadata({ elemType: shared.AtsActivity })
    atsActivities?: shared.AtsActivity[];

    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;
}
