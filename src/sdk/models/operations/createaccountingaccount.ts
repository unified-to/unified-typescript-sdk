/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CreateAccountingAccountRequest = {
  /**
   * Chart of accounts
   */
  accountingAccount: shared.AccountingAccount;
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * Comma-delimited fields to return
   */
  fields?: Array<string> | undefined;
};

/** @internal */
export const CreateAccountingAccountRequest$inboundSchema: z.ZodType<
  CreateAccountingAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  AccountingAccount: shared.AccountingAccount$inboundSchema,
  connection_id: z.string(),
  fields: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "AccountingAccount": "accountingAccount",
    "connection_id": "connectionId",
  });
});

/** @internal */
export type CreateAccountingAccountRequest$Outbound = {
  AccountingAccount: shared.AccountingAccount$Outbound;
  connection_id: string;
  fields?: Array<string> | undefined;
};

/** @internal */
export const CreateAccountingAccountRequest$outboundSchema: z.ZodType<
  CreateAccountingAccountRequest$Outbound,
  z.ZodTypeDef,
  CreateAccountingAccountRequest
> = z.object({
  accountingAccount: shared.AccountingAccount$outboundSchema,
  connectionId: z.string(),
  fields: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountingAccount: "AccountingAccount",
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountingAccountRequest$ {
  /** @deprecated use `CreateAccountingAccountRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAccountingAccountRequest$inboundSchema;
  /** @deprecated use `CreateAccountingAccountRequest$outboundSchema` instead. */
  export const outboundSchema = CreateAccountingAccountRequest$outboundSchema;
  /** @deprecated use `CreateAccountingAccountRequest$Outbound` instead. */
  export type Outbound = CreateAccountingAccountRequest$Outbound;
}

export function createAccountingAccountRequestToJSON(
  createAccountingAccountRequest: CreateAccountingAccountRequest,
): string {
  return JSON.stringify(
    CreateAccountingAccountRequest$outboundSchema.parse(
      createAccountingAccountRequest,
    ),
  );
}

export function createAccountingAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountingAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountingAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountingAccountRequest' from JSON`,
  );
}
