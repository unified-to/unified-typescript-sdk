/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListUcRecordingsRequest = {
  /**
   * The call ID to filter by
   */
  callId?: string | undefined;
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * The contact ID to filter by
   */
  contactId?: string | undefined;
  /**
   * The end date to filter by (deprecated)
   */
  endLe?: string | undefined;
  /**
   * The end date to filter by
   */
  endLt?: string | undefined;
  /**
   * Comma-delimited fields to return
   */
  fields?: Array<string> | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  order?: string | undefined;
  /**
   * Query string to search. eg. email address or name
   */
  query?: string | undefined;
  /**
   * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar
   */
  raw?: string | undefined;
  sort?: string | undefined;
  /**
   * The start date to filter by
   */
  startGte?: string | undefined;
  /**
   * Return only results whose updated date is equal or greater to this value
   */
  updatedGte?: string | undefined;
  /**
   * The user/employee ID to filter by
   */
  userId?: string | undefined;
};

/** @internal */
export const ListUcRecordingsRequest$inboundSchema: z.ZodType<
  ListUcRecordingsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  call_id: z.string().optional(),
  connection_id: z.string(),
  contact_id: z.string().optional(),
  end_le: z.string().optional(),
  end_lt: z.string().optional(),
  fields: z.array(z.string()).optional(),
  limit: z.number().optional(),
  offset: z.number().optional(),
  order: z.string().optional(),
  query: z.string().optional(),
  raw: z.string().optional(),
  sort: z.string().optional(),
  start_gte: z.string().optional(),
  updated_gte: z.string().optional(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "call_id": "callId",
    "connection_id": "connectionId",
    "contact_id": "contactId",
    "end_le": "endLe",
    "end_lt": "endLt",
    "start_gte": "startGte",
    "updated_gte": "updatedGte",
    "user_id": "userId",
  });
});

/** @internal */
export type ListUcRecordingsRequest$Outbound = {
  call_id?: string | undefined;
  connection_id: string;
  contact_id?: string | undefined;
  end_le?: string | undefined;
  end_lt?: string | undefined;
  fields?: Array<string> | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  order?: string | undefined;
  query?: string | undefined;
  raw?: string | undefined;
  sort?: string | undefined;
  start_gte?: string | undefined;
  updated_gte?: string | undefined;
  user_id?: string | undefined;
};

/** @internal */
export const ListUcRecordingsRequest$outboundSchema: z.ZodType<
  ListUcRecordingsRequest$Outbound,
  z.ZodTypeDef,
  ListUcRecordingsRequest
> = z.object({
  callId: z.string().optional(),
  connectionId: z.string(),
  contactId: z.string().optional(),
  endLe: z.string().optional(),
  endLt: z.string().optional(),
  fields: z.array(z.string()).optional(),
  limit: z.number().optional(),
  offset: z.number().optional(),
  order: z.string().optional(),
  query: z.string().optional(),
  raw: z.string().optional(),
  sort: z.string().optional(),
  startGte: z.string().optional(),
  updatedGte: z.string().optional(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    callId: "call_id",
    connectionId: "connection_id",
    contactId: "contact_id",
    endLe: "end_le",
    endLt: "end_lt",
    startGte: "start_gte",
    updatedGte: "updated_gte",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUcRecordingsRequest$ {
  /** @deprecated use `ListUcRecordingsRequest$inboundSchema` instead. */
  export const inboundSchema = ListUcRecordingsRequest$inboundSchema;
  /** @deprecated use `ListUcRecordingsRequest$outboundSchema` instead. */
  export const outboundSchema = ListUcRecordingsRequest$outboundSchema;
  /** @deprecated use `ListUcRecordingsRequest$Outbound` instead. */
  export type Outbound = ListUcRecordingsRequest$Outbound;
}

export function listUcRecordingsRequestToJSON(
  listUcRecordingsRequest: ListUcRecordingsRequest,
): string {
  return JSON.stringify(
    ListUcRecordingsRequest$outboundSchema.parse(listUcRecordingsRequest),
  );
}

export function listUcRecordingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListUcRecordingsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUcRecordingsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUcRecordingsRequest' from JSON`,
  );
}
