/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveAccountingOrderRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Order
   */
  id: string;
};

export type RemoveAccountingOrderResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingOrderRequest$inboundSchema: z.ZodType<
  RemoveAccountingOrderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveAccountingOrderRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveAccountingOrderRequest$outboundSchema: z.ZodType<
  RemoveAccountingOrderRequest$Outbound,
  z.ZodTypeDef,
  RemoveAccountingOrderRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingOrderRequest$ {
  /** @deprecated use `RemoveAccountingOrderRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingOrderRequest$inboundSchema;
  /** @deprecated use `RemoveAccountingOrderRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveAccountingOrderRequest$outboundSchema;
  /** @deprecated use `RemoveAccountingOrderRequest$Outbound` instead. */
  export type Outbound = RemoveAccountingOrderRequest$Outbound;
}

export function removeAccountingOrderRequestToJSON(
  removeAccountingOrderRequest: RemoveAccountingOrderRequest,
): string {
  return JSON.stringify(
    RemoveAccountingOrderRequest$outboundSchema.parse(
      removeAccountingOrderRequest,
    ),
  );
}

export function removeAccountingOrderRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingOrderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountingOrderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingOrderRequest' from JSON`,
  );
}

/** @internal */
export const RemoveAccountingOrderResponse$inboundSchema: z.ZodType<
  RemoveAccountingOrderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveAccountingOrderResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingOrderResponse$outboundSchema: z.ZodType<
  RemoveAccountingOrderResponse$Outbound,
  z.ZodTypeDef,
  RemoveAccountingOrderResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingOrderResponse$ {
  /** @deprecated use `RemoveAccountingOrderResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingOrderResponse$inboundSchema;
  /** @deprecated use `RemoveAccountingOrderResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveAccountingOrderResponse$outboundSchema;
  /** @deprecated use `RemoveAccountingOrderResponse$Outbound` instead. */
  export type Outbound = RemoveAccountingOrderResponse$Outbound;
}

export function removeAccountingOrderResponseToJSON(
  removeAccountingOrderResponse: RemoveAccountingOrderResponse,
): string {
  return JSON.stringify(
    RemoveAccountingOrderResponse$outboundSchema.parse(
      removeAccountingOrderResponse,
    ),
  );
}

export function removeAccountingOrderResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingOrderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountingOrderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingOrderResponse' from JSON`,
  );
}
