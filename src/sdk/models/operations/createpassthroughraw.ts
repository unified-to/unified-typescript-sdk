/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreatePassthroughRawRequest = {
  /**
   * integration-specific payload
   */
  requestBody?:
    | ReadableStream<Uint8Array>
    | Blob
    | ArrayBuffer
    | Uint8Array
    | undefined;
  /**
   * ID of the connection
   */
  connectionId: string;
  path: string;
  query?: { [k: string]: any } | undefined;
};

export type CreatePassthroughRawResponseResult =
  | ReadableStream<Uint8Array>
  | any
  | string
  | string
  | string;

export type CreatePassthroughRawResponse = {
  headers: { [k: string]: Array<string> };
  result?:
    | ReadableStream<Uint8Array>
    | any
    | string
    | string
    | string
    | undefined;
};

/** @internal */
export const CreatePassthroughRawRequest$inboundSchema: z.ZodType<
  CreatePassthroughRawRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]).optional(),
  connection_id: z.string(),
  path: z.string(),
  query: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
    "connection_id": "connectionId",
  });
});

/** @internal */
export type CreatePassthroughRawRequest$Outbound = {
  RequestBody?:
    | ReadableStream<Uint8Array>
    | Blob
    | ArrayBuffer
    | Uint8Array
    | undefined;
  connection_id: string;
  path: string;
  query?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreatePassthroughRawRequest$outboundSchema: z.ZodType<
  CreatePassthroughRawRequest$Outbound,
  z.ZodTypeDef,
  CreatePassthroughRawRequest
> = z.object({
  requestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]).optional(),
  connectionId: z.string(),
  path: z.string(),
  query: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePassthroughRawRequest$ {
  /** @deprecated use `CreatePassthroughRawRequest$inboundSchema` instead. */
  export const inboundSchema = CreatePassthroughRawRequest$inboundSchema;
  /** @deprecated use `CreatePassthroughRawRequest$outboundSchema` instead. */
  export const outboundSchema = CreatePassthroughRawRequest$outboundSchema;
  /** @deprecated use `CreatePassthroughRawRequest$Outbound` instead. */
  export type Outbound = CreatePassthroughRawRequest$Outbound;
}

export function createPassthroughRawRequestToJSON(
  createPassthroughRawRequest: CreatePassthroughRawRequest,
): string {
  return JSON.stringify(
    CreatePassthroughRawRequest$outboundSchema.parse(
      createPassthroughRawRequest,
    ),
  );
}

export function createPassthroughRawRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreatePassthroughRawRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePassthroughRawRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePassthroughRawRequest' from JSON`,
  );
}

/** @internal */
export const CreatePassthroughRawResponseResult$inboundSchema: z.ZodType<
  CreatePassthroughRawResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.any(),
  z.string(),
  z.string(),
  z.string(),
]);

/** @internal */
export type CreatePassthroughRawResponseResult$Outbound =
  | ReadableStream<Uint8Array>
  | any
  | string
  | string
  | string;

/** @internal */
export const CreatePassthroughRawResponseResult$outboundSchema: z.ZodType<
  CreatePassthroughRawResponseResult$Outbound,
  z.ZodTypeDef,
  CreatePassthroughRawResponseResult
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.any(),
  z.string(),
  z.string(),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePassthroughRawResponseResult$ {
  /** @deprecated use `CreatePassthroughRawResponseResult$inboundSchema` instead. */
  export const inboundSchema = CreatePassthroughRawResponseResult$inboundSchema;
  /** @deprecated use `CreatePassthroughRawResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    CreatePassthroughRawResponseResult$outboundSchema;
  /** @deprecated use `CreatePassthroughRawResponseResult$Outbound` instead. */
  export type Outbound = CreatePassthroughRawResponseResult$Outbound;
}

export function createPassthroughRawResponseResultToJSON(
  createPassthroughRawResponseResult: CreatePassthroughRawResponseResult,
): string {
  return JSON.stringify(
    CreatePassthroughRawResponseResult$outboundSchema.parse(
      createPassthroughRawResponseResult,
    ),
  );
}

export function createPassthroughRawResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<CreatePassthroughRawResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreatePassthroughRawResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePassthroughRawResponseResult' from JSON`,
  );
}

/** @internal */
export const CreatePassthroughRawResponse$inboundSchema: z.ZodType<
  CreatePassthroughRawResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.any(),
    z.string(),
    z.string(),
    z.string(),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreatePassthroughRawResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result?:
    | ReadableStream<Uint8Array>
    | any
    | string
    | string
    | string
    | undefined;
};

/** @internal */
export const CreatePassthroughRawResponse$outboundSchema: z.ZodType<
  CreatePassthroughRawResponse$Outbound,
  z.ZodTypeDef,
  CreatePassthroughRawResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.any(),
    z.string(),
    z.string(),
    z.string(),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePassthroughRawResponse$ {
  /** @deprecated use `CreatePassthroughRawResponse$inboundSchema` instead. */
  export const inboundSchema = CreatePassthroughRawResponse$inboundSchema;
  /** @deprecated use `CreatePassthroughRawResponse$outboundSchema` instead. */
  export const outboundSchema = CreatePassthroughRawResponse$outboundSchema;
  /** @deprecated use `CreatePassthroughRawResponse$Outbound` instead. */
  export type Outbound = CreatePassthroughRawResponse$Outbound;
}

export function createPassthroughRawResponseToJSON(
  createPassthroughRawResponse: CreatePassthroughRawResponse,
): string {
  return JSON.stringify(
    CreatePassthroughRawResponse$outboundSchema.parse(
      createPassthroughRawResponse,
    ),
  );
}

export function createPassthroughRawResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreatePassthroughRawResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePassthroughRawResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePassthroughRawResponse' from JSON`,
  );
}
