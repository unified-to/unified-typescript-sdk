/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type RemovePassthroughRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  path: string;
};

export type RemovePassthroughResponseResult =
  | ReadableStream<Uint8Array>
  | any
  | string
  | string
  | string;

export type RemovePassthroughResponse = {
  headers: { [k: string]: Array<string> };
  result?:
    | ReadableStream<Uint8Array>
    | any
    | string
    | string
    | string
    | undefined;
};

/** @internal */
export const RemovePassthroughRequest$inboundSchema: z.ZodType<
  RemovePassthroughRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  path: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemovePassthroughRequest$Outbound = {
  connection_id: string;
  path: string;
};

/** @internal */
export const RemovePassthroughRequest$outboundSchema: z.ZodType<
  RemovePassthroughRequest$Outbound,
  z.ZodTypeDef,
  RemovePassthroughRequest
> = z.object({
  connectionId: z.string(),
  path: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemovePassthroughRequest$ {
  /** @deprecated use `RemovePassthroughRequest$inboundSchema` instead. */
  export const inboundSchema = RemovePassthroughRequest$inboundSchema;
  /** @deprecated use `RemovePassthroughRequest$outboundSchema` instead. */
  export const outboundSchema = RemovePassthroughRequest$outboundSchema;
  /** @deprecated use `RemovePassthroughRequest$Outbound` instead. */
  export type Outbound = RemovePassthroughRequest$Outbound;
}

/** @internal */
export const RemovePassthroughResponseResult$inboundSchema: z.ZodType<
  RemovePassthroughResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.any(),
  z.string(),
  z.string(),
  z.string(),
]);

/** @internal */
export type RemovePassthroughResponseResult$Outbound =
  | ReadableStream<Uint8Array>
  | any
  | string
  | string
  | string;

/** @internal */
export const RemovePassthroughResponseResult$outboundSchema: z.ZodType<
  RemovePassthroughResponseResult$Outbound,
  z.ZodTypeDef,
  RemovePassthroughResponseResult
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.any(),
  z.string(),
  z.string(),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemovePassthroughResponseResult$ {
  /** @deprecated use `RemovePassthroughResponseResult$inboundSchema` instead. */
  export const inboundSchema = RemovePassthroughResponseResult$inboundSchema;
  /** @deprecated use `RemovePassthroughResponseResult$outboundSchema` instead. */
  export const outboundSchema = RemovePassthroughResponseResult$outboundSchema;
  /** @deprecated use `RemovePassthroughResponseResult$Outbound` instead. */
  export type Outbound = RemovePassthroughResponseResult$Outbound;
}

/** @internal */
export const RemovePassthroughResponse$inboundSchema: z.ZodType<
  RemovePassthroughResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.any(),
    z.string(),
    z.string(),
    z.string(),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type RemovePassthroughResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result?:
    | ReadableStream<Uint8Array>
    | any
    | string
    | string
    | string
    | undefined;
};

/** @internal */
export const RemovePassthroughResponse$outboundSchema: z.ZodType<
  RemovePassthroughResponse$Outbound,
  z.ZodTypeDef,
  RemovePassthroughResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.any(),
    z.string(),
    z.string(),
    z.string(),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemovePassthroughResponse$ {
  /** @deprecated use `RemovePassthroughResponse$inboundSchema` instead. */
  export const inboundSchema = RemovePassthroughResponse$inboundSchema;
  /** @deprecated use `RemovePassthroughResponse$outboundSchema` instead. */
  export const outboundSchema = RemovePassthroughResponse$outboundSchema;
  /** @deprecated use `RemovePassthroughResponse$Outbound` instead. */
  export type Outbound = RemovePassthroughResponse$Outbound;
}
