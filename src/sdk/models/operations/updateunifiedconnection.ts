/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UpdateUnifiedConnectionRequest = {
  /**
   * A connection represents a specific authentication of an integration.
   */
  connection: shared.Connection;
  /**
   * ID of the Connection
   */
  id: string;
};

/** @internal */
export const UpdateUnifiedConnectionRequest$inboundSchema: z.ZodType<
  UpdateUnifiedConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Connection: shared.Connection$inboundSchema,
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Connection": "connection",
  });
});

/** @internal */
export type UpdateUnifiedConnectionRequest$Outbound = {
  Connection: shared.Connection$Outbound;
  id: string;
};

/** @internal */
export const UpdateUnifiedConnectionRequest$outboundSchema: z.ZodType<
  UpdateUnifiedConnectionRequest$Outbound,
  z.ZodTypeDef,
  UpdateUnifiedConnectionRequest
> = z.object({
  connection: shared.Connection$outboundSchema,
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connection: "Connection",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUnifiedConnectionRequest$ {
  /** @deprecated use `UpdateUnifiedConnectionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUnifiedConnectionRequest$inboundSchema;
  /** @deprecated use `UpdateUnifiedConnectionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUnifiedConnectionRequest$outboundSchema;
  /** @deprecated use `UpdateUnifiedConnectionRequest$Outbound` instead. */
  export type Outbound = UpdateUnifiedConnectionRequest$Outbound;
}

export function updateUnifiedConnectionRequestToJSON(
  updateUnifiedConnectionRequest: UpdateUnifiedConnectionRequest,
): string {
  return JSON.stringify(
    UpdateUnifiedConnectionRequest$outboundSchema.parse(
      updateUnifiedConnectionRequest,
    ),
  );
}

export function updateUnifiedConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUnifiedConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUnifiedConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUnifiedConnectionRequest' from JSON`,
  );
}
