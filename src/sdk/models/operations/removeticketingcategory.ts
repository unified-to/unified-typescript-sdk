/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveTicketingCategoryRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Category
   */
  id: string;
};

export type RemoveTicketingCategoryResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveTicketingCategoryRequest$inboundSchema: z.ZodType<
  RemoveTicketingCategoryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveTicketingCategoryRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveTicketingCategoryRequest$outboundSchema: z.ZodType<
  RemoveTicketingCategoryRequest$Outbound,
  z.ZodTypeDef,
  RemoveTicketingCategoryRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveTicketingCategoryRequest$ {
  /** @deprecated use `RemoveTicketingCategoryRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveTicketingCategoryRequest$inboundSchema;
  /** @deprecated use `RemoveTicketingCategoryRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveTicketingCategoryRequest$outboundSchema;
  /** @deprecated use `RemoveTicketingCategoryRequest$Outbound` instead. */
  export type Outbound = RemoveTicketingCategoryRequest$Outbound;
}

export function removeTicketingCategoryRequestToJSON(
  removeTicketingCategoryRequest: RemoveTicketingCategoryRequest,
): string {
  return JSON.stringify(
    RemoveTicketingCategoryRequest$outboundSchema.parse(
      removeTicketingCategoryRequest,
    ),
  );
}

export function removeTicketingCategoryRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveTicketingCategoryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveTicketingCategoryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveTicketingCategoryRequest' from JSON`,
  );
}

/** @internal */
export const RemoveTicketingCategoryResponse$inboundSchema: z.ZodType<
  RemoveTicketingCategoryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveTicketingCategoryResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveTicketingCategoryResponse$outboundSchema: z.ZodType<
  RemoveTicketingCategoryResponse$Outbound,
  z.ZodTypeDef,
  RemoveTicketingCategoryResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveTicketingCategoryResponse$ {
  /** @deprecated use `RemoveTicketingCategoryResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveTicketingCategoryResponse$inboundSchema;
  /** @deprecated use `RemoveTicketingCategoryResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveTicketingCategoryResponse$outboundSchema;
  /** @deprecated use `RemoveTicketingCategoryResponse$Outbound` instead. */
  export type Outbound = RemoveTicketingCategoryResponse$Outbound;
}

export function removeTicketingCategoryResponseToJSON(
  removeTicketingCategoryResponse: RemoveTicketingCategoryResponse,
): string {
  return JSON.stringify(
    RemoveTicketingCategoryResponse$outboundSchema.parse(
      removeTicketingCategoryResponse,
    ),
  );
}

export function removeTicketingCategoryResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveTicketingCategoryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveTicketingCategoryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveTicketingCategoryResponse' from JSON`,
  );
}
