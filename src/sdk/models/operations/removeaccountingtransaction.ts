/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveAccountingTransactionRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Transaction
   */
  id: string;
};

export type RemoveAccountingTransactionResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingTransactionRequest$inboundSchema: z.ZodType<
  RemoveAccountingTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveAccountingTransactionRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveAccountingTransactionRequest$outboundSchema: z.ZodType<
  RemoveAccountingTransactionRequest$Outbound,
  z.ZodTypeDef,
  RemoveAccountingTransactionRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingTransactionRequest$ {
  /** @deprecated use `RemoveAccountingTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingTransactionRequest$inboundSchema;
  /** @deprecated use `RemoveAccountingTransactionRequest$outboundSchema` instead. */
  export const outboundSchema =
    RemoveAccountingTransactionRequest$outboundSchema;
  /** @deprecated use `RemoveAccountingTransactionRequest$Outbound` instead. */
  export type Outbound = RemoveAccountingTransactionRequest$Outbound;
}

export function removeAccountingTransactionRequestToJSON(
  removeAccountingTransactionRequest: RemoveAccountingTransactionRequest,
): string {
  return JSON.stringify(
    RemoveAccountingTransactionRequest$outboundSchema.parse(
      removeAccountingTransactionRequest,
    ),
  );
}

export function removeAccountingTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RemoveAccountingTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingTransactionRequest' from JSON`,
  );
}

/** @internal */
export const RemoveAccountingTransactionResponse$inboundSchema: z.ZodType<
  RemoveAccountingTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveAccountingTransactionResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingTransactionResponse$outboundSchema: z.ZodType<
  RemoveAccountingTransactionResponse$Outbound,
  z.ZodTypeDef,
  RemoveAccountingTransactionResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingTransactionResponse$ {
  /** @deprecated use `RemoveAccountingTransactionResponse$inboundSchema` instead. */
  export const inboundSchema =
    RemoveAccountingTransactionResponse$inboundSchema;
  /** @deprecated use `RemoveAccountingTransactionResponse$outboundSchema` instead. */
  export const outboundSchema =
    RemoveAccountingTransactionResponse$outboundSchema;
  /** @deprecated use `RemoveAccountingTransactionResponse$Outbound` instead. */
  export type Outbound = RemoveAccountingTransactionResponse$Outbound;
}

export function removeAccountingTransactionResponseToJSON(
  removeAccountingTransactionResponse: RemoveAccountingTransactionResponse,
): string {
  return JSON.stringify(
    RemoveAccountingTransactionResponse$outboundSchema.parse(
      removeAccountingTransactionResponse,
    ),
  );
}

export function removeAccountingTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RemoveAccountingTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingTransactionResponse' from JSON`,
  );
}
