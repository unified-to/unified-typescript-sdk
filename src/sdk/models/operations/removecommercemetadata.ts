/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveCommerceMetadataRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Metadata
   */
  id: string;
};

export type RemoveCommerceMetadataResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveCommerceMetadataRequest$inboundSchema: z.ZodType<
  RemoveCommerceMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveCommerceMetadataRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveCommerceMetadataRequest$outboundSchema: z.ZodType<
  RemoveCommerceMetadataRequest$Outbound,
  z.ZodTypeDef,
  RemoveCommerceMetadataRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCommerceMetadataRequest$ {
  /** @deprecated use `RemoveCommerceMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveCommerceMetadataRequest$inboundSchema;
  /** @deprecated use `RemoveCommerceMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveCommerceMetadataRequest$outboundSchema;
  /** @deprecated use `RemoveCommerceMetadataRequest$Outbound` instead. */
  export type Outbound = RemoveCommerceMetadataRequest$Outbound;
}

export function removeCommerceMetadataRequestToJSON(
  removeCommerceMetadataRequest: RemoveCommerceMetadataRequest,
): string {
  return JSON.stringify(
    RemoveCommerceMetadataRequest$outboundSchema.parse(
      removeCommerceMetadataRequest,
    ),
  );
}

export function removeCommerceMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCommerceMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveCommerceMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCommerceMetadataRequest' from JSON`,
  );
}

/** @internal */
export const RemoveCommerceMetadataResponse$inboundSchema: z.ZodType<
  RemoveCommerceMetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveCommerceMetadataResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveCommerceMetadataResponse$outboundSchema: z.ZodType<
  RemoveCommerceMetadataResponse$Outbound,
  z.ZodTypeDef,
  RemoveCommerceMetadataResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCommerceMetadataResponse$ {
  /** @deprecated use `RemoveCommerceMetadataResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveCommerceMetadataResponse$inboundSchema;
  /** @deprecated use `RemoveCommerceMetadataResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveCommerceMetadataResponse$outboundSchema;
  /** @deprecated use `RemoveCommerceMetadataResponse$Outbound` instead. */
  export type Outbound = RemoveCommerceMetadataResponse$Outbound;
}

export function removeCommerceMetadataResponseToJSON(
  removeCommerceMetadataResponse: RemoveCommerceMetadataResponse,
): string {
  return JSON.stringify(
    RemoveCommerceMetadataResponse$outboundSchema.parse(
      removeCommerceMetadataResponse,
    ),
  );
}

export function removeCommerceMetadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCommerceMetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveCommerceMetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCommerceMetadataResponse' from JSON`,
  );
}
