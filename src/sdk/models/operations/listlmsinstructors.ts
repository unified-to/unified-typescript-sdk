/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type ListLmsInstructorsRequest = {
  classId?: string | undefined;
  companyId?: string | undefined;
  /**
   * ID of the connection
   */
  connectionId: string;
  courseId?: string | undefined;
  /**
   * Comma-delimited fields to return
   */
  fields?: Array<string> | undefined;
  limit?: number | undefined;
  locationId?: string | undefined;
  offset?: number | undefined;
  order?: string | undefined;
  /**
   * Query string to search. eg. email address or name
   */
  query?: string | undefined;
  sessionId?: string | undefined;
  sort?: string | undefined;
  /**
   * Return only results whose updated date is equal or greater to this value
   */
  updatedGte?: Date | undefined;
};

/** @internal */
export const ListLmsInstructorsRequest$inboundSchema: z.ZodType<
  ListLmsInstructorsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  class_id: z.string().optional(),
  company_id: z.string().optional(),
  connection_id: z.string(),
  course_id: z.string().optional(),
  fields: z.array(z.string()).optional(),
  limit: z.number().optional(),
  location_id: z.string().optional(),
  offset: z.number().optional(),
  order: z.string().optional(),
  query: z.string().optional(),
  session_id: z.string().optional(),
  sort: z.string().optional(),
  updated_gte: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "class_id": "classId",
    "company_id": "companyId",
    "connection_id": "connectionId",
    "course_id": "courseId",
    "location_id": "locationId",
    "session_id": "sessionId",
    "updated_gte": "updatedGte",
  });
});

/** @internal */
export type ListLmsInstructorsRequest$Outbound = {
  class_id?: string | undefined;
  company_id?: string | undefined;
  connection_id: string;
  course_id?: string | undefined;
  fields?: Array<string> | undefined;
  limit?: number | undefined;
  location_id?: string | undefined;
  offset?: number | undefined;
  order?: string | undefined;
  query?: string | undefined;
  session_id?: string | undefined;
  sort?: string | undefined;
  updated_gte?: string | undefined;
};

/** @internal */
export const ListLmsInstructorsRequest$outboundSchema: z.ZodType<
  ListLmsInstructorsRequest$Outbound,
  z.ZodTypeDef,
  ListLmsInstructorsRequest
> = z.object({
  classId: z.string().optional(),
  companyId: z.string().optional(),
  connectionId: z.string(),
  courseId: z.string().optional(),
  fields: z.array(z.string()).optional(),
  limit: z.number().optional(),
  locationId: z.string().optional(),
  offset: z.number().optional(),
  order: z.string().optional(),
  query: z.string().optional(),
  sessionId: z.string().optional(),
  sort: z.string().optional(),
  updatedGte: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    classId: "class_id",
    companyId: "company_id",
    connectionId: "connection_id",
    courseId: "course_id",
    locationId: "location_id",
    sessionId: "session_id",
    updatedGte: "updated_gte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListLmsInstructorsRequest$ {
  /** @deprecated use `ListLmsInstructorsRequest$inboundSchema` instead. */
  export const inboundSchema = ListLmsInstructorsRequest$inboundSchema;
  /** @deprecated use `ListLmsInstructorsRequest$outboundSchema` instead. */
  export const outboundSchema = ListLmsInstructorsRequest$outboundSchema;
  /** @deprecated use `ListLmsInstructorsRequest$Outbound` instead. */
  export type Outbound = ListLmsInstructorsRequest$Outbound;
}
