/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveAtsApplicationRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Application
   */
  id: string;
};

export type RemoveAtsApplicationResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAtsApplicationRequest$inboundSchema: z.ZodType<
  RemoveAtsApplicationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveAtsApplicationRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveAtsApplicationRequest$outboundSchema: z.ZodType<
  RemoveAtsApplicationRequest$Outbound,
  z.ZodTypeDef,
  RemoveAtsApplicationRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAtsApplicationRequest$ {
  /** @deprecated use `RemoveAtsApplicationRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveAtsApplicationRequest$inboundSchema;
  /** @deprecated use `RemoveAtsApplicationRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveAtsApplicationRequest$outboundSchema;
  /** @deprecated use `RemoveAtsApplicationRequest$Outbound` instead. */
  export type Outbound = RemoveAtsApplicationRequest$Outbound;
}

export function removeAtsApplicationRequestToJSON(
  removeAtsApplicationRequest: RemoveAtsApplicationRequest,
): string {
  return JSON.stringify(
    RemoveAtsApplicationRequest$outboundSchema.parse(
      removeAtsApplicationRequest,
    ),
  );
}

export function removeAtsApplicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAtsApplicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAtsApplicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAtsApplicationRequest' from JSON`,
  );
}

/** @internal */
export const RemoveAtsApplicationResponse$inboundSchema: z.ZodType<
  RemoveAtsApplicationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveAtsApplicationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAtsApplicationResponse$outboundSchema: z.ZodType<
  RemoveAtsApplicationResponse$Outbound,
  z.ZodTypeDef,
  RemoveAtsApplicationResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAtsApplicationResponse$ {
  /** @deprecated use `RemoveAtsApplicationResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveAtsApplicationResponse$inboundSchema;
  /** @deprecated use `RemoveAtsApplicationResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveAtsApplicationResponse$outboundSchema;
  /** @deprecated use `RemoveAtsApplicationResponse$Outbound` instead. */
  export type Outbound = RemoveAtsApplicationResponse$Outbound;
}

export function removeAtsApplicationResponseToJSON(
  removeAtsApplicationResponse: RemoveAtsApplicationResponse,
): string {
  return JSON.stringify(
    RemoveAtsApplicationResponse$outboundSchema.parse(
      removeAtsApplicationResponse,
    ),
  );
}

export function removeAtsApplicationResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAtsApplicationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAtsApplicationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAtsApplicationResponse' from JSON`,
  );
}
