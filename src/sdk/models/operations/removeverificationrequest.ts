/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveVerificationRequestRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Request
   */
  id: string;
};

export type RemoveVerificationRequestResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveVerificationRequestRequest$inboundSchema: z.ZodType<
  RemoveVerificationRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveVerificationRequestRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveVerificationRequestRequest$outboundSchema: z.ZodType<
  RemoveVerificationRequestRequest$Outbound,
  z.ZodTypeDef,
  RemoveVerificationRequestRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveVerificationRequestRequest$ {
  /** @deprecated use `RemoveVerificationRequestRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveVerificationRequestRequest$inboundSchema;
  /** @deprecated use `RemoveVerificationRequestRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveVerificationRequestRequest$outboundSchema;
  /** @deprecated use `RemoveVerificationRequestRequest$Outbound` instead. */
  export type Outbound = RemoveVerificationRequestRequest$Outbound;
}

export function removeVerificationRequestRequestToJSON(
  removeVerificationRequestRequest: RemoveVerificationRequestRequest,
): string {
  return JSON.stringify(
    RemoveVerificationRequestRequest$outboundSchema.parse(
      removeVerificationRequestRequest,
    ),
  );
}

export function removeVerificationRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveVerificationRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveVerificationRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveVerificationRequestRequest' from JSON`,
  );
}

/** @internal */
export const RemoveVerificationRequestResponse$inboundSchema: z.ZodType<
  RemoveVerificationRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveVerificationRequestResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveVerificationRequestResponse$outboundSchema: z.ZodType<
  RemoveVerificationRequestResponse$Outbound,
  z.ZodTypeDef,
  RemoveVerificationRequestResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveVerificationRequestResponse$ {
  /** @deprecated use `RemoveVerificationRequestResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveVerificationRequestResponse$inboundSchema;
  /** @deprecated use `RemoveVerificationRequestResponse$outboundSchema` instead. */
  export const outboundSchema =
    RemoveVerificationRequestResponse$outboundSchema;
  /** @deprecated use `RemoveVerificationRequestResponse$Outbound` instead. */
  export type Outbound = RemoveVerificationRequestResponse$Outbound;
}

export function removeVerificationRequestResponseToJSON(
  removeVerificationRequestResponse: RemoveVerificationRequestResponse,
): string {
  return JSON.stringify(
    RemoveVerificationRequestResponse$outboundSchema.parse(
      removeVerificationRequestResponse,
    ),
  );
}

export function removeVerificationRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveVerificationRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveVerificationRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveVerificationRequestResponse' from JSON`,
  );
}
