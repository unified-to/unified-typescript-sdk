/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveCalendarLinkRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Link
   */
  id: string;
};

export type RemoveCalendarLinkResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveCalendarLinkRequest$inboundSchema: z.ZodType<
  RemoveCalendarLinkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveCalendarLinkRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveCalendarLinkRequest$outboundSchema: z.ZodType<
  RemoveCalendarLinkRequest$Outbound,
  z.ZodTypeDef,
  RemoveCalendarLinkRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCalendarLinkRequest$ {
  /** @deprecated use `RemoveCalendarLinkRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveCalendarLinkRequest$inboundSchema;
  /** @deprecated use `RemoveCalendarLinkRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveCalendarLinkRequest$outboundSchema;
  /** @deprecated use `RemoveCalendarLinkRequest$Outbound` instead. */
  export type Outbound = RemoveCalendarLinkRequest$Outbound;
}

export function removeCalendarLinkRequestToJSON(
  removeCalendarLinkRequest: RemoveCalendarLinkRequest,
): string {
  return JSON.stringify(
    RemoveCalendarLinkRequest$outboundSchema.parse(removeCalendarLinkRequest),
  );
}

export function removeCalendarLinkRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCalendarLinkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveCalendarLinkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCalendarLinkRequest' from JSON`,
  );
}

/** @internal */
export const RemoveCalendarLinkResponse$inboundSchema: z.ZodType<
  RemoveCalendarLinkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveCalendarLinkResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveCalendarLinkResponse$outboundSchema: z.ZodType<
  RemoveCalendarLinkResponse$Outbound,
  z.ZodTypeDef,
  RemoveCalendarLinkResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCalendarLinkResponse$ {
  /** @deprecated use `RemoveCalendarLinkResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveCalendarLinkResponse$inboundSchema;
  /** @deprecated use `RemoveCalendarLinkResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveCalendarLinkResponse$outboundSchema;
  /** @deprecated use `RemoveCalendarLinkResponse$Outbound` instead. */
  export type Outbound = RemoveCalendarLinkResponse$Outbound;
}

export function removeCalendarLinkResponseToJSON(
  removeCalendarLinkResponse: RemoveCalendarLinkResponse,
): string {
  return JSON.stringify(
    RemoveCalendarLinkResponse$outboundSchema.parse(removeCalendarLinkResponse),
  );
}

export function removeCalendarLinkResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCalendarLinkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveCalendarLinkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCalendarLinkResponse' from JSON`,
  );
}
