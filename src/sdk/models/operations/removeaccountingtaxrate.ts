/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveAccountingTaxrateRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Taxrate
   */
  id: string;
};

export type RemoveAccountingTaxrateResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingTaxrateRequest$inboundSchema: z.ZodType<
  RemoveAccountingTaxrateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveAccountingTaxrateRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveAccountingTaxrateRequest$outboundSchema: z.ZodType<
  RemoveAccountingTaxrateRequest$Outbound,
  z.ZodTypeDef,
  RemoveAccountingTaxrateRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingTaxrateRequest$ {
  /** @deprecated use `RemoveAccountingTaxrateRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingTaxrateRequest$inboundSchema;
  /** @deprecated use `RemoveAccountingTaxrateRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveAccountingTaxrateRequest$outboundSchema;
  /** @deprecated use `RemoveAccountingTaxrateRequest$Outbound` instead. */
  export type Outbound = RemoveAccountingTaxrateRequest$Outbound;
}

export function removeAccountingTaxrateRequestToJSON(
  removeAccountingTaxrateRequest: RemoveAccountingTaxrateRequest,
): string {
  return JSON.stringify(
    RemoveAccountingTaxrateRequest$outboundSchema.parse(
      removeAccountingTaxrateRequest,
    ),
  );
}

export function removeAccountingTaxrateRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingTaxrateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountingTaxrateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingTaxrateRequest' from JSON`,
  );
}

/** @internal */
export const RemoveAccountingTaxrateResponse$inboundSchema: z.ZodType<
  RemoveAccountingTaxrateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveAccountingTaxrateResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingTaxrateResponse$outboundSchema: z.ZodType<
  RemoveAccountingTaxrateResponse$Outbound,
  z.ZodTypeDef,
  RemoveAccountingTaxrateResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingTaxrateResponse$ {
  /** @deprecated use `RemoveAccountingTaxrateResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingTaxrateResponse$inboundSchema;
  /** @deprecated use `RemoveAccountingTaxrateResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveAccountingTaxrateResponse$outboundSchema;
  /** @deprecated use `RemoveAccountingTaxrateResponse$Outbound` instead. */
  export type Outbound = RemoveAccountingTaxrateResponse$Outbound;
}

export function removeAccountingTaxrateResponseToJSON(
  removeAccountingTaxrateResponse: RemoveAccountingTaxrateResponse,
): string {
  return JSON.stringify(
    RemoveAccountingTaxrateResponse$outboundSchema.parse(
      removeAccountingTaxrateResponse,
    ),
  );
}

export function removeAccountingTaxrateResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingTaxrateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountingTaxrateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingTaxrateResponse' from JSON`,
  );
}
