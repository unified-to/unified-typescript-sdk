/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetScimGroupsRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Group
   */
  id: string;
};

/** @internal */
export const GetScimGroupsRequest$inboundSchema: z.ZodType<
  GetScimGroupsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type GetScimGroupsRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const GetScimGroupsRequest$outboundSchema: z.ZodType<
  GetScimGroupsRequest$Outbound,
  z.ZodTypeDef,
  GetScimGroupsRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScimGroupsRequest$ {
  /** @deprecated use `GetScimGroupsRequest$inboundSchema` instead. */
  export const inboundSchema = GetScimGroupsRequest$inboundSchema;
  /** @deprecated use `GetScimGroupsRequest$outboundSchema` instead. */
  export const outboundSchema = GetScimGroupsRequest$outboundSchema;
  /** @deprecated use `GetScimGroupsRequest$Outbound` instead. */
  export type Outbound = GetScimGroupsRequest$Outbound;
}

export function getScimGroupsRequestToJSON(
  getScimGroupsRequest: GetScimGroupsRequest,
): string {
  return JSON.stringify(
    GetScimGroupsRequest$outboundSchema.parse(getScimGroupsRequest),
  );
}

export function getScimGroupsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetScimGroupsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetScimGroupsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetScimGroupsRequest' from JSON`,
  );
}
