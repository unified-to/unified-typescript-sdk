/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type ListPaymentPaymentsRequest = {
    /**
     * ID of the connection
     */
    connectionId: string;
    contactId?: string | undefined;
    /**
     * Comma-delimited fields to return
     */
    fields?: Array<string> | undefined;
    invoiceId?: string | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    order?: string | undefined;
    /**
     * Query string to search. eg. email address or name
     */
    query?: string | undefined;
    sort?: string | undefined;
    /**
     * Return only results whose updated date is equal or greater to this value
     */
    updatedGte?: Date | undefined;
};

/** @internal */
export const ListPaymentPaymentsRequest$inboundSchema: z.ZodType<
    ListPaymentPaymentsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        connection_id: z.string(),
        contact_id: z.string().optional(),
        fields: z.array(z.string()).optional(),
        invoice_id: z.string().optional(),
        limit: z.number().optional(),
        offset: z.number().optional(),
        order: z.string().optional(),
        query: z.string().optional(),
        sort: z.string().optional(),
        updated_gte: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            connection_id: "connectionId",
            contact_id: "contactId",
            invoice_id: "invoiceId",
            updated_gte: "updatedGte",
        });
    });

/** @internal */
export type ListPaymentPaymentsRequest$Outbound = {
    connection_id: string;
    contact_id?: string | undefined;
    fields?: Array<string> | undefined;
    invoice_id?: string | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    order?: string | undefined;
    query?: string | undefined;
    sort?: string | undefined;
    updated_gte?: string | undefined;
};

/** @internal */
export const ListPaymentPaymentsRequest$outboundSchema: z.ZodType<
    ListPaymentPaymentsRequest$Outbound,
    z.ZodTypeDef,
    ListPaymentPaymentsRequest
> = z
    .object({
        connectionId: z.string(),
        contactId: z.string().optional(),
        fields: z.array(z.string()).optional(),
        invoiceId: z.string().optional(),
        limit: z.number().optional(),
        offset: z.number().optional(),
        order: z.string().optional(),
        query: z.string().optional(),
        sort: z.string().optional(),
        updatedGte: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            connectionId: "connection_id",
            contactId: "contact_id",
            invoiceId: "invoice_id",
            updatedGte: "updated_gte",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentPaymentsRequest$ {
    /** @deprecated use `ListPaymentPaymentsRequest$inboundSchema` instead. */
    export const inboundSchema = ListPaymentPaymentsRequest$inboundSchema;
    /** @deprecated use `ListPaymentPaymentsRequest$outboundSchema` instead. */
    export const outboundSchema = ListPaymentPaymentsRequest$outboundSchema;
    /** @deprecated use `ListPaymentPaymentsRequest$Outbound` instead. */
    export type Outbound = ListPaymentPaymentsRequest$Outbound;
}
