/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveAccountingAccountRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Account
   */
  id: string;
};

export type RemoveAccountingAccountResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingAccountRequest$inboundSchema: z.ZodType<
  RemoveAccountingAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveAccountingAccountRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveAccountingAccountRequest$outboundSchema: z.ZodType<
  RemoveAccountingAccountRequest$Outbound,
  z.ZodTypeDef,
  RemoveAccountingAccountRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingAccountRequest$ {
  /** @deprecated use `RemoveAccountingAccountRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingAccountRequest$inboundSchema;
  /** @deprecated use `RemoveAccountingAccountRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveAccountingAccountRequest$outboundSchema;
  /** @deprecated use `RemoveAccountingAccountRequest$Outbound` instead. */
  export type Outbound = RemoveAccountingAccountRequest$Outbound;
}

export function removeAccountingAccountRequestToJSON(
  removeAccountingAccountRequest: RemoveAccountingAccountRequest,
): string {
  return JSON.stringify(
    RemoveAccountingAccountRequest$outboundSchema.parse(
      removeAccountingAccountRequest,
    ),
  );
}

export function removeAccountingAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountingAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingAccountRequest' from JSON`,
  );
}

/** @internal */
export const RemoveAccountingAccountResponse$inboundSchema: z.ZodType<
  RemoveAccountingAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveAccountingAccountResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingAccountResponse$outboundSchema: z.ZodType<
  RemoveAccountingAccountResponse$Outbound,
  z.ZodTypeDef,
  RemoveAccountingAccountResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingAccountResponse$ {
  /** @deprecated use `RemoveAccountingAccountResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingAccountResponse$inboundSchema;
  /** @deprecated use `RemoveAccountingAccountResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveAccountingAccountResponse$outboundSchema;
  /** @deprecated use `RemoveAccountingAccountResponse$Outbound` instead. */
  export type Outbound = RemoveAccountingAccountResponse$Outbound;
}

export function removeAccountingAccountResponseToJSON(
  removeAccountingAccountResponse: RemoveAccountingAccountResponse,
): string {
  return JSON.stringify(
    RemoveAccountingAccountResponse$outboundSchema.parse(
      removeAccountingAccountResponse,
    ),
  );
}

export function removeAccountingAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountingAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingAccountResponse' from JSON`,
  );
}
