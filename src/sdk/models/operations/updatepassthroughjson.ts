/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePassthroughJsonRequest = {
  /**
   * integration-specific payload
   */
  requestBody?: any | undefined;
  /**
   * ID of the connection
   */
  connectionId: string;
  path: string;
  query?: { [k: string]: any } | undefined;
};

export type UpdatePassthroughJsonResponseResult =
  | ReadableStream<Uint8Array>
  | any
  | string
  | string
  | string;

export type UpdatePassthroughJsonResponse = {
  headers: { [k: string]: Array<string> };
  result?:
    | ReadableStream<Uint8Array>
    | any
    | string
    | string
    | string
    | undefined;
};

/** @internal */
export const UpdatePassthroughJsonRequest$inboundSchema: z.ZodType<
  UpdatePassthroughJsonRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.any().optional(),
  connection_id: z.string(),
  path: z.string(),
  query: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
    "connection_id": "connectionId",
  });
});

/** @internal */
export type UpdatePassthroughJsonRequest$Outbound = {
  RequestBody?: any | undefined;
  connection_id: string;
  path: string;
  query?: { [k: string]: any } | undefined;
};

/** @internal */
export const UpdatePassthroughJsonRequest$outboundSchema: z.ZodType<
  UpdatePassthroughJsonRequest$Outbound,
  z.ZodTypeDef,
  UpdatePassthroughJsonRequest
> = z.object({
  requestBody: z.any().optional(),
  connectionId: z.string(),
  path: z.string(),
  query: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePassthroughJsonRequest$ {
  /** @deprecated use `UpdatePassthroughJsonRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePassthroughJsonRequest$inboundSchema;
  /** @deprecated use `UpdatePassthroughJsonRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePassthroughJsonRequest$outboundSchema;
  /** @deprecated use `UpdatePassthroughJsonRequest$Outbound` instead. */
  export type Outbound = UpdatePassthroughJsonRequest$Outbound;
}

export function updatePassthroughJsonRequestToJSON(
  updatePassthroughJsonRequest: UpdatePassthroughJsonRequest,
): string {
  return JSON.stringify(
    UpdatePassthroughJsonRequest$outboundSchema.parse(
      updatePassthroughJsonRequest,
    ),
  );
}

export function updatePassthroughJsonRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePassthroughJsonRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePassthroughJsonRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePassthroughJsonRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePassthroughJsonResponseResult$inboundSchema: z.ZodType<
  UpdatePassthroughJsonResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.any(),
  z.string(),
  z.string(),
  z.string(),
]);

/** @internal */
export type UpdatePassthroughJsonResponseResult$Outbound =
  | ReadableStream<Uint8Array>
  | any
  | string
  | string
  | string;

/** @internal */
export const UpdatePassthroughJsonResponseResult$outboundSchema: z.ZodType<
  UpdatePassthroughJsonResponseResult$Outbound,
  z.ZodTypeDef,
  UpdatePassthroughJsonResponseResult
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.any(),
  z.string(),
  z.string(),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePassthroughJsonResponseResult$ {
  /** @deprecated use `UpdatePassthroughJsonResponseResult$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePassthroughJsonResponseResult$inboundSchema;
  /** @deprecated use `UpdatePassthroughJsonResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePassthroughJsonResponseResult$outboundSchema;
  /** @deprecated use `UpdatePassthroughJsonResponseResult$Outbound` instead. */
  export type Outbound = UpdatePassthroughJsonResponseResult$Outbound;
}

export function updatePassthroughJsonResponseResultToJSON(
  updatePassthroughJsonResponseResult: UpdatePassthroughJsonResponseResult,
): string {
  return JSON.stringify(
    UpdatePassthroughJsonResponseResult$outboundSchema.parse(
      updatePassthroughJsonResponseResult,
    ),
  );
}

export function updatePassthroughJsonResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePassthroughJsonResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePassthroughJsonResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePassthroughJsonResponseResult' from JSON`,
  );
}

/** @internal */
export const UpdatePassthroughJsonResponse$inboundSchema: z.ZodType<
  UpdatePassthroughJsonResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.any(),
    z.string(),
    z.string(),
    z.string(),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdatePassthroughJsonResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result?:
    | ReadableStream<Uint8Array>
    | any
    | string
    | string
    | string
    | undefined;
};

/** @internal */
export const UpdatePassthroughJsonResponse$outboundSchema: z.ZodType<
  UpdatePassthroughJsonResponse$Outbound,
  z.ZodTypeDef,
  UpdatePassthroughJsonResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.any(),
    z.string(),
    z.string(),
    z.string(),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePassthroughJsonResponse$ {
  /** @deprecated use `UpdatePassthroughJsonResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePassthroughJsonResponse$inboundSchema;
  /** @deprecated use `UpdatePassthroughJsonResponse$outboundSchema` instead. */
  export const outboundSchema = UpdatePassthroughJsonResponse$outboundSchema;
  /** @deprecated use `UpdatePassthroughJsonResponse$Outbound` instead. */
  export type Outbound = UpdatePassthroughJsonResponse$Outbound;
}

export function updatePassthroughJsonResponseToJSON(
  updatePassthroughJsonResponse: UpdatePassthroughJsonResponse,
): string {
  return JSON.stringify(
    UpdatePassthroughJsonResponse$outboundSchema.parse(
      updatePassthroughJsonResponse,
    ),
  );
}

export function updatePassthroughJsonResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePassthroughJsonResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePassthroughJsonResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePassthroughJsonResponse' from JSON`,
  );
}
