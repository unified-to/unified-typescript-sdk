/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type ListRepoPullrequestsRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * Comma-delimited fields to return
   */
  fields?: Array<string> | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  order?: string | undefined;
  /**
   * Query string to search. eg. email address or name
   */
  query?: string | undefined;
  repoId?: string | undefined;
  sort?: string | undefined;
  /**
   * Return only results whose updated date is equal or greater to this value
   */
  updatedGte?: Date | undefined;
};

/** @internal */
export const ListRepoPullrequestsRequest$inboundSchema: z.ZodType<
  ListRepoPullrequestsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  fields: z.array(z.string()).optional(),
  limit: z.number().optional(),
  offset: z.number().optional(),
  order: z.string().optional(),
  query: z.string().optional(),
  repo_id: z.string().optional(),
  sort: z.string().optional(),
  updated_gte: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
    "repo_id": "repoId",
    "updated_gte": "updatedGte",
  });
});

/** @internal */
export type ListRepoPullrequestsRequest$Outbound = {
  connection_id: string;
  fields?: Array<string> | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  order?: string | undefined;
  query?: string | undefined;
  repo_id?: string | undefined;
  sort?: string | undefined;
  updated_gte?: string | undefined;
};

/** @internal */
export const ListRepoPullrequestsRequest$outboundSchema: z.ZodType<
  ListRepoPullrequestsRequest$Outbound,
  z.ZodTypeDef,
  ListRepoPullrequestsRequest
> = z.object({
  connectionId: z.string(),
  fields: z.array(z.string()).optional(),
  limit: z.number().optional(),
  offset: z.number().optional(),
  order: z.string().optional(),
  query: z.string().optional(),
  repoId: z.string().optional(),
  sort: z.string().optional(),
  updatedGte: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
    repoId: "repo_id",
    updatedGte: "updated_gte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRepoPullrequestsRequest$ {
  /** @deprecated use `ListRepoPullrequestsRequest$inboundSchema` instead. */
  export const inboundSchema = ListRepoPullrequestsRequest$inboundSchema;
  /** @deprecated use `ListRepoPullrequestsRequest$outboundSchema` instead. */
  export const outboundSchema = ListRepoPullrequestsRequest$outboundSchema;
  /** @deprecated use `ListRepoPullrequestsRequest$Outbound` instead. */
  export type Outbound = ListRepoPullrequestsRequest$Outbound;
}
