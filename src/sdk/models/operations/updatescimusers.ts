/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UpdateScimUsersRequest = {
  scimUser: shared.ScimUser;
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the User
   */
  id: string;
};

/** @internal */
export const UpdateScimUsersRequest$inboundSchema: z.ZodType<
  UpdateScimUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ScimUser: shared.ScimUser$inboundSchema,
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ScimUser": "scimUser",
    "connection_id": "connectionId",
  });
});

/** @internal */
export type UpdateScimUsersRequest$Outbound = {
  ScimUser: shared.ScimUser$Outbound;
  connection_id: string;
  id: string;
};

/** @internal */
export const UpdateScimUsersRequest$outboundSchema: z.ZodType<
  UpdateScimUsersRequest$Outbound,
  z.ZodTypeDef,
  UpdateScimUsersRequest
> = z.object({
  scimUser: shared.ScimUser$outboundSchema,
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    scimUser: "ScimUser",
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScimUsersRequest$ {
  /** @deprecated use `UpdateScimUsersRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateScimUsersRequest$inboundSchema;
  /** @deprecated use `UpdateScimUsersRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateScimUsersRequest$outboundSchema;
  /** @deprecated use `UpdateScimUsersRequest$Outbound` instead. */
  export type Outbound = UpdateScimUsersRequest$Outbound;
}

export function updateScimUsersRequestToJSON(
  updateScimUsersRequest: UpdateScimUsersRequest,
): string {
  return JSON.stringify(
    UpdateScimUsersRequest$outboundSchema.parse(updateScimUsersRequest),
  );
}

export function updateScimUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScimUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScimUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScimUsersRequest' from JSON`,
  );
}
