/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type PatchHrisGroupRequest = {
  hrisGroup?: shared.HrisGroup | undefined;
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * Comma-delimited fields to return
   */
  fields?: Array<string> | undefined;
  /**
   * ID of the Group
   */
  id: string;
};

/** @internal */
export const PatchHrisGroupRequest$inboundSchema: z.ZodType<
  PatchHrisGroupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  HrisGroup: shared.HrisGroup$inboundSchema.optional(),
  connection_id: z.string(),
  fields: z.array(z.string()).optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "HrisGroup": "hrisGroup",
    "connection_id": "connectionId",
  });
});

/** @internal */
export type PatchHrisGroupRequest$Outbound = {
  HrisGroup?: shared.HrisGroup$Outbound | undefined;
  connection_id: string;
  fields?: Array<string> | undefined;
  id: string;
};

/** @internal */
export const PatchHrisGroupRequest$outboundSchema: z.ZodType<
  PatchHrisGroupRequest$Outbound,
  z.ZodTypeDef,
  PatchHrisGroupRequest
> = z.object({
  hrisGroup: shared.HrisGroup$outboundSchema.optional(),
  connectionId: z.string(),
  fields: z.array(z.string()).optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    hrisGroup: "HrisGroup",
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchHrisGroupRequest$ {
  /** @deprecated use `PatchHrisGroupRequest$inboundSchema` instead. */
  export const inboundSchema = PatchHrisGroupRequest$inboundSchema;
  /** @deprecated use `PatchHrisGroupRequest$outboundSchema` instead. */
  export const outboundSchema = PatchHrisGroupRequest$outboundSchema;
  /** @deprecated use `PatchHrisGroupRequest$Outbound` instead. */
  export type Outbound = PatchHrisGroupRequest$Outbound;
}

export function patchHrisGroupRequestToJSON(
  patchHrisGroupRequest: PatchHrisGroupRequest,
): string {
  return JSON.stringify(
    PatchHrisGroupRequest$outboundSchema.parse(patchHrisGroupRequest),
  );
}

export function patchHrisGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchHrisGroupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchHrisGroupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchHrisGroupRequest' from JSON`,
  );
}
