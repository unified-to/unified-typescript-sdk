/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const Categories = {
  Passthrough: "passthrough",
  Hris: "hris",
  Ats: "ats",
  Auth: "auth",
  Crm: "crm",
  Enrich: "enrich",
  Martech: "martech",
  Ticketing: "ticketing",
  Uc: "uc",
  Accounting: "accounting",
  Storage: "storage",
  Commerce: "commerce",
  Payment: "payment",
  Genai: "genai",
  Messaging: "messaging",
  Kms: "kms",
  Task: "task",
} as const;
export type Categories = ClosedEnum<typeof Categories>;

export type ListUnifiedConnectionsRequest = {
  /**
   * Filter the results on these categories
   */
  categories?: Array<Categories> | undefined;
  env?: string | undefined;
  /**
   * Filter the results to only those integrations for your user referenced by this value
   */
  externalXref?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  order?: string | undefined;
  sort?: string | undefined;
  /**
   * Return only results whose updated date is equal or greater to this value
   */
  updatedGte?: Date | undefined;
};

/** @internal */
export const Categories$inboundSchema: z.ZodNativeEnum<typeof Categories> = z
  .nativeEnum(Categories);

/** @internal */
export const Categories$outboundSchema: z.ZodNativeEnum<typeof Categories> =
  Categories$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Categories$ {
  /** @deprecated use `Categories$inboundSchema` instead. */
  export const inboundSchema = Categories$inboundSchema;
  /** @deprecated use `Categories$outboundSchema` instead. */
  export const outboundSchema = Categories$outboundSchema;
}

/** @internal */
export const ListUnifiedConnectionsRequest$inboundSchema: z.ZodType<
  ListUnifiedConnectionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  categories: z.array(Categories$inboundSchema).optional(),
  env: z.string().optional(),
  external_xref: z.string().optional(),
  limit: z.number().optional(),
  offset: z.number().optional(),
  order: z.string().optional(),
  sort: z.string().optional(),
  updated_gte: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "external_xref": "externalXref",
    "updated_gte": "updatedGte",
  });
});

/** @internal */
export type ListUnifiedConnectionsRequest$Outbound = {
  categories?: Array<string> | undefined;
  env?: string | undefined;
  external_xref?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  order?: string | undefined;
  sort?: string | undefined;
  updated_gte?: string | undefined;
};

/** @internal */
export const ListUnifiedConnectionsRequest$outboundSchema: z.ZodType<
  ListUnifiedConnectionsRequest$Outbound,
  z.ZodTypeDef,
  ListUnifiedConnectionsRequest
> = z.object({
  categories: z.array(Categories$outboundSchema).optional(),
  env: z.string().optional(),
  externalXref: z.string().optional(),
  limit: z.number().optional(),
  offset: z.number().optional(),
  order: z.string().optional(),
  sort: z.string().optional(),
  updatedGte: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    externalXref: "external_xref",
    updatedGte: "updated_gte",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUnifiedConnectionsRequest$ {
  /** @deprecated use `ListUnifiedConnectionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListUnifiedConnectionsRequest$inboundSchema;
  /** @deprecated use `ListUnifiedConnectionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListUnifiedConnectionsRequest$outboundSchema;
  /** @deprecated use `ListUnifiedConnectionsRequest$Outbound` instead. */
  export type Outbound = ListUnifiedConnectionsRequest$Outbound;
}
