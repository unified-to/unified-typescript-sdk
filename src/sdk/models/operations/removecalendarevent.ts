/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveCalendarEventRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Event
   */
  id: string;
};

export type RemoveCalendarEventResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveCalendarEventRequest$inboundSchema: z.ZodType<
  RemoveCalendarEventRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveCalendarEventRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveCalendarEventRequest$outboundSchema: z.ZodType<
  RemoveCalendarEventRequest$Outbound,
  z.ZodTypeDef,
  RemoveCalendarEventRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCalendarEventRequest$ {
  /** @deprecated use `RemoveCalendarEventRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveCalendarEventRequest$inboundSchema;
  /** @deprecated use `RemoveCalendarEventRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveCalendarEventRequest$outboundSchema;
  /** @deprecated use `RemoveCalendarEventRequest$Outbound` instead. */
  export type Outbound = RemoveCalendarEventRequest$Outbound;
}

export function removeCalendarEventRequestToJSON(
  removeCalendarEventRequest: RemoveCalendarEventRequest,
): string {
  return JSON.stringify(
    RemoveCalendarEventRequest$outboundSchema.parse(removeCalendarEventRequest),
  );
}

export function removeCalendarEventRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCalendarEventRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveCalendarEventRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCalendarEventRequest' from JSON`,
  );
}

/** @internal */
export const RemoveCalendarEventResponse$inboundSchema: z.ZodType<
  RemoveCalendarEventResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveCalendarEventResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveCalendarEventResponse$outboundSchema: z.ZodType<
  RemoveCalendarEventResponse$Outbound,
  z.ZodTypeDef,
  RemoveCalendarEventResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCalendarEventResponse$ {
  /** @deprecated use `RemoveCalendarEventResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveCalendarEventResponse$inboundSchema;
  /** @deprecated use `RemoveCalendarEventResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveCalendarEventResponse$outboundSchema;
  /** @deprecated use `RemoveCalendarEventResponse$Outbound` instead. */
  export type Outbound = RemoveCalendarEventResponse$Outbound;
}

export function removeCalendarEventResponseToJSON(
  removeCalendarEventResponse: RemoveCalendarEventResponse,
): string {
  return JSON.stringify(
    RemoveCalendarEventResponse$outboundSchema.parse(
      removeCalendarEventResponse,
    ),
  );
}

export function removeCalendarEventResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCalendarEventResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveCalendarEventResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCalendarEventResponse' from JSON`,
  );
}
