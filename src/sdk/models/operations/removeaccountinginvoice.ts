/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveAccountingInvoiceRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Invoice
   */
  id: string;
};

export type RemoveAccountingInvoiceResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingInvoiceRequest$inboundSchema: z.ZodType<
  RemoveAccountingInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveAccountingInvoiceRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveAccountingInvoiceRequest$outboundSchema: z.ZodType<
  RemoveAccountingInvoiceRequest$Outbound,
  z.ZodTypeDef,
  RemoveAccountingInvoiceRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingInvoiceRequest$ {
  /** @deprecated use `RemoveAccountingInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingInvoiceRequest$inboundSchema;
  /** @deprecated use `RemoveAccountingInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveAccountingInvoiceRequest$outboundSchema;
  /** @deprecated use `RemoveAccountingInvoiceRequest$Outbound` instead. */
  export type Outbound = RemoveAccountingInvoiceRequest$Outbound;
}

export function removeAccountingInvoiceRequestToJSON(
  removeAccountingInvoiceRequest: RemoveAccountingInvoiceRequest,
): string {
  return JSON.stringify(
    RemoveAccountingInvoiceRequest$outboundSchema.parse(
      removeAccountingInvoiceRequest,
    ),
  );
}

export function removeAccountingInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountingInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingInvoiceRequest' from JSON`,
  );
}

/** @internal */
export const RemoveAccountingInvoiceResponse$inboundSchema: z.ZodType<
  RemoveAccountingInvoiceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveAccountingInvoiceResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingInvoiceResponse$outboundSchema: z.ZodType<
  RemoveAccountingInvoiceResponse$Outbound,
  z.ZodTypeDef,
  RemoveAccountingInvoiceResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingInvoiceResponse$ {
  /** @deprecated use `RemoveAccountingInvoiceResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingInvoiceResponse$inboundSchema;
  /** @deprecated use `RemoveAccountingInvoiceResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveAccountingInvoiceResponse$outboundSchema;
  /** @deprecated use `RemoveAccountingInvoiceResponse$Outbound` instead. */
  export type Outbound = RemoveAccountingInvoiceResponse$Outbound;
}

export function removeAccountingInvoiceResponseToJSON(
  removeAccountingInvoiceResponse: RemoveAccountingInvoiceResponse,
): string {
  return JSON.stringify(
    RemoveAccountingInvoiceResponse$outboundSchema.parse(
      removeAccountingInvoiceResponse,
    ),
  );
}

export function removeAccountingInvoiceResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingInvoiceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountingInvoiceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingInvoiceResponse' from JSON`,
  );
}
