/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveTaskProjectRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Project
   */
  id: string;
};

export type RemoveTaskProjectResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveTaskProjectRequest$inboundSchema: z.ZodType<
  RemoveTaskProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveTaskProjectRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveTaskProjectRequest$outboundSchema: z.ZodType<
  RemoveTaskProjectRequest$Outbound,
  z.ZodTypeDef,
  RemoveTaskProjectRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveTaskProjectRequest$ {
  /** @deprecated use `RemoveTaskProjectRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveTaskProjectRequest$inboundSchema;
  /** @deprecated use `RemoveTaskProjectRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveTaskProjectRequest$outboundSchema;
  /** @deprecated use `RemoveTaskProjectRequest$Outbound` instead. */
  export type Outbound = RemoveTaskProjectRequest$Outbound;
}

export function removeTaskProjectRequestToJSON(
  removeTaskProjectRequest: RemoveTaskProjectRequest,
): string {
  return JSON.stringify(
    RemoveTaskProjectRequest$outboundSchema.parse(removeTaskProjectRequest),
  );
}

export function removeTaskProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveTaskProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveTaskProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveTaskProjectRequest' from JSON`,
  );
}

/** @internal */
export const RemoveTaskProjectResponse$inboundSchema: z.ZodType<
  RemoveTaskProjectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveTaskProjectResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveTaskProjectResponse$outboundSchema: z.ZodType<
  RemoveTaskProjectResponse$Outbound,
  z.ZodTypeDef,
  RemoveTaskProjectResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveTaskProjectResponse$ {
  /** @deprecated use `RemoveTaskProjectResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveTaskProjectResponse$inboundSchema;
  /** @deprecated use `RemoveTaskProjectResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveTaskProjectResponse$outboundSchema;
  /** @deprecated use `RemoveTaskProjectResponse$Outbound` instead. */
  export type Outbound = RemoveTaskProjectResponse$Outbound;
}

export function removeTaskProjectResponseToJSON(
  removeTaskProjectResponse: RemoveTaskProjectResponse,
): string {
  return JSON.stringify(
    RemoveTaskProjectResponse$outboundSchema.parse(removeTaskProjectResponse),
  );
}

export function removeTaskProjectResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveTaskProjectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveTaskProjectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveTaskProjectResponse' from JSON`,
  );
}
