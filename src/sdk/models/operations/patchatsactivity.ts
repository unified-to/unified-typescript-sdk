/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type PatchAtsActivityRequest = {
  atsActivity?: shared.AtsActivity | undefined;
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * Comma-delimited fields to return
   */
  fields?: Array<string> | undefined;
  /**
   * ID of the Activity
   */
  id: string;
};

/** @internal */
export const PatchAtsActivityRequest$inboundSchema: z.ZodType<
  PatchAtsActivityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  AtsActivity: shared.AtsActivity$inboundSchema.optional(),
  connection_id: z.string(),
  fields: z.array(z.string()).optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "AtsActivity": "atsActivity",
    "connection_id": "connectionId",
  });
});

/** @internal */
export type PatchAtsActivityRequest$Outbound = {
  AtsActivity?: shared.AtsActivity$Outbound | undefined;
  connection_id: string;
  fields?: Array<string> | undefined;
  id: string;
};

/** @internal */
export const PatchAtsActivityRequest$outboundSchema: z.ZodType<
  PatchAtsActivityRequest$Outbound,
  z.ZodTypeDef,
  PatchAtsActivityRequest
> = z.object({
  atsActivity: shared.AtsActivity$outboundSchema.optional(),
  connectionId: z.string(),
  fields: z.array(z.string()).optional(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    atsActivity: "AtsActivity",
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchAtsActivityRequest$ {
  /** @deprecated use `PatchAtsActivityRequest$inboundSchema` instead. */
  export const inboundSchema = PatchAtsActivityRequest$inboundSchema;
  /** @deprecated use `PatchAtsActivityRequest$outboundSchema` instead. */
  export const outboundSchema = PatchAtsActivityRequest$outboundSchema;
  /** @deprecated use `PatchAtsActivityRequest$Outbound` instead. */
  export type Outbound = PatchAtsActivityRequest$Outbound;
}

export function patchAtsActivityRequestToJSON(
  patchAtsActivityRequest: PatchAtsActivityRequest,
): string {
  return JSON.stringify(
    PatchAtsActivityRequest$outboundSchema.parse(patchAtsActivityRequest),
  );
}

export function patchAtsActivityRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchAtsActivityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchAtsActivityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchAtsActivityRequest' from JSON`,
  );
}
