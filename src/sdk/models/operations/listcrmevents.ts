/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListCrmEventsRequest = {
  /**
   * The company ID to filter by
   */
  companyId?: string | undefined;
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * The contact ID to filter by
   */
  contactId?: string | undefined;
  /**
   * The deal ID to filter by
   */
  dealId?: string | undefined;
  /**
   * Comma-delimited fields to return
   */
  fields?: Array<string> | undefined;
  /**
   * The CRM lead ID to filter by
   */
  leadId?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  order?: string | undefined;
  /**
   * Query string to search. eg. email address or name
   */
  query?: string | undefined;
  /**
   * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar
   */
  raw?: string | undefined;
  sort?: string | undefined;
  type?: string | undefined;
  /**
   * Return only results whose updated date is equal or greater to this value
   */
  updatedGte?: string | undefined;
  /**
   * The user/employee ID to filter by
   */
  userId?: string | undefined;
};

/** @internal */
export const ListCrmEventsRequest$inboundSchema: z.ZodType<
  ListCrmEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string().optional(),
  connection_id: z.string(),
  contact_id: z.string().optional(),
  deal_id: z.string().optional(),
  fields: z.array(z.string()).optional(),
  lead_id: z.string().optional(),
  limit: z.number().optional(),
  offset: z.number().optional(),
  order: z.string().optional(),
  query: z.string().optional(),
  raw: z.string().optional(),
  sort: z.string().optional(),
  type: z.string().optional(),
  updated_gte: z.string().optional(),
  user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "connection_id": "connectionId",
    "contact_id": "contactId",
    "deal_id": "dealId",
    "lead_id": "leadId",
    "updated_gte": "updatedGte",
    "user_id": "userId",
  });
});

/** @internal */
export type ListCrmEventsRequest$Outbound = {
  company_id?: string | undefined;
  connection_id: string;
  contact_id?: string | undefined;
  deal_id?: string | undefined;
  fields?: Array<string> | undefined;
  lead_id?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  order?: string | undefined;
  query?: string | undefined;
  raw?: string | undefined;
  sort?: string | undefined;
  type?: string | undefined;
  updated_gte?: string | undefined;
  user_id?: string | undefined;
};

/** @internal */
export const ListCrmEventsRequest$outboundSchema: z.ZodType<
  ListCrmEventsRequest$Outbound,
  z.ZodTypeDef,
  ListCrmEventsRequest
> = z.object({
  companyId: z.string().optional(),
  connectionId: z.string(),
  contactId: z.string().optional(),
  dealId: z.string().optional(),
  fields: z.array(z.string()).optional(),
  leadId: z.string().optional(),
  limit: z.number().optional(),
  offset: z.number().optional(),
  order: z.string().optional(),
  query: z.string().optional(),
  raw: z.string().optional(),
  sort: z.string().optional(),
  type: z.string().optional(),
  updatedGte: z.string().optional(),
  userId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    connectionId: "connection_id",
    contactId: "contact_id",
    dealId: "deal_id",
    leadId: "lead_id",
    updatedGte: "updated_gte",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCrmEventsRequest$ {
  /** @deprecated use `ListCrmEventsRequest$inboundSchema` instead. */
  export const inboundSchema = ListCrmEventsRequest$inboundSchema;
  /** @deprecated use `ListCrmEventsRequest$outboundSchema` instead. */
  export const outboundSchema = ListCrmEventsRequest$outboundSchema;
  /** @deprecated use `ListCrmEventsRequest$Outbound` instead. */
  export type Outbound = ListCrmEventsRequest$Outbound;
}

export function listCrmEventsRequestToJSON(
  listCrmEventsRequest: ListCrmEventsRequest,
): string {
  return JSON.stringify(
    ListCrmEventsRequest$outboundSchema.parse(listCrmEventsRequest),
  );
}

export function listCrmEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCrmEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCrmEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCrmEventsRequest' from JSON`,
  );
}
