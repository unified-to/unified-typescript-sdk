/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveAccountingJournalRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Journal
   */
  id: string;
};

export type RemoveAccountingJournalResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingJournalRequest$inboundSchema: z.ZodType<
  RemoveAccountingJournalRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveAccountingJournalRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveAccountingJournalRequest$outboundSchema: z.ZodType<
  RemoveAccountingJournalRequest$Outbound,
  z.ZodTypeDef,
  RemoveAccountingJournalRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingJournalRequest$ {
  /** @deprecated use `RemoveAccountingJournalRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingJournalRequest$inboundSchema;
  /** @deprecated use `RemoveAccountingJournalRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveAccountingJournalRequest$outboundSchema;
  /** @deprecated use `RemoveAccountingJournalRequest$Outbound` instead. */
  export type Outbound = RemoveAccountingJournalRequest$Outbound;
}

export function removeAccountingJournalRequestToJSON(
  removeAccountingJournalRequest: RemoveAccountingJournalRequest,
): string {
  return JSON.stringify(
    RemoveAccountingJournalRequest$outboundSchema.parse(
      removeAccountingJournalRequest,
    ),
  );
}

export function removeAccountingJournalRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingJournalRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountingJournalRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingJournalRequest' from JSON`,
  );
}

/** @internal */
export const RemoveAccountingJournalResponse$inboundSchema: z.ZodType<
  RemoveAccountingJournalResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveAccountingJournalResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingJournalResponse$outboundSchema: z.ZodType<
  RemoveAccountingJournalResponse$Outbound,
  z.ZodTypeDef,
  RemoveAccountingJournalResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingJournalResponse$ {
  /** @deprecated use `RemoveAccountingJournalResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingJournalResponse$inboundSchema;
  /** @deprecated use `RemoveAccountingJournalResponse$outboundSchema` instead. */
  export const outboundSchema = RemoveAccountingJournalResponse$outboundSchema;
  /** @deprecated use `RemoveAccountingJournalResponse$Outbound` instead. */
  export type Outbound = RemoveAccountingJournalResponse$Outbound;
}

export function removeAccountingJournalResponseToJSON(
  removeAccountingJournalResponse: RemoveAccountingJournalResponse,
): string {
  return JSON.stringify(
    RemoveAccountingJournalResponse$outboundSchema.parse(
      removeAccountingJournalResponse,
    ),
  );
}

export function removeAccountingJournalResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingJournalResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountingJournalResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingJournalResponse' from JSON`,
  );
}
