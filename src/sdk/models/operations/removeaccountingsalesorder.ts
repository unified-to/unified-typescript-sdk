/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveAccountingSalesorderRequest = {
  /**
   * ID of the connection
   */
  connectionId: string;
  /**
   * ID of the Salesorder
   */
  id: string;
};

export type RemoveAccountingSalesorderResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingSalesorderRequest$inboundSchema: z.ZodType<
  RemoveAccountingSalesorderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  connection_id: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "connection_id": "connectionId",
  });
});

/** @internal */
export type RemoveAccountingSalesorderRequest$Outbound = {
  connection_id: string;
  id: string;
};

/** @internal */
export const RemoveAccountingSalesorderRequest$outboundSchema: z.ZodType<
  RemoveAccountingSalesorderRequest$Outbound,
  z.ZodTypeDef,
  RemoveAccountingSalesorderRequest
> = z.object({
  connectionId: z.string(),
  id: z.string(),
}).transform((v) => {
  return remap$(v, {
    connectionId: "connection_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingSalesorderRequest$ {
  /** @deprecated use `RemoveAccountingSalesorderRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingSalesorderRequest$inboundSchema;
  /** @deprecated use `RemoveAccountingSalesorderRequest$outboundSchema` instead. */
  export const outboundSchema =
    RemoveAccountingSalesorderRequest$outboundSchema;
  /** @deprecated use `RemoveAccountingSalesorderRequest$Outbound` instead. */
  export type Outbound = RemoveAccountingSalesorderRequest$Outbound;
}

export function removeAccountingSalesorderRequestToJSON(
  removeAccountingSalesorderRequest: RemoveAccountingSalesorderRequest,
): string {
  return JSON.stringify(
    RemoveAccountingSalesorderRequest$outboundSchema.parse(
      removeAccountingSalesorderRequest,
    ),
  );
}

export function removeAccountingSalesorderRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingSalesorderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveAccountingSalesorderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingSalesorderRequest' from JSON`,
  );
}

/** @internal */
export const RemoveAccountingSalesorderResponse$inboundSchema: z.ZodType<
  RemoveAccountingSalesorderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type RemoveAccountingSalesorderResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const RemoveAccountingSalesorderResponse$outboundSchema: z.ZodType<
  RemoveAccountingSalesorderResponse$Outbound,
  z.ZodTypeDef,
  RemoveAccountingSalesorderResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveAccountingSalesorderResponse$ {
  /** @deprecated use `RemoveAccountingSalesorderResponse$inboundSchema` instead. */
  export const inboundSchema = RemoveAccountingSalesorderResponse$inboundSchema;
  /** @deprecated use `RemoveAccountingSalesorderResponse$outboundSchema` instead. */
  export const outboundSchema =
    RemoveAccountingSalesorderResponse$outboundSchema;
  /** @deprecated use `RemoveAccountingSalesorderResponse$Outbound` instead. */
  export type Outbound = RemoveAccountingSalesorderResponse$Outbound;
}

export function removeAccountingSalesorderResponseToJSON(
  removeAccountingSalesorderResponse: RemoveAccountingSalesorderResponse,
): string {
  return JSON.stringify(
    RemoveAccountingSalesorderResponse$outboundSchema.parse(
      removeAccountingSalesorderResponse,
    ),
  );
}

export function removeAccountingSalesorderResponseFromJSON(
  jsonString: string,
): SafeParseResult<RemoveAccountingSalesorderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RemoveAccountingSalesorderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveAccountingSalesorderResponse' from JSON`,
  );
}
