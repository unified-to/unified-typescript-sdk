/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { commentCreateUcComment } from "../funcs/commentCreateUcComment.js";
import { commentGetUcComment } from "../funcs/commentGetUcComment.js";
import { commentListUcComments } from "../funcs/commentListUcComments.js";
import { commentPatchUcComment } from "../funcs/commentPatchUcComment.js";
import { commentRemoveUcComment } from "../funcs/commentRemoveUcComment.js";
import { commentUpdateUcComment } from "../funcs/commentUpdateUcComment.js";
import { contactCreateUcContact } from "../funcs/contactCreateUcContact.js";
import { contactGetUcContact } from "../funcs/contactGetUcContact.js";
import { contactListUcContacts } from "../funcs/contactListUcContacts.js";
import { contactPatchUcContact } from "../funcs/contactPatchUcContact.js";
import { contactRemoveUcContact } from "../funcs/contactRemoveUcContact.js";
import { contactUpdateUcContact } from "../funcs/contactUpdateUcContact.js";
import { recordingCreateUcRecording } from "../funcs/recordingCreateUcRecording.js";
import { recordingGetUcRecording } from "../funcs/recordingGetUcRecording.js";
import { recordingListUcRecordings } from "../funcs/recordingListUcRecordings.js";
import { recordingPatchUcRecording } from "../funcs/recordingPatchUcRecording.js";
import { recordingRemoveUcRecording } from "../funcs/recordingRemoveUcRecording.js";
import { recordingUpdateUcRecording } from "../funcs/recordingUpdateUcRecording.js";
import { ucListUcCalls } from "../funcs/ucListUcCalls.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Uc extends ClientSDK {
  /**
   * Create a comment
   */
  async createUcComment(
    request: operations.CreateUcCommentRequest,
    options?: RequestOptions,
  ): Promise<shared.UcComment> {
    return unwrapAsync(commentCreateUcComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a contact
   */
  async createUcContact(
    request: operations.CreateUcContactRequest,
    options?: RequestOptions,
  ): Promise<shared.UcContact> {
    return unwrapAsync(contactCreateUcContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a recording
   */
  async createUcRecording(
    request: operations.CreateUcRecordingRequest,
    options?: RequestOptions,
  ): Promise<shared.UcRecording> {
    return unwrapAsync(recordingCreateUcRecording(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a comment
   */
  async getUcComment(
    request: operations.GetUcCommentRequest,
    options?: RequestOptions,
  ): Promise<shared.UcComment> {
    return unwrapAsync(commentGetUcComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a contact
   */
  async getUcContact(
    request: operations.GetUcContactRequest,
    options?: RequestOptions,
  ): Promise<shared.UcContact> {
    return unwrapAsync(contactGetUcContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a recording
   */
  async getUcRecording(
    request: operations.GetUcRecordingRequest,
    options?: RequestOptions,
  ): Promise<shared.UcRecording> {
    return unwrapAsync(recordingGetUcRecording(
      this,
      request,
      options,
    ));
  }

  /**
   * List all calls
   */
  async listUcCalls(
    request: operations.ListUcCallsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.UcCall>> {
    return unwrapAsync(ucListUcCalls(
      this,
      request,
      options,
    ));
  }

  /**
   * List all comments
   */
  async listUcComments(
    request: operations.ListUcCommentsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.UcComment>> {
    return unwrapAsync(commentListUcComments(
      this,
      request,
      options,
    ));
  }

  /**
   * List all contacts
   */
  async listUcContacts(
    request: operations.ListUcContactsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.UcContact>> {
    return unwrapAsync(contactListUcContacts(
      this,
      request,
      options,
    ));
  }

  /**
   * List all recordings
   */
  async listUcRecordings(
    request: operations.ListUcRecordingsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.UcRecording>> {
    return unwrapAsync(recordingListUcRecordings(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a comment
   */
  async patchUcComment(
    request: operations.PatchUcCommentRequest,
    options?: RequestOptions,
  ): Promise<shared.UcComment> {
    return unwrapAsync(commentPatchUcComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a contact
   */
  async patchUcContact(
    request: operations.PatchUcContactRequest,
    options?: RequestOptions,
  ): Promise<shared.UcContact> {
    return unwrapAsync(contactPatchUcContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a recording
   */
  async patchUcRecording(
    request: operations.PatchUcRecordingRequest,
    options?: RequestOptions,
  ): Promise<shared.UcRecording> {
    return unwrapAsync(recordingPatchUcRecording(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a comment
   */
  async removeUcComment(
    request: operations.RemoveUcCommentRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveUcCommentResponse | undefined> {
    return unwrapAsync(commentRemoveUcComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a contact
   */
  async removeUcContact(
    request: operations.RemoveUcContactRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveUcContactResponse | undefined> {
    return unwrapAsync(contactRemoveUcContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a recording
   */
  async removeUcRecording(
    request: operations.RemoveUcRecordingRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveUcRecordingResponse | undefined> {
    return unwrapAsync(recordingRemoveUcRecording(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a comment
   */
  async updateUcComment(
    request: operations.UpdateUcCommentRequest,
    options?: RequestOptions,
  ): Promise<shared.UcComment> {
    return unwrapAsync(commentUpdateUcComment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a contact
   */
  async updateUcContact(
    request: operations.UpdateUcContactRequest,
    options?: RequestOptions,
  ): Promise<shared.UcContact> {
    return unwrapAsync(contactUpdateUcContact(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a recording
   */
  async updateUcRecording(
    request: operations.UpdateUcRecordingRequest,
    options?: RequestOptions,
  ): Promise<shared.UcRecording> {
    return unwrapAsync(recordingUpdateUcRecording(
      this,
      request,
      options,
    ));
  }
}
