/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { connectionCreateUnifiedConnection } from "../funcs/connectionCreateUnifiedConnection.js";
import { connectionGetUnifiedConnection } from "../funcs/connectionGetUnifiedConnection.js";
import { connectionListUnifiedConnections } from "../funcs/connectionListUnifiedConnections.js";
import { connectionPatchUnifiedConnection } from "../funcs/connectionPatchUnifiedConnection.js";
import { connectionRemoveUnifiedConnection } from "../funcs/connectionRemoveUnifiedConnection.js";
import { connectionUpdateUnifiedConnection } from "../funcs/connectionUpdateUnifiedConnection.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Connection extends ClientSDK {
    /**
     * Create connection
     */
    async createUnifiedConnection(
        request?: shared.Connection | undefined,
        options?: RequestOptions
    ): Promise<shared.Connection> {
        return unwrapAsync(connectionCreateUnifiedConnection(this, request, options));
    }

    /**
     * Retrieve connection
     */
    async getUnifiedConnection(
        request: operations.GetUnifiedConnectionRequest,
        options?: RequestOptions
    ): Promise<shared.Connection> {
        return unwrapAsync(connectionGetUnifiedConnection(this, request, options));
    }

    /**
     * List all connections
     */
    async listUnifiedConnections(
        request: operations.ListUnifiedConnectionsRequest,
        options?: RequestOptions
    ): Promise<Array<shared.Connection>> {
        return unwrapAsync(connectionListUnifiedConnections(this, request, options));
    }

    /**
     * Update connection
     */
    async patchUnifiedConnection(
        request: operations.PatchUnifiedConnectionRequest,
        options?: RequestOptions
    ): Promise<shared.Connection> {
        return unwrapAsync(connectionPatchUnifiedConnection(this, request, options));
    }

    /**
     * Remove connection
     */
    async removeUnifiedConnection(
        request: operations.RemoveUnifiedConnectionRequest,
        options?: RequestOptions
    ): Promise<string> {
        return unwrapAsync(connectionRemoveUnifiedConnection(this, request, options));
    }

    /**
     * Update connection
     */
    async updateUnifiedConnection(
        request: operations.UpdateUnifiedConnectionRequest,
        options?: RequestOptions
    ): Promise<shared.Connection> {
        return unwrapAsync(connectionUpdateUnifiedConnection(this, request, options));
    }
}
