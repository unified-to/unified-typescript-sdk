/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { unifiedCreateUnifiedConnection } from "../funcs/unifiedCreateUnifiedConnection.js";
import { unifiedGetUnifiedConnection } from "../funcs/unifiedGetUnifiedConnection.js";
import { unifiedListUnifiedConnections } from "../funcs/unifiedListUnifiedConnections.js";
import { unifiedPatchUnifiedConnection } from "../funcs/unifiedPatchUnifiedConnection.js";
import { unifiedRemoveUnifiedConnection } from "../funcs/unifiedRemoveUnifiedConnection.js";
import { unifiedUpdateUnifiedConnection } from "../funcs/unifiedUpdateUnifiedConnection.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Connection extends ClientSDK {
  /**
   * Create connection
   *
   * @remarks
   * Used only to import existing customer credentials; use "Authorize new connection" instead
   */
  async createUnifiedConnection(
    request: shared.Connection,
    options?: RequestOptions,
  ): Promise<shared.Connection> {
    return unwrapAsync(unifiedCreateUnifiedConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve connection
   */
  async getUnifiedConnection(
    request: operations.GetUnifiedConnectionRequest,
    options?: RequestOptions,
  ): Promise<shared.Connection> {
    return unwrapAsync(unifiedGetUnifiedConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * List all connections
   */
  async listUnifiedConnections(
    request: operations.ListUnifiedConnectionsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.Connection>> {
    return unwrapAsync(unifiedListUnifiedConnections(
      this,
      request,
      options,
    ));
  }

  /**
   * Update connection
   */
  async patchUnifiedConnection(
    request: operations.PatchUnifiedConnectionRequest,
    options?: RequestOptions,
  ): Promise<shared.Connection> {
    return unwrapAsync(unifiedPatchUnifiedConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove connection
   */
  async removeUnifiedConnection(
    request: operations.RemoveUnifiedConnectionRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveUnifiedConnectionResponse | undefined> {
    return unwrapAsync(unifiedRemoveUnifiedConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Update connection
   */
  async updateUnifiedConnection(
    request: operations.UpdateUnifiedConnectionRequest,
    options?: RequestOptions,
  ): Promise<shared.Connection> {
    return unwrapAsync(unifiedUpdateUnifiedConnection(
      this,
      request,
      options,
    ));
  }
}
