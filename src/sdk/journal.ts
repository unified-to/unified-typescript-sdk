/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingCreateAccountingJournal } from "../funcs/accountingCreateAccountingJournal.js";
import { accountingGetAccountingJournal } from "../funcs/accountingGetAccountingJournal.js";
import { accountingListAccountingJournals } from "../funcs/accountingListAccountingJournals.js";
import { accountingPatchAccountingJournal } from "../funcs/accountingPatchAccountingJournal.js";
import { accountingRemoveAccountingJournal } from "../funcs/accountingRemoveAccountingJournal.js";
import { accountingUpdateAccountingJournal } from "../funcs/accountingUpdateAccountingJournal.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Journal extends ClientSDK {
  /**
   * Create a journal
   */
  async createAccountingJournal(
    request: operations.CreateAccountingJournalRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingJournal> {
    return unwrapAsync(accountingCreateAccountingJournal(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a journal
   */
  async getAccountingJournal(
    request: operations.GetAccountingJournalRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingJournal> {
    return unwrapAsync(accountingGetAccountingJournal(
      this,
      request,
      options,
    ));
  }

  /**
   * List all journals
   */
  async listAccountingJournals(
    request: operations.ListAccountingJournalsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingJournal>> {
    return unwrapAsync(accountingListAccountingJournals(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a journal
   */
  async patchAccountingJournal(
    request: operations.PatchAccountingJournalRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingJournal> {
    return unwrapAsync(accountingPatchAccountingJournal(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a journal
   */
  async removeAccountingJournal(
    request: operations.RemoveAccountingJournalRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingJournalResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingJournal(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a journal
   */
  async updateAccountingJournal(
    request: operations.UpdateAccountingJournalRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingJournal> {
    return unwrapAsync(accountingUpdateAccountingJournal(
      this,
      request,
      options,
    ));
  }
}
