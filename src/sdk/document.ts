/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atsCreateAtsDocument } from "../funcs/atsCreateAtsDocument.js";
import { atsGetAtsDocument } from "../funcs/atsGetAtsDocument.js";
import { atsListAtsDocuments } from "../funcs/atsListAtsDocuments.js";
import { atsPatchAtsDocument } from "../funcs/atsPatchAtsDocument.js";
import { atsRemoveAtsDocument } from "../funcs/atsRemoveAtsDocument.js";
import { atsUpdateAtsDocument } from "../funcs/atsUpdateAtsDocument.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Document extends ClientSDK {
  /**
   * Create a document
   */
  async createAtsDocument(
    request: operations.CreateAtsDocumentRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsDocument> {
    return unwrapAsync(atsCreateAtsDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a document
   */
  async getAtsDocument(
    request: operations.GetAtsDocumentRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsDocument> {
    return unwrapAsync(atsGetAtsDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * List all documents
   */
  async listAtsDocuments(
    request: operations.ListAtsDocumentsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AtsDocument>> {
    return unwrapAsync(atsListAtsDocuments(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a document
   */
  async patchAtsDocument(
    request: operations.PatchAtsDocumentRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsDocument> {
    return unwrapAsync(atsPatchAtsDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a document
   */
  async removeAtsDocument(
    request: operations.RemoveAtsDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAtsDocumentResponse | undefined> {
    return unwrapAsync(atsRemoveAtsDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a document
   */
  async updateAtsDocument(
    request: operations.UpdateAtsDocumentRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsDocument> {
    return unwrapAsync(atsUpdateAtsDocument(
      this,
      request,
      options,
    ));
  }
}
