/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { documentCreateAtsDocument } from "../funcs/documentCreateAtsDocument.js";
import { documentGetAtsDocument } from "../funcs/documentGetAtsDocument.js";
import { documentListAtsDocuments } from "../funcs/documentListAtsDocuments.js";
import { documentPatchAtsDocument } from "../funcs/documentPatchAtsDocument.js";
import { documentRemoveAtsDocument } from "../funcs/documentRemoveAtsDocument.js";
import { documentUpdateAtsDocument } from "../funcs/documentUpdateAtsDocument.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Document extends ClientSDK {
    /**
     * Create a document
     */
    async createAtsDocument(
        request: operations.CreateAtsDocumentRequest,
        options?: RequestOptions
    ): Promise<shared.AtsDocument> {
        return unwrapAsync(documentCreateAtsDocument(this, request, options));
    }

    /**
     * Retrieve a document
     */
    async getAtsDocument(
        request: operations.GetAtsDocumentRequest,
        options?: RequestOptions
    ): Promise<shared.AtsDocument> {
        return unwrapAsync(documentGetAtsDocument(this, request, options));
    }

    /**
     * List all documents
     */
    async listAtsDocuments(
        request: operations.ListAtsDocumentsRequest,
        options?: RequestOptions
    ): Promise<Array<shared.AtsDocument>> {
        return unwrapAsync(documentListAtsDocuments(this, request, options));
    }

    /**
     * Update a document
     */
    async patchAtsDocument(
        request: operations.PatchAtsDocumentRequest,
        options?: RequestOptions
    ): Promise<shared.AtsDocument> {
        return unwrapAsync(documentPatchAtsDocument(this, request, options));
    }

    /**
     * Remove a document
     */
    async removeAtsDocument(
        request: operations.RemoveAtsDocumentRequest,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(documentRemoveAtsDocument(this, request, options));
    }

    /**
     * Update a document
     */
    async updateAtsDocument(
        request: operations.UpdateAtsDocumentRequest,
        options?: RequestOptions
    ): Promise<shared.AtsDocument> {
        return unwrapAsync(documentUpdateAtsDocument(this, request, options));
    }
}
