/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { taskCreateTaskProject } from "../funcs/taskCreateTaskProject.js";
import { taskGetTaskProject } from "../funcs/taskGetTaskProject.js";
import { taskListTaskProjects } from "../funcs/taskListTaskProjects.js";
import { taskPatchTaskProject } from "../funcs/taskPatchTaskProject.js";
import { taskRemoveTaskProject } from "../funcs/taskRemoveTaskProject.js";
import { taskUpdateTaskProject } from "../funcs/taskUpdateTaskProject.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Project extends ClientSDK {
  /**
   * Create a project
   */
  async createTaskProject(
    request: operations.CreateTaskProjectRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskProject> {
    return unwrapAsync(taskCreateTaskProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a project
   */
  async getTaskProject(
    request: operations.GetTaskProjectRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskProject> {
    return unwrapAsync(taskGetTaskProject(
      this,
      request,
      options,
    ));
  }

  /**
   * List all projects
   */
  async listTaskProjects(
    request: operations.ListTaskProjectsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.TaskProject>> {
    return unwrapAsync(taskListTaskProjects(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a project
   */
  async patchTaskProject(
    request: operations.PatchTaskProjectRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskProject> {
    return unwrapAsync(taskPatchTaskProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a project
   */
  async removeTaskProject(
    request: operations.RemoveTaskProjectRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveTaskProjectResponse | undefined> {
    return unwrapAsync(taskRemoveTaskProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a project
   */
  async updateTaskProject(
    request: operations.UpdateTaskProjectRequest,
    options?: RequestOptions,
  ): Promise<shared.TaskProject> {
    return unwrapAsync(taskUpdateTaskProject(
      this,
      request,
      options,
    ));
  }
}
