/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { calendarGetCalendarRecording } from "../funcs/calendarGetCalendarRecording.js";
import { calendarListCalendarRecordings } from "../funcs/calendarListCalendarRecordings.js";
import { recordingCreateUcRecording } from "../funcs/recordingCreateUcRecording.js";
import { recordingGetUcRecording } from "../funcs/recordingGetUcRecording.js";
import { recordingListUcRecordings } from "../funcs/recordingListUcRecordings.js";
import { recordingPatchUcRecording } from "../funcs/recordingPatchUcRecording.js";
import { recordingRemoveUcRecording } from "../funcs/recordingRemoveUcRecording.js";
import { recordingUpdateUcRecording } from "../funcs/recordingUpdateUcRecording.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Recording extends ClientSDK {
  /**
   * Create a recording
   */
  async createUcRecording(
    request: operations.CreateUcRecordingRequest,
    options?: RequestOptions,
  ): Promise<shared.UcRecording> {
    return unwrapAsync(recordingCreateUcRecording(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a recording
   */
  async getCalendarRecording(
    request: operations.GetCalendarRecordingRequest,
    options?: RequestOptions,
  ): Promise<shared.CalendarRecording> {
    return unwrapAsync(calendarGetCalendarRecording(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a recording
   */
  async getUcRecording(
    request: operations.GetUcRecordingRequest,
    options?: RequestOptions,
  ): Promise<shared.UcRecording> {
    return unwrapAsync(recordingGetUcRecording(
      this,
      request,
      options,
    ));
  }

  /**
   * List all recordings
   */
  async listCalendarRecordings(
    request: operations.ListCalendarRecordingsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CalendarRecording>> {
    return unwrapAsync(calendarListCalendarRecordings(
      this,
      request,
      options,
    ));
  }

  /**
   * List all recordings
   */
  async listUcRecordings(
    request: operations.ListUcRecordingsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.UcRecording>> {
    return unwrapAsync(recordingListUcRecordings(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a recording
   */
  async patchUcRecording(
    request: operations.PatchUcRecordingRequest,
    options?: RequestOptions,
  ): Promise<shared.UcRecording> {
    return unwrapAsync(recordingPatchUcRecording(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a recording
   */
  async removeUcRecording(
    request: operations.RemoveUcRecordingRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveUcRecordingResponse | undefined> {
    return unwrapAsync(recordingRemoveUcRecording(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a recording
   */
  async updateUcRecording(
    request: operations.UpdateUcRecordingRequest,
    options?: RequestOptions,
  ): Promise<shared.UcRecording> {
    return unwrapAsync(recordingUpdateUcRecording(
      this,
      request,
      options,
    ));
  }
}
