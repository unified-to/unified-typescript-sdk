/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { fileCreateStorageFile } from "../funcs/fileCreateStorageFile.js";
import { fileGetStorageFile } from "../funcs/fileGetStorageFile.js";
import { fileListStorageFiles } from "../funcs/fileListStorageFiles.js";
import { filePatchStorageFile } from "../funcs/filePatchStorageFile.js";
import { fileRemoveStorageFile } from "../funcs/fileRemoveStorageFile.js";
import { fileUpdateStorageFile } from "../funcs/fileUpdateStorageFile.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class FileT extends ClientSDK {
  /**
   * Create a file
   */
  async createStorageFile(
    request: operations.CreateStorageFileRequest,
    options?: RequestOptions,
  ): Promise<shared.StorageFile> {
    return unwrapAsync(fileCreateStorageFile(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a file
   */
  async getStorageFile(
    request: operations.GetStorageFileRequest,
    options?: RequestOptions,
  ): Promise<shared.StorageFile> {
    return unwrapAsync(fileGetStorageFile(
      this,
      request,
      options,
    ));
  }

  /**
   * List all files
   */
  async listStorageFiles(
    request: operations.ListStorageFilesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.StorageFile>> {
    return unwrapAsync(fileListStorageFiles(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a file
   */
  async patchStorageFile(
    request: operations.PatchStorageFileRequest,
    options?: RequestOptions,
  ): Promise<shared.StorageFile> {
    return unwrapAsync(filePatchStorageFile(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a file
   */
  async removeStorageFile(
    request: operations.RemoveStorageFileRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveStorageFileResponse | undefined> {
    return unwrapAsync(fileRemoveStorageFile(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a file
   */
  async updateStorageFile(
    request: operations.UpdateStorageFileRequest,
    options?: RequestOptions,
  ): Promise<shared.StorageFile> {
    return unwrapAsync(fileUpdateStorageFile(
      this,
      request,
      options,
    ));
  }
}
