/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { linkCreatePaymentLink } from "../funcs/linkCreatePaymentLink.js";
import { linkGetPaymentLink } from "../funcs/linkGetPaymentLink.js";
import { linkListPaymentLinks } from "../funcs/linkListPaymentLinks.js";
import { linkPatchPaymentLink } from "../funcs/linkPatchPaymentLink.js";
import { linkRemovePaymentLink } from "../funcs/linkRemovePaymentLink.js";
import { linkUpdatePaymentLink } from "../funcs/linkUpdatePaymentLink.js";
import { paymentCreatePaymentPayment } from "../funcs/paymentCreatePaymentPayment.js";
import { paymentCreatePaymentSubscription } from "../funcs/paymentCreatePaymentSubscription.js";
import { paymentGetPaymentPayment } from "../funcs/paymentGetPaymentPayment.js";
import { paymentGetPaymentPayout } from "../funcs/paymentGetPaymentPayout.js";
import { paymentGetPaymentRefund } from "../funcs/paymentGetPaymentRefund.js";
import { paymentGetPaymentSubscription } from "../funcs/paymentGetPaymentSubscription.js";
import { paymentListPaymentPayments } from "../funcs/paymentListPaymentPayments.js";
import { paymentListPaymentPayouts } from "../funcs/paymentListPaymentPayouts.js";
import { paymentListPaymentRefunds } from "../funcs/paymentListPaymentRefunds.js";
import { paymentListPaymentSubscriptions } from "../funcs/paymentListPaymentSubscriptions.js";
import { paymentPatchPaymentPayment } from "../funcs/paymentPatchPaymentPayment.js";
import { paymentPatchPaymentSubscription } from "../funcs/paymentPatchPaymentSubscription.js";
import { paymentRemovePaymentPayment } from "../funcs/paymentRemovePaymentPayment.js";
import { paymentRemovePaymentSubscription } from "../funcs/paymentRemovePaymentSubscription.js";
import { paymentUpdatePaymentPayment } from "../funcs/paymentUpdatePaymentPayment.js";
import { paymentUpdatePaymentSubscription } from "../funcs/paymentUpdatePaymentSubscription.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Payment extends ClientSDK {
  /**
   * Create a link
   */
  async createPaymentLink(
    request: operations.CreatePaymentLinkRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentLink> {
    return unwrapAsync(linkCreatePaymentLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a payment
   */
  async createPaymentPayment(
    request: operations.CreatePaymentPaymentRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentPayment> {
    return unwrapAsync(paymentCreatePaymentPayment(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a subscription
   */
  async createPaymentSubscription(
    request: operations.CreatePaymentSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentSubscription> {
    return unwrapAsync(paymentCreatePaymentSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a link
   */
  async getPaymentLink(
    request: operations.GetPaymentLinkRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentLink> {
    return unwrapAsync(linkGetPaymentLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a payment
   */
  async getPaymentPayment(
    request: operations.GetPaymentPaymentRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentPayment> {
    return unwrapAsync(paymentGetPaymentPayment(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a payout
   */
  async getPaymentPayout(
    request: operations.GetPaymentPayoutRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentPayout> {
    return unwrapAsync(paymentGetPaymentPayout(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a refund
   */
  async getPaymentRefund(
    request: operations.GetPaymentRefundRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentRefund> {
    return unwrapAsync(paymentGetPaymentRefund(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a subscription
   */
  async getPaymentSubscription(
    request: operations.GetPaymentSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentSubscription> {
    return unwrapAsync(paymentGetPaymentSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * List all links
   */
  async listPaymentLinks(
    request: operations.ListPaymentLinksRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.PaymentLink>> {
    return unwrapAsync(linkListPaymentLinks(
      this,
      request,
      options,
    ));
  }

  /**
   * List all payments
   */
  async listPaymentPayments(
    request: operations.ListPaymentPaymentsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.PaymentPayment>> {
    return unwrapAsync(paymentListPaymentPayments(
      this,
      request,
      options,
    ));
  }

  /**
   * List all payouts
   */
  async listPaymentPayouts(
    request: operations.ListPaymentPayoutsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.PaymentPayout>> {
    return unwrapAsync(paymentListPaymentPayouts(
      this,
      request,
      options,
    ));
  }

  /**
   * List all refunds
   */
  async listPaymentRefunds(
    request: operations.ListPaymentRefundsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.PaymentRefund>> {
    return unwrapAsync(paymentListPaymentRefunds(
      this,
      request,
      options,
    ));
  }

  /**
   * List all subscriptions
   */
  async listPaymentSubscriptions(
    request: operations.ListPaymentSubscriptionsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.PaymentSubscription>> {
    return unwrapAsync(paymentListPaymentSubscriptions(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a link
   */
  async patchPaymentLink(
    request: operations.PatchPaymentLinkRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentLink> {
    return unwrapAsync(linkPatchPaymentLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a payment
   */
  async patchPaymentPayment(
    request: operations.PatchPaymentPaymentRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentPayment> {
    return unwrapAsync(paymentPatchPaymentPayment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a subscription
   */
  async patchPaymentSubscription(
    request: operations.PatchPaymentSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentSubscription> {
    return unwrapAsync(paymentPatchPaymentSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a link
   */
  async removePaymentLink(
    request: operations.RemovePaymentLinkRequest,
    options?: RequestOptions,
  ): Promise<operations.RemovePaymentLinkResponse | undefined> {
    return unwrapAsync(linkRemovePaymentLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a payment
   */
  async removePaymentPayment(
    request: operations.RemovePaymentPaymentRequest,
    options?: RequestOptions,
  ): Promise<operations.RemovePaymentPaymentResponse | undefined> {
    return unwrapAsync(paymentRemovePaymentPayment(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a subscription
   */
  async removePaymentSubscription(
    request: operations.RemovePaymentSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.RemovePaymentSubscriptionResponse | undefined> {
    return unwrapAsync(paymentRemovePaymentSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a link
   */
  async updatePaymentLink(
    request: operations.UpdatePaymentLinkRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentLink> {
    return unwrapAsync(linkUpdatePaymentLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a payment
   */
  async updatePaymentPayment(
    request: operations.UpdatePaymentPaymentRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentPayment> {
    return unwrapAsync(paymentUpdatePaymentPayment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a subscription
   */
  async updatePaymentSubscription(
    request: operations.UpdatePaymentSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<shared.PaymentSubscription> {
    return unwrapAsync(paymentUpdatePaymentSubscription(
      this,
      request,
      options,
    ));
  }
}
