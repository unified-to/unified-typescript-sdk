/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { lmsCreateLmsClass } from "../funcs/lmsCreateLmsClass.js";
import { lmsCreateLmsCourse } from "../funcs/lmsCreateLmsCourse.js";
import { lmsCreateLmsInstructor } from "../funcs/lmsCreateLmsInstructor.js";
import { lmsCreateLmsStudent } from "../funcs/lmsCreateLmsStudent.js";
import { lmsGetLmsClass } from "../funcs/lmsGetLmsClass.js";
import { lmsGetLmsCourse } from "../funcs/lmsGetLmsCourse.js";
import { lmsGetLmsInstructor } from "../funcs/lmsGetLmsInstructor.js";
import { lmsGetLmsStudent } from "../funcs/lmsGetLmsStudent.js";
import { lmsListLmsClasses } from "../funcs/lmsListLmsClasses.js";
import { lmsListLmsCourses } from "../funcs/lmsListLmsCourses.js";
import { lmsListLmsInstructors } from "../funcs/lmsListLmsInstructors.js";
import { lmsListLmsStudents } from "../funcs/lmsListLmsStudents.js";
import { lmsPatchLmsClass } from "../funcs/lmsPatchLmsClass.js";
import { lmsPatchLmsCourse } from "../funcs/lmsPatchLmsCourse.js";
import { lmsPatchLmsInstructor } from "../funcs/lmsPatchLmsInstructor.js";
import { lmsPatchLmsStudent } from "../funcs/lmsPatchLmsStudent.js";
import { lmsRemoveLmsClass } from "../funcs/lmsRemoveLmsClass.js";
import { lmsRemoveLmsCourse } from "../funcs/lmsRemoveLmsCourse.js";
import { lmsRemoveLmsInstructor } from "../funcs/lmsRemoveLmsInstructor.js";
import { lmsRemoveLmsStudent } from "../funcs/lmsRemoveLmsStudent.js";
import { lmsUpdateLmsClass } from "../funcs/lmsUpdateLmsClass.js";
import { lmsUpdateLmsCourse } from "../funcs/lmsUpdateLmsCourse.js";
import { lmsUpdateLmsInstructor } from "../funcs/lmsUpdateLmsInstructor.js";
import { lmsUpdateLmsStudent } from "../funcs/lmsUpdateLmsStudent.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Lms extends ClientSDK {
  /**
   * Create a class
   */
  async createLmsClass(
    request: operations.CreateLmsClassRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsClass> {
    return unwrapAsync(lmsCreateLmsClass(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a course
   */
  async createLmsCourse(
    request: operations.CreateLmsCourseRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsCourse> {
    return unwrapAsync(lmsCreateLmsCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an instructor
   */
  async createLmsInstructor(
    request: operations.CreateLmsInstructorRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsInstructor> {
    return unwrapAsync(lmsCreateLmsInstructor(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a student
   */
  async createLmsStudent(
    request: operations.CreateLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsStudent> {
    return unwrapAsync(lmsCreateLmsStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a class
   */
  async getLmsClass(
    request: operations.GetLmsClassRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsClass> {
    return unwrapAsync(lmsGetLmsClass(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a course
   */
  async getLmsCourse(
    request: operations.GetLmsCourseRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsCourse> {
    return unwrapAsync(lmsGetLmsCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an instructor
   */
  async getLmsInstructor(
    request: operations.GetLmsInstructorRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsInstructor> {
    return unwrapAsync(lmsGetLmsInstructor(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a student
   */
  async getLmsStudent(
    request: operations.GetLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsStudent> {
    return unwrapAsync(lmsGetLmsStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * List all classes
   */
  async listLmsClasses(
    request: operations.ListLmsClassesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.LmsClass>> {
    return unwrapAsync(lmsListLmsClasses(
      this,
      request,
      options,
    ));
  }

  /**
   * List all courses
   */
  async listLmsCourses(
    request: operations.ListLmsCoursesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.LmsCourse>> {
    return unwrapAsync(lmsListLmsCourses(
      this,
      request,
      options,
    ));
  }

  /**
   * List all instructors
   */
  async listLmsInstructors(
    request: operations.ListLmsInstructorsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.LmsInstructor>> {
    return unwrapAsync(lmsListLmsInstructors(
      this,
      request,
      options,
    ));
  }

  /**
   * List all students
   */
  async listLmsStudents(
    request: operations.ListLmsStudentsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.LmsStudent>> {
    return unwrapAsync(lmsListLmsStudents(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a class
   */
  async patchLmsClass(
    request: operations.PatchLmsClassRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsClass> {
    return unwrapAsync(lmsPatchLmsClass(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a course
   */
  async patchLmsCourse(
    request: operations.PatchLmsCourseRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsCourse> {
    return unwrapAsync(lmsPatchLmsCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an instructor
   */
  async patchLmsInstructor(
    request: operations.PatchLmsInstructorRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsInstructor> {
    return unwrapAsync(lmsPatchLmsInstructor(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a student
   */
  async patchLmsStudent(
    request: operations.PatchLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsStudent> {
    return unwrapAsync(lmsPatchLmsStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a class
   */
  async removeLmsClass(
    request: operations.RemoveLmsClassRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveLmsClassResponse | undefined> {
    return unwrapAsync(lmsRemoveLmsClass(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a course
   */
  async removeLmsCourse(
    request: operations.RemoveLmsCourseRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveLmsCourseResponse | undefined> {
    return unwrapAsync(lmsRemoveLmsCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an instructor
   */
  async removeLmsInstructor(
    request: operations.RemoveLmsInstructorRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveLmsInstructorResponse | undefined> {
    return unwrapAsync(lmsRemoveLmsInstructor(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a student
   */
  async removeLmsStudent(
    request: operations.RemoveLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveLmsStudentResponse | undefined> {
    return unwrapAsync(lmsRemoveLmsStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a class
   */
  async updateLmsClass(
    request: operations.UpdateLmsClassRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsClass> {
    return unwrapAsync(lmsUpdateLmsClass(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a course
   */
  async updateLmsCourse(
    request: operations.UpdateLmsCourseRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsCourse> {
    return unwrapAsync(lmsUpdateLmsCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an instructor
   */
  async updateLmsInstructor(
    request: operations.UpdateLmsInstructorRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsInstructor> {
    return unwrapAsync(lmsUpdateLmsInstructor(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a student
   */
  async updateLmsStudent(
    request: operations.UpdateLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsStudent> {
    return unwrapAsync(lmsUpdateLmsStudent(
      this,
      request,
      options,
    ));
  }
}
