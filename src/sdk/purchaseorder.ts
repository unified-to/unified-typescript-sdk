/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingCreateAccountingPurchaseorder } from "../funcs/accountingCreateAccountingPurchaseorder.js";
import { accountingGetAccountingPurchaseorder } from "../funcs/accountingGetAccountingPurchaseorder.js";
import { accountingListAccountingPurchaseorders } from "../funcs/accountingListAccountingPurchaseorders.js";
import { accountingPatchAccountingPurchaseorder } from "../funcs/accountingPatchAccountingPurchaseorder.js";
import { accountingRemoveAccountingPurchaseorder } from "../funcs/accountingRemoveAccountingPurchaseorder.js";
import { accountingUpdateAccountingPurchaseorder } from "../funcs/accountingUpdateAccountingPurchaseorder.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Purchaseorder extends ClientSDK {
  /**
   * Create a purchaseorder
   */
  async createAccountingPurchaseorder(
    request: operations.CreateAccountingPurchaseorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingPurchaseorder> {
    return unwrapAsync(accountingCreateAccountingPurchaseorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a purchaseorder
   */
  async getAccountingPurchaseorder(
    request: operations.GetAccountingPurchaseorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingPurchaseorder> {
    return unwrapAsync(accountingGetAccountingPurchaseorder(
      this,
      request,
      options,
    ));
  }

  /**
   * List all purchaseorders
   */
  async listAccountingPurchaseorders(
    request: operations.ListAccountingPurchaseordersRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingPurchaseorder>> {
    return unwrapAsync(accountingListAccountingPurchaseorders(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a purchaseorder
   */
  async patchAccountingPurchaseorder(
    request: operations.PatchAccountingPurchaseorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingPurchaseorder> {
    return unwrapAsync(accountingPatchAccountingPurchaseorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a purchaseorder
   */
  async removeAccountingPurchaseorder(
    request: operations.RemoveAccountingPurchaseorderRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingPurchaseorderResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingPurchaseorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a purchaseorder
   */
  async updateAccountingPurchaseorder(
    request: operations.UpdateAccountingPurchaseorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingPurchaseorder> {
    return unwrapAsync(accountingUpdateAccountingPurchaseorder(
      this,
      request,
      options,
    ));
  }
}
