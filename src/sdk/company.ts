/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atsGetAtsCompany } from "../funcs/atsGetAtsCompany.js";
import { atsListAtsCompanies } from "../funcs/atsListAtsCompanies.js";
import { companyCreateCrmCompany } from "../funcs/companyCreateCrmCompany.js";
import { companyCreateHrisCompany } from "../funcs/companyCreateHrisCompany.js";
import { companyGetCrmCompany } from "../funcs/companyGetCrmCompany.js";
import { companyGetHrisCompany } from "../funcs/companyGetHrisCompany.js";
import { companyListCrmCompanies } from "../funcs/companyListCrmCompanies.js";
import { companyListEnrichCompanies } from "../funcs/companyListEnrichCompanies.js";
import { companyListHrisCompanies } from "../funcs/companyListHrisCompanies.js";
import { companyPatchCrmCompany } from "../funcs/companyPatchCrmCompany.js";
import { companyPatchHrisCompany } from "../funcs/companyPatchHrisCompany.js";
import { companyRemoveCrmCompany } from "../funcs/companyRemoveCrmCompany.js";
import { companyRemoveHrisCompany } from "../funcs/companyRemoveHrisCompany.js";
import { companyUpdateCrmCompany } from "../funcs/companyUpdateCrmCompany.js";
import { companyUpdateHrisCompany } from "../funcs/companyUpdateHrisCompany.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Company extends ClientSDK {
  /**
   * Create a company
   */
  async createCrmCompany(
    request: operations.CreateCrmCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmCompany> {
    return unwrapAsync(companyCreateCrmCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a company
   */
  async createHrisCompany(
    request: operations.CreateHrisCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisCompany> {
    return unwrapAsync(companyCreateHrisCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a company
   */
  async getAtsCompany(
    request: operations.GetAtsCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsCompany> {
    return unwrapAsync(atsGetAtsCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a company
   */
  async getCrmCompany(
    request: operations.GetCrmCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmCompany> {
    return unwrapAsync(companyGetCrmCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a company
   */
  async getHrisCompany(
    request: operations.GetHrisCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisCompany> {
    return unwrapAsync(companyGetHrisCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * List all companies
   */
  async listAtsCompanies(
    request: operations.ListAtsCompaniesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AtsCompany>> {
    return unwrapAsync(atsListAtsCompanies(
      this,
      request,
      options,
    ));
  }

  /**
   * List all companies
   */
  async listCrmCompanies(
    request: operations.ListCrmCompaniesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CrmCompany>> {
    return unwrapAsync(companyListCrmCompanies(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve enrichment information for a company
   */
  async listEnrichCompanies(
    request: operations.ListEnrichCompaniesRequest,
    options?: RequestOptions,
  ): Promise<shared.EnrichCompany> {
    return unwrapAsync(companyListEnrichCompanies(
      this,
      request,
      options,
    ));
  }

  /**
   * List all companies
   */
  async listHrisCompanies(
    request: operations.ListHrisCompaniesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisCompany>> {
    return unwrapAsync(companyListHrisCompanies(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a company
   */
  async patchCrmCompany(
    request: operations.PatchCrmCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmCompany> {
    return unwrapAsync(companyPatchCrmCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a company
   */
  async patchHrisCompany(
    request: operations.PatchHrisCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisCompany> {
    return unwrapAsync(companyPatchHrisCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a company
   */
  async removeCrmCompany(
    request: operations.RemoveCrmCompanyRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCrmCompanyResponse | undefined> {
    return unwrapAsync(companyRemoveCrmCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a company
   */
  async removeHrisCompany(
    request: operations.RemoveHrisCompanyRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveHrisCompanyResponse | undefined> {
    return unwrapAsync(companyRemoveHrisCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a company
   */
  async updateCrmCompany(
    request: operations.UpdateCrmCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.CrmCompany> {
    return unwrapAsync(companyUpdateCrmCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a company
   */
  async updateHrisCompany(
    request: operations.UpdateHrisCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisCompany> {
    return unwrapAsync(companyUpdateHrisCompany(
      this,
      request,
      options,
    ));
  }
}
