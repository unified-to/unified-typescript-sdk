/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { hrisCreateHrisTimeshift } from "../funcs/hrisCreateHrisTimeshift.js";
import { hrisGetHrisTimeshift } from "../funcs/hrisGetHrisTimeshift.js";
import { hrisListHrisTimeshifts } from "../funcs/hrisListHrisTimeshifts.js";
import { hrisPatchHrisTimeshift } from "../funcs/hrisPatchHrisTimeshift.js";
import { hrisRemoveHrisTimeshift } from "../funcs/hrisRemoveHrisTimeshift.js";
import { hrisUpdateHrisTimeshift } from "../funcs/hrisUpdateHrisTimeshift.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Timeshift extends ClientSDK {
  /**
   * Create a timeshift
   */
  async createHrisTimeshift(
    request: operations.CreateHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeshift> {
    return unwrapAsync(hrisCreateHrisTimeshift(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a timeshift
   */
  async getHrisTimeshift(
    request: operations.GetHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeshift> {
    return unwrapAsync(hrisGetHrisTimeshift(
      this,
      request,
      options,
    ));
  }

  /**
   * List all timeshifts
   */
  async listHrisTimeshifts(
    request: operations.ListHrisTimeshiftsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisTimeshift>> {
    return unwrapAsync(hrisListHrisTimeshifts(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a timeshift
   */
  async patchHrisTimeshift(
    request: operations.PatchHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeshift> {
    return unwrapAsync(hrisPatchHrisTimeshift(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a timeshift
   */
  async removeHrisTimeshift(
    request: operations.RemoveHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveHrisTimeshiftResponse | undefined> {
    return unwrapAsync(hrisRemoveHrisTimeshift(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a timeshift
   */
  async updateHrisTimeshift(
    request: operations.UpdateHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeshift> {
    return unwrapAsync(hrisUpdateHrisTimeshift(
      this,
      request,
      options,
    ));
  }
}
