/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { timeshiftCreateHrisTimeshift } from "../funcs/timeshiftCreateHrisTimeshift.js";
import { timeshiftGetHrisTimeshift } from "../funcs/timeshiftGetHrisTimeshift.js";
import { timeshiftListHrisTimeshifts } from "../funcs/timeshiftListHrisTimeshifts.js";
import { timeshiftPatchHrisTimeshift } from "../funcs/timeshiftPatchHrisTimeshift.js";
import { timeshiftRemoveHrisTimeshift } from "../funcs/timeshiftRemoveHrisTimeshift.js";
import { timeshiftUpdateHrisTimeshift } from "../funcs/timeshiftUpdateHrisTimeshift.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Timeshift extends ClientSDK {
  /**
   * Create a timeshift
   */
  async createHrisTimeshift(
    request: operations.CreateHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeshift> {
    return unwrapAsync(timeshiftCreateHrisTimeshift(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a timeshift
   */
  async getHrisTimeshift(
    request: operations.GetHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeshift> {
    return unwrapAsync(timeshiftGetHrisTimeshift(
      this,
      request,
      options,
    ));
  }

  /**
   * List all timeshifts
   */
  async listHrisTimeshifts(
    request: operations.ListHrisTimeshiftsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisTimeshift>> {
    return unwrapAsync(timeshiftListHrisTimeshifts(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a timeshift
   */
  async patchHrisTimeshift(
    request: operations.PatchHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeshift> {
    return unwrapAsync(timeshiftPatchHrisTimeshift(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a timeshift
   */
  async removeHrisTimeshift(
    request: operations.RemoveHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveHrisTimeshiftResponse | undefined> {
    return unwrapAsync(timeshiftRemoveHrisTimeshift(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a timeshift
   */
  async updateHrisTimeshift(
    request: operations.UpdateHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeshift> {
    return unwrapAsync(timeshiftUpdateHrisTimeshift(
      this,
      request,
      options,
    ));
  }
}
