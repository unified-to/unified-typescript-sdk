/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { lmsCreateLmsInstructor } from "../funcs/lmsCreateLmsInstructor.js";
import { lmsGetLmsInstructor } from "../funcs/lmsGetLmsInstructor.js";
import { lmsListLmsInstructors } from "../funcs/lmsListLmsInstructors.js";
import { lmsPatchLmsInstructor } from "../funcs/lmsPatchLmsInstructor.js";
import { lmsRemoveLmsInstructor } from "../funcs/lmsRemoveLmsInstructor.js";
import { lmsUpdateLmsInstructor } from "../funcs/lmsUpdateLmsInstructor.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Instructor extends ClientSDK {
  /**
   * Create an instructor
   */
  async createLmsInstructor(
    request: operations.CreateLmsInstructorRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsInstructor> {
    return unwrapAsync(lmsCreateLmsInstructor(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an instructor
   */
  async getLmsInstructor(
    request: operations.GetLmsInstructorRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsInstructor> {
    return unwrapAsync(lmsGetLmsInstructor(
      this,
      request,
      options,
    ));
  }

  /**
   * List all instructors
   */
  async listLmsInstructors(
    request: operations.ListLmsInstructorsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.LmsInstructor>> {
    return unwrapAsync(lmsListLmsInstructors(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an instructor
   */
  async patchLmsInstructor(
    request: operations.PatchLmsInstructorRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsInstructor> {
    return unwrapAsync(lmsPatchLmsInstructor(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an instructor
   */
  async removeLmsInstructor(
    request: operations.RemoveLmsInstructorRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveLmsInstructorResponse | undefined> {
    return unwrapAsync(lmsRemoveLmsInstructor(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an instructor
   */
  async updateLmsInstructor(
    request: operations.UpdateLmsInstructorRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsInstructor> {
    return unwrapAsync(lmsUpdateLmsInstructor(
      this,
      request,
      options,
    ));
  }
}
