/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { repoCreateRepoRepository } from "../funcs/repoCreateRepoRepository.js";
import { repoGetRepoRepository } from "../funcs/repoGetRepoRepository.js";
import { repoListRepoRepositories } from "../funcs/repoListRepoRepositories.js";
import { repoPatchRepoRepository } from "../funcs/repoPatchRepoRepository.js";
import { repoRemoveRepoRepository } from "../funcs/repoRemoveRepoRepository.js";
import { repoUpdateRepoRepository } from "../funcs/repoUpdateRepoRepository.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Repository extends ClientSDK {
  /**
   * Create a repository
   */
  async createRepoRepository(
    request: operations.CreateRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoRepository> {
    return unwrapAsync(repoCreateRepoRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a repository
   */
  async getRepoRepository(
    request: operations.GetRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoRepository> {
    return unwrapAsync(repoGetRepoRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * List all repositories
   */
  async listRepoRepositories(
    request: operations.ListRepoRepositoriesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.RepoRepository>> {
    return unwrapAsync(repoListRepoRepositories(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a repository
   */
  async patchRepoRepository(
    request: operations.PatchRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoRepository> {
    return unwrapAsync(repoPatchRepoRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a repository
   */
  async removeRepoRepository(
    request: operations.RemoveRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveRepoRepositoryResponse | undefined> {
    return unwrapAsync(repoRemoveRepoRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a repository
   */
  async updateRepoRepository(
    request: operations.UpdateRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoRepository> {
    return unwrapAsync(repoUpdateRepoRepository(
      this,
      request,
      options,
    ));
  }
}
