/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { repositoryCreateRepoRepository } from "../funcs/repositoryCreateRepoRepository.js";
import { repositoryGetRepoRepository } from "../funcs/repositoryGetRepoRepository.js";
import { repositoryListRepoRepositories } from "../funcs/repositoryListRepoRepositories.js";
import { repositoryPatchRepoRepository } from "../funcs/repositoryPatchRepoRepository.js";
import { repositoryRemoveRepoRepository } from "../funcs/repositoryRemoveRepoRepository.js";
import { repositoryUpdateRepoRepository } from "../funcs/repositoryUpdateRepoRepository.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Repository extends ClientSDK {
  /**
   * Create a repository
   */
  async createRepoRepository(
    request: operations.CreateRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoRepository> {
    return unwrapAsync(repositoryCreateRepoRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a repository
   */
  async getRepoRepository(
    request: operations.GetRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoRepository> {
    return unwrapAsync(repositoryGetRepoRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * List all repositories
   */
  async listRepoRepositories(
    request: operations.ListRepoRepositoriesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.RepoRepository>> {
    return unwrapAsync(repositoryListRepoRepositories(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a repository
   */
  async patchRepoRepository(
    request: operations.PatchRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoRepository> {
    return unwrapAsync(repositoryPatchRepoRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a repository
   */
  async removeRepoRepository(
    request: operations.RemoveRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(repositoryRemoveRepoRepository(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a repository
   */
  async updateRepoRepository(
    request: operations.UpdateRepoRepositoryRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoRepository> {
    return unwrapAsync(repositoryUpdateRepoRepository(
      this,
      request,
      options,
    ));
  }
}
