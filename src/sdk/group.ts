/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { groupCreateHrisGroup } from "../funcs/groupCreateHrisGroup.js";
import { groupCreateScimGroups } from "../funcs/groupCreateScimGroups.js";
import { groupGetHrisGroup } from "../funcs/groupGetHrisGroup.js";
import { groupGetScimGroups } from "../funcs/groupGetScimGroups.js";
import { groupListHrisGroups } from "../funcs/groupListHrisGroups.js";
import { groupListScimGroups } from "../funcs/groupListScimGroups.js";
import { groupPatchHrisGroup } from "../funcs/groupPatchHrisGroup.js";
import { groupPatchScimGroups } from "../funcs/groupPatchScimGroups.js";
import { groupRemoveHrisGroup } from "../funcs/groupRemoveHrisGroup.js";
import { groupRemoveScimGroups } from "../funcs/groupRemoveScimGroups.js";
import { groupUpdateHrisGroup } from "../funcs/groupUpdateHrisGroup.js";
import { groupUpdateScimGroups } from "../funcs/groupUpdateScimGroups.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Group extends ClientSDK {
  /**
   * Create a group
   */
  async createHrisGroup(
    request: operations.CreateHrisGroupRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisGroup> {
    return unwrapAsync(groupCreateHrisGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Create group
   */
  async createScimGroups(
    request: operations.CreateScimGroupsRequest,
    options?: RequestOptions,
  ): Promise<shared.ScimGroup> {
    return unwrapAsync(groupCreateScimGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a group
   */
  async getHrisGroup(
    request: operations.GetHrisGroupRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisGroup> {
    return unwrapAsync(groupGetHrisGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Get group
   */
  async getScimGroups(
    request: operations.GetScimGroupsRequest,
    options?: RequestOptions,
  ): Promise<shared.ScimGroup> {
    return unwrapAsync(groupGetScimGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List all groups
   */
  async listHrisGroups(
    request: operations.ListHrisGroupsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisGroup>> {
    return unwrapAsync(groupListHrisGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List groups
   */
  async listScimGroups(
    request: operations.ListScimGroupsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.ScimGroup>> {
    return unwrapAsync(groupListScimGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a group
   */
  async patchHrisGroup(
    request: operations.PatchHrisGroupRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisGroup> {
    return unwrapAsync(groupPatchHrisGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Update group
   */
  async patchScimGroups(
    request: operations.PatchScimGroupsRequest,
    options?: RequestOptions,
  ): Promise<shared.ScimGroup> {
    return unwrapAsync(groupPatchScimGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a group
   */
  async removeHrisGroup(
    request: operations.RemoveHrisGroupRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(groupRemoveHrisGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete group
   */
  async removeScimGroups(
    request: operations.RemoveScimGroupsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(groupRemoveScimGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a group
   */
  async updateHrisGroup(
    request: operations.UpdateHrisGroupRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisGroup> {
    return unwrapAsync(groupUpdateHrisGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Update group
   */
  async updateScimGroups(
    request: operations.UpdateScimGroupsRequest,
    options?: RequestOptions,
  ): Promise<shared.ScimGroup> {
    return unwrapAsync(groupUpdateScimGroups(
      this,
      request,
      options,
    ));
  }
}
