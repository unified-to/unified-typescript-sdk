/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { repoCreateRepoPullrequest } from "../funcs/repoCreateRepoPullrequest.js";
import { repoGetRepoPullrequest } from "../funcs/repoGetRepoPullrequest.js";
import { repoListRepoPullrequests } from "../funcs/repoListRepoPullrequests.js";
import { repoPatchRepoPullrequest } from "../funcs/repoPatchRepoPullrequest.js";
import { repoRemoveRepoPullrequest } from "../funcs/repoRemoveRepoPullrequest.js";
import { repoUpdateRepoPullrequest } from "../funcs/repoUpdateRepoPullrequest.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Pullrequest extends ClientSDK {
  /**
   * Create a pullrequest
   */
  async createRepoPullrequest(
    request: operations.CreateRepoPullrequestRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoPullrequest> {
    return unwrapAsync(repoCreateRepoPullrequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a pullrequest
   */
  async getRepoPullrequest(
    request: operations.GetRepoPullrequestRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoPullrequest> {
    return unwrapAsync(repoGetRepoPullrequest(
      this,
      request,
      options,
    ));
  }

  /**
   * List all pullrequests
   */
  async listRepoPullrequests(
    request: operations.ListRepoPullrequestsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.RepoPullrequest>> {
    return unwrapAsync(repoListRepoPullrequests(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a pullrequest
   */
  async patchRepoPullrequest(
    request: operations.PatchRepoPullrequestRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoPullrequest> {
    return unwrapAsync(repoPatchRepoPullrequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a pullrequest
   */
  async removeRepoPullrequest(
    request: operations.RemoveRepoPullrequestRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveRepoPullrequestResponse | undefined> {
    return unwrapAsync(repoRemoveRepoPullrequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a pullrequest
   */
  async updateRepoPullrequest(
    request: operations.UpdateRepoPullrequestRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoPullrequest> {
    return unwrapAsync(repoUpdateRepoPullrequest(
      this,
      request,
      options,
    ));
  }
}
