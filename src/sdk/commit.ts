/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { repoCreateRepoCommit } from "../funcs/repoCreateRepoCommit.js";
import { repoGetRepoCommit } from "../funcs/repoGetRepoCommit.js";
import { repoListRepoCommits } from "../funcs/repoListRepoCommits.js";
import { repoPatchRepoCommit } from "../funcs/repoPatchRepoCommit.js";
import { repoRemoveRepoCommit } from "../funcs/repoRemoveRepoCommit.js";
import { repoUpdateRepoCommit } from "../funcs/repoUpdateRepoCommit.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Commit extends ClientSDK {
  /**
   * Create a commit
   */
  async createRepoCommit(
    request: operations.CreateRepoCommitRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoCommit> {
    return unwrapAsync(repoCreateRepoCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a commit
   */
  async getRepoCommit(
    request: operations.GetRepoCommitRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoCommit> {
    return unwrapAsync(repoGetRepoCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * List all commits
   */
  async listRepoCommits(
    request: operations.ListRepoCommitsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.RepoCommit>> {
    return unwrapAsync(repoListRepoCommits(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a commit
   */
  async patchRepoCommit(
    request: operations.PatchRepoCommitRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoCommit> {
    return unwrapAsync(repoPatchRepoCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a commit
   */
  async removeRepoCommit(
    request: operations.RemoveRepoCommitRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveRepoCommitResponse | undefined> {
    return unwrapAsync(repoRemoveRepoCommit(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a commit
   */
  async updateRepoCommit(
    request: operations.UpdateRepoCommitRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoCommit> {
    return unwrapAsync(repoUpdateRepoCommit(
      this,
      request,
      options,
    ));
  }
}
