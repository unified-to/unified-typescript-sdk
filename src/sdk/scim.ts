/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { scimCreateScimGroups } from "../funcs/scimCreateScimGroups.js";
import { scimCreateScimUsers } from "../funcs/scimCreateScimUsers.js";
import { scimGetScimUsers } from "../funcs/scimGetScimUsers.js";
import { scimListScimGroups } from "../funcs/scimListScimGroups.js";
import { scimListScimUsers } from "../funcs/scimListScimUsers.js";
import { scimPatchScimGroups } from "../funcs/scimPatchScimGroups.js";
import { scimPatchScimUsers } from "../funcs/scimPatchScimUsers.js";
import { scimRemoveScimGroups } from "../funcs/scimRemoveScimGroups.js";
import { scimRemoveScimUsers } from "../funcs/scimRemoveScimUsers.js";
import { scimUpdateScimGroups } from "../funcs/scimUpdateScimGroups.js";
import { scimUpdateScimUsers } from "../funcs/scimUpdateScimUsers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Scim extends ClientSDK {
  /**
   * Create group
   */
  async createScimGroups(
    request: operations.CreateScimGroupsRequest,
    options?: RequestOptions,
  ): Promise<shared.Group> {
    return unwrapAsync(scimCreateScimGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Create user
   */
  async createScimUsers(
    request: operations.CreateScimUsersRequest,
    options?: RequestOptions,
  ): Promise<shared.User> {
    return unwrapAsync(scimCreateScimUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Get user
   */
  async getScimUsers(
    request: operations.GetScimUsersRequest,
    options?: RequestOptions,
  ): Promise<shared.User> {
    return unwrapAsync(scimGetScimUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * List groups
   */
  async listScimGroups(
    request: operations.ListScimGroupsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.Group>> {
    return unwrapAsync(scimListScimGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List users
   */
  async listScimUsers(
    request: operations.ListScimUsersRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.User>> {
    return unwrapAsync(scimListScimUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Update group
   */
  async patchScimGroups(
    request: operations.PatchScimGroupsRequest,
    options?: RequestOptions,
  ): Promise<shared.Group> {
    return unwrapAsync(scimPatchScimGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   */
  async patchScimUsers(
    request: operations.PatchScimUsersRequest,
    options?: RequestOptions,
  ): Promise<shared.User> {
    return unwrapAsync(scimPatchScimUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete group
   */
  async removeScimGroups(
    request: operations.RemoveScimGroupsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimRemoveScimGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete user
   */
  async removeScimUsers(
    request: operations.RemoveScimUsersRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scimRemoveScimUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Update group
   */
  async updateScimGroups(
    request: operations.UpdateScimGroupsRequest,
    options?: RequestOptions,
  ): Promise<shared.Group> {
    return unwrapAsync(scimUpdateScimGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   */
  async updateScimUsers(
    request: operations.UpdateScimUsersRequest,
    options?: RequestOptions,
  ): Promise<shared.User> {
    return unwrapAsync(scimUpdateScimUsers(
      this,
      request,
      options,
    ));
  }
}
