/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingCreateAccountingCategory } from "../funcs/accountingCreateAccountingCategory.js";
import { accountingGetAccountingCategory } from "../funcs/accountingGetAccountingCategory.js";
import { accountingListAccountingCategories } from "../funcs/accountingListAccountingCategories.js";
import { accountingPatchAccountingCategory } from "../funcs/accountingPatchAccountingCategory.js";
import { accountingRemoveAccountingCategory } from "../funcs/accountingRemoveAccountingCategory.js";
import { accountingUpdateAccountingCategory } from "../funcs/accountingUpdateAccountingCategory.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Category extends ClientSDK {
  /**
   * Create a category
   */
  async createAccountingCategory(
    request: operations.CreateAccountingCategoryRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCategory> {
    return unwrapAsync(accountingCreateAccountingCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a category
   */
  async getAccountingCategory(
    request: operations.GetAccountingCategoryRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCategory> {
    return unwrapAsync(accountingGetAccountingCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * List all categories
   */
  async listAccountingCategories(
    request: operations.ListAccountingCategoriesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingCategory>> {
    return unwrapAsync(accountingListAccountingCategories(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a category
   */
  async patchAccountingCategory(
    request: operations.PatchAccountingCategoryRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCategory> {
    return unwrapAsync(accountingPatchAccountingCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a category
   */
  async removeAccountingCategory(
    request: operations.RemoveAccountingCategoryRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingCategoryResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a category
   */
  async updateAccountingCategory(
    request: operations.UpdateAccountingCategoryRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCategory> {
    return unwrapAsync(accountingUpdateAccountingCategory(
      this,
      request,
      options,
    ));
  }
}
