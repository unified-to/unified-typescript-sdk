/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { lmsCreateLmsStudent } from "../funcs/lmsCreateLmsStudent.js";
import { lmsGetLmsStudent } from "../funcs/lmsGetLmsStudent.js";
import { lmsListLmsStudents } from "../funcs/lmsListLmsStudents.js";
import { lmsPatchLmsStudent } from "../funcs/lmsPatchLmsStudent.js";
import { lmsRemoveLmsStudent } from "../funcs/lmsRemoveLmsStudent.js";
import { lmsUpdateLmsStudent } from "../funcs/lmsUpdateLmsStudent.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Student extends ClientSDK {
  /**
   * Create a student
   */
  async createLmsStudent(
    request: operations.CreateLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsStudent> {
    return unwrapAsync(lmsCreateLmsStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a student
   */
  async getLmsStudent(
    request: operations.GetLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsStudent> {
    return unwrapAsync(lmsGetLmsStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * List all students
   */
  async listLmsStudents(
    request: operations.ListLmsStudentsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.LmsStudent>> {
    return unwrapAsync(lmsListLmsStudents(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a student
   */
  async patchLmsStudent(
    request: operations.PatchLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsStudent> {
    return unwrapAsync(lmsPatchLmsStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a student
   */
  async removeLmsStudent(
    request: operations.RemoveLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveLmsStudentResponse | undefined> {
    return unwrapAsync(lmsRemoveLmsStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a student
   */
  async updateLmsStudent(
    request: operations.UpdateLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsStudent> {
    return unwrapAsync(lmsUpdateLmsStudent(
      this,
      request,
      options,
    ));
  }
}
