/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { studentCreateLmsStudent } from "../funcs/studentCreateLmsStudent.js";
import { studentGetLmsStudent } from "../funcs/studentGetLmsStudent.js";
import { studentListLmsStudents } from "../funcs/studentListLmsStudents.js";
import { studentPatchLmsStudent } from "../funcs/studentPatchLmsStudent.js";
import { studentRemoveLmsStudent } from "../funcs/studentRemoveLmsStudent.js";
import { studentUpdateLmsStudent } from "../funcs/studentUpdateLmsStudent.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Student extends ClientSDK {
  /**
   * Create a student
   */
  async createLmsStudent(
    request: operations.CreateLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsStudent> {
    return unwrapAsync(studentCreateLmsStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a student
   */
  async getLmsStudent(
    request: operations.GetLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsStudent> {
    return unwrapAsync(studentGetLmsStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * List all students
   */
  async listLmsStudents(
    request: operations.ListLmsStudentsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.LmsStudent>> {
    return unwrapAsync(studentListLmsStudents(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a student
   */
  async patchLmsStudent(
    request: operations.PatchLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsStudent> {
    return unwrapAsync(studentPatchLmsStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a student
   */
  async removeLmsStudent(
    request: operations.RemoveLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveLmsStudentResponse | undefined> {
    return unwrapAsync(studentRemoveLmsStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a student
   */
  async updateLmsStudent(
    request: operations.UpdateLmsStudentRequest,
    options?: RequestOptions,
  ): Promise<shared.LmsStudent> {
    return unwrapAsync(studentUpdateLmsStudent(
      this,
      request,
      options,
    ));
  }
}
