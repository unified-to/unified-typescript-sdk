/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { repoCreateRepoBranch } from "../funcs/repoCreateRepoBranch.js";
import { repoGetRepoBranch } from "../funcs/repoGetRepoBranch.js";
import { repoListRepoBranches } from "../funcs/repoListRepoBranches.js";
import { repoPatchRepoBranch } from "../funcs/repoPatchRepoBranch.js";
import { repoRemoveRepoBranch } from "../funcs/repoRemoveRepoBranch.js";
import { repoUpdateRepoBranch } from "../funcs/repoUpdateRepoBranch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Branch extends ClientSDK {
  /**
   * Create a branch
   */
  async createRepoBranch(
    request: operations.CreateRepoBranchRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoBranch> {
    return unwrapAsync(repoCreateRepoBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a branch
   */
  async getRepoBranch(
    request: operations.GetRepoBranchRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoBranch> {
    return unwrapAsync(repoGetRepoBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * List all branches
   */
  async listRepoBranches(
    request: operations.ListRepoBranchesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.RepoBranch>> {
    return unwrapAsync(repoListRepoBranches(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a branch
   */
  async patchRepoBranch(
    request: operations.PatchRepoBranchRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoBranch> {
    return unwrapAsync(repoPatchRepoBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a branch
   */
  async removeRepoBranch(
    request: operations.RemoveRepoBranchRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveRepoBranchResponse | undefined> {
    return unwrapAsync(repoRemoveRepoBranch(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a branch
   */
  async updateRepoBranch(
    request: operations.UpdateRepoBranchRequest,
    options?: RequestOptions,
  ): Promise<shared.RepoBranch> {
    return unwrapAsync(repoUpdateRepoBranch(
      this,
      request,
      options,
    ));
  }
}
