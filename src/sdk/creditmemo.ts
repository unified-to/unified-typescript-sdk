/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingCreateAccountingCreditmemo } from "../funcs/accountingCreateAccountingCreditmemo.js";
import { accountingGetAccountingCreditmemo } from "../funcs/accountingGetAccountingCreditmemo.js";
import { accountingListAccountingCreditmemoes } from "../funcs/accountingListAccountingCreditmemoes.js";
import { accountingPatchAccountingCreditmemo } from "../funcs/accountingPatchAccountingCreditmemo.js";
import { accountingRemoveAccountingCreditmemo } from "../funcs/accountingRemoveAccountingCreditmemo.js";
import { accountingUpdateAccountingCreditmemo } from "../funcs/accountingUpdateAccountingCreditmemo.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Creditmemo extends ClientSDK {
  /**
   * Create a creditmemo
   */
  async createAccountingCreditmemo(
    request: operations.CreateAccountingCreditmemoRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCreditmemo> {
    return unwrapAsync(accountingCreateAccountingCreditmemo(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a creditmemo
   */
  async getAccountingCreditmemo(
    request: operations.GetAccountingCreditmemoRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCreditmemo> {
    return unwrapAsync(accountingGetAccountingCreditmemo(
      this,
      request,
      options,
    ));
  }

  /**
   * List all creditmemoes
   */
  async listAccountingCreditmemoes(
    request: operations.ListAccountingCreditmemoesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingCreditmemo>> {
    return unwrapAsync(accountingListAccountingCreditmemoes(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a creditmemo
   */
  async patchAccountingCreditmemo(
    request: operations.PatchAccountingCreditmemoRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCreditmemo> {
    return unwrapAsync(accountingPatchAccountingCreditmemo(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a creditmemo
   */
  async removeAccountingCreditmemo(
    request: operations.RemoveAccountingCreditmemoRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingCreditmemoResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingCreditmemo(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a creditmemo
   */
  async updateAccountingCreditmemo(
    request: operations.UpdateAccountingCreditmemoRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingCreditmemo> {
    return unwrapAsync(accountingUpdateAccountingCreditmemo(
      this,
      request,
      options,
    ));
  }
}
