/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { companyCreateHrisCompany } from "../funcs/companyCreateHrisCompany.js";
import { companyGetHrisCompany } from "../funcs/companyGetHrisCompany.js";
import { companyListHrisCompanies } from "../funcs/companyListHrisCompanies.js";
import { companyPatchHrisCompany } from "../funcs/companyPatchHrisCompany.js";
import { companyRemoveHrisCompany } from "../funcs/companyRemoveHrisCompany.js";
import { companyUpdateHrisCompany } from "../funcs/companyUpdateHrisCompany.js";
import { hrisCreateHrisDevice } from "../funcs/hrisCreateHrisDevice.js";
import { hrisCreateHrisEmployee } from "../funcs/hrisCreateHrisEmployee.js";
import { hrisCreateHrisGroup } from "../funcs/hrisCreateHrisGroup.js";
import { hrisCreateHrisTimeshift } from "../funcs/hrisCreateHrisTimeshift.js";
import { hrisGetHrisDevice } from "../funcs/hrisGetHrisDevice.js";
import { hrisGetHrisEmployee } from "../funcs/hrisGetHrisEmployee.js";
import { hrisGetHrisGroup } from "../funcs/hrisGetHrisGroup.js";
import { hrisGetHrisPayslip } from "../funcs/hrisGetHrisPayslip.js";
import { hrisGetHrisTimeoff } from "../funcs/hrisGetHrisTimeoff.js";
import { hrisGetHrisTimeshift } from "../funcs/hrisGetHrisTimeshift.js";
import { hrisListHrisDevices } from "../funcs/hrisListHrisDevices.js";
import { hrisListHrisEmployees } from "../funcs/hrisListHrisEmployees.js";
import { hrisListHrisGroups } from "../funcs/hrisListHrisGroups.js";
import { hrisListHrisPayslips } from "../funcs/hrisListHrisPayslips.js";
import { hrisListHrisTimeoffs } from "../funcs/hrisListHrisTimeoffs.js";
import { hrisListHrisTimeshifts } from "../funcs/hrisListHrisTimeshifts.js";
import { hrisPatchHrisDevice } from "../funcs/hrisPatchHrisDevice.js";
import { hrisPatchHrisEmployee } from "../funcs/hrisPatchHrisEmployee.js";
import { hrisPatchHrisGroup } from "../funcs/hrisPatchHrisGroup.js";
import { hrisPatchHrisTimeshift } from "../funcs/hrisPatchHrisTimeshift.js";
import { hrisRemoveHrisDevice } from "../funcs/hrisRemoveHrisDevice.js";
import { hrisRemoveHrisEmployee } from "../funcs/hrisRemoveHrisEmployee.js";
import { hrisRemoveHrisGroup } from "../funcs/hrisRemoveHrisGroup.js";
import { hrisRemoveHrisTimeshift } from "../funcs/hrisRemoveHrisTimeshift.js";
import { hrisUpdateHrisDevice } from "../funcs/hrisUpdateHrisDevice.js";
import { hrisUpdateHrisEmployee } from "../funcs/hrisUpdateHrisEmployee.js";
import { hrisUpdateHrisGroup } from "../funcs/hrisUpdateHrisGroup.js";
import { hrisUpdateHrisTimeshift } from "../funcs/hrisUpdateHrisTimeshift.js";
import { locationCreateHrisLocation } from "../funcs/locationCreateHrisLocation.js";
import { locationGetHrisLocation } from "../funcs/locationGetHrisLocation.js";
import { locationListHrisLocations } from "../funcs/locationListHrisLocations.js";
import { locationPatchHrisLocation } from "../funcs/locationPatchHrisLocation.js";
import { locationRemoveHrisLocation } from "../funcs/locationRemoveHrisLocation.js";
import { locationUpdateHrisLocation } from "../funcs/locationUpdateHrisLocation.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Hris extends ClientSDK {
  /**
   * Create a company
   */
  async createHrisCompany(
    request: operations.CreateHrisCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisCompany> {
    return unwrapAsync(companyCreateHrisCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a device
   */
  async createHrisDevice(
    request: operations.CreateHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisDevice> {
    return unwrapAsync(hrisCreateHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an employee
   */
  async createHrisEmployee(
    request: operations.CreateHrisEmployeeRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisEmployee> {
    return unwrapAsync(hrisCreateHrisEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a group
   */
  async createHrisGroup(
    request: operations.CreateHrisGroupRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisGroup> {
    return unwrapAsync(hrisCreateHrisGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a location
   */
  async createHrisLocation(
    request: operations.CreateHrisLocationRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisLocation> {
    return unwrapAsync(locationCreateHrisLocation(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a timeshift
   */
  async createHrisTimeshift(
    request: operations.CreateHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeshift> {
    return unwrapAsync(hrisCreateHrisTimeshift(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a company
   */
  async getHrisCompany(
    request: operations.GetHrisCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisCompany> {
    return unwrapAsync(companyGetHrisCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a device
   */
  async getHrisDevice(
    request: operations.GetHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisDevice> {
    return unwrapAsync(hrisGetHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an employee
   */
  async getHrisEmployee(
    request: operations.GetHrisEmployeeRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisEmployee> {
    return unwrapAsync(hrisGetHrisEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a group
   */
  async getHrisGroup(
    request: operations.GetHrisGroupRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisGroup> {
    return unwrapAsync(hrisGetHrisGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a location
   */
  async getHrisLocation(
    request: operations.GetHrisLocationRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisLocation> {
    return unwrapAsync(locationGetHrisLocation(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a payslip
   */
  async getHrisPayslip(
    request: operations.GetHrisPayslipRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisPayslip> {
    return unwrapAsync(hrisGetHrisPayslip(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a timeoff
   */
  async getHrisTimeoff(
    request: operations.GetHrisTimeoffRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeoff> {
    return unwrapAsync(hrisGetHrisTimeoff(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a timeshift
   */
  async getHrisTimeshift(
    request: operations.GetHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeshift> {
    return unwrapAsync(hrisGetHrisTimeshift(
      this,
      request,
      options,
    ));
  }

  /**
   * List all companies
   */
  async listHrisCompanies(
    request: operations.ListHrisCompaniesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisCompany>> {
    return unwrapAsync(companyListHrisCompanies(
      this,
      request,
      options,
    ));
  }

  /**
   * List all devices
   */
  async listHrisDevices(
    request: operations.ListHrisDevicesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisDevice>> {
    return unwrapAsync(hrisListHrisDevices(
      this,
      request,
      options,
    ));
  }

  /**
   * List all employees
   */
  async listHrisEmployees(
    request: operations.ListHrisEmployeesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisEmployee>> {
    return unwrapAsync(hrisListHrisEmployees(
      this,
      request,
      options,
    ));
  }

  /**
   * List all groups
   */
  async listHrisGroups(
    request: operations.ListHrisGroupsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisGroup>> {
    return unwrapAsync(hrisListHrisGroups(
      this,
      request,
      options,
    ));
  }

  /**
   * List all locations
   */
  async listHrisLocations(
    request: operations.ListHrisLocationsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisLocation>> {
    return unwrapAsync(locationListHrisLocations(
      this,
      request,
      options,
    ));
  }

  /**
   * List all payslips
   */
  async listHrisPayslips(
    request: operations.ListHrisPayslipsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisPayslip>> {
    return unwrapAsync(hrisListHrisPayslips(
      this,
      request,
      options,
    ));
  }

  /**
   * List all timeoffs
   */
  async listHrisTimeoffs(
    request: operations.ListHrisTimeoffsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisTimeoff>> {
    return unwrapAsync(hrisListHrisTimeoffs(
      this,
      request,
      options,
    ));
  }

  /**
   * List all timeshifts
   */
  async listHrisTimeshifts(
    request: operations.ListHrisTimeshiftsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.HrisTimeshift>> {
    return unwrapAsync(hrisListHrisTimeshifts(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a company
   */
  async patchHrisCompany(
    request: operations.PatchHrisCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisCompany> {
    return unwrapAsync(companyPatchHrisCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a device
   */
  async patchHrisDevice(
    request: operations.PatchHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisDevice> {
    return unwrapAsync(hrisPatchHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an employee
   */
  async patchHrisEmployee(
    request: operations.PatchHrisEmployeeRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisEmployee> {
    return unwrapAsync(hrisPatchHrisEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a group
   */
  async patchHrisGroup(
    request: operations.PatchHrisGroupRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisGroup> {
    return unwrapAsync(hrisPatchHrisGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a location
   */
  async patchHrisLocation(
    request: operations.PatchHrisLocationRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisLocation> {
    return unwrapAsync(locationPatchHrisLocation(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a timeshift
   */
  async patchHrisTimeshift(
    request: operations.PatchHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeshift> {
    return unwrapAsync(hrisPatchHrisTimeshift(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a company
   */
  async removeHrisCompany(
    request: operations.RemoveHrisCompanyRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveHrisCompanyResponse | undefined> {
    return unwrapAsync(companyRemoveHrisCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a device
   */
  async removeHrisDevice(
    request: operations.RemoveHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveHrisDeviceResponse | undefined> {
    return unwrapAsync(hrisRemoveHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an employee
   */
  async removeHrisEmployee(
    request: operations.RemoveHrisEmployeeRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveHrisEmployeeResponse | undefined> {
    return unwrapAsync(hrisRemoveHrisEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a group
   */
  async removeHrisGroup(
    request: operations.RemoveHrisGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveHrisGroupResponse | undefined> {
    return unwrapAsync(hrisRemoveHrisGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a location
   */
  async removeHrisLocation(
    request: operations.RemoveHrisLocationRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveHrisLocationResponse | undefined> {
    return unwrapAsync(locationRemoveHrisLocation(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a timeshift
   */
  async removeHrisTimeshift(
    request: operations.RemoveHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveHrisTimeshiftResponse | undefined> {
    return unwrapAsync(hrisRemoveHrisTimeshift(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a company
   */
  async updateHrisCompany(
    request: operations.UpdateHrisCompanyRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisCompany> {
    return unwrapAsync(companyUpdateHrisCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a device
   */
  async updateHrisDevice(
    request: operations.UpdateHrisDeviceRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisDevice> {
    return unwrapAsync(hrisUpdateHrisDevice(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an employee
   */
  async updateHrisEmployee(
    request: operations.UpdateHrisEmployeeRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisEmployee> {
    return unwrapAsync(hrisUpdateHrisEmployee(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a group
   */
  async updateHrisGroup(
    request: operations.UpdateHrisGroupRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisGroup> {
    return unwrapAsync(hrisUpdateHrisGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a location
   */
  async updateHrisLocation(
    request: operations.UpdateHrisLocationRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisLocation> {
    return unwrapAsync(locationUpdateHrisLocation(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a timeshift
   */
  async updateHrisTimeshift(
    request: operations.UpdateHrisTimeshiftRequest,
    options?: RequestOptions,
  ): Promise<shared.HrisTimeshift> {
    return unwrapAsync(hrisUpdateHrisTimeshift(
      this,
      request,
      options,
    ));
  }
}
