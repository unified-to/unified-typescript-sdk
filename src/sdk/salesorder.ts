/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingCreateAccountingSalesorder } from "../funcs/accountingCreateAccountingSalesorder.js";
import { accountingGetAccountingSalesorder } from "../funcs/accountingGetAccountingSalesorder.js";
import { accountingListAccountingSalesorders } from "../funcs/accountingListAccountingSalesorders.js";
import { accountingPatchAccountingSalesorder } from "../funcs/accountingPatchAccountingSalesorder.js";
import { accountingRemoveAccountingSalesorder } from "../funcs/accountingRemoveAccountingSalesorder.js";
import { accountingUpdateAccountingSalesorder } from "../funcs/accountingUpdateAccountingSalesorder.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Salesorder extends ClientSDK {
  /**
   * Create a salesorder
   */
  async createAccountingSalesorder(
    request: operations.CreateAccountingSalesorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingSalesorder> {
    return unwrapAsync(accountingCreateAccountingSalesorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a salesorder
   */
  async getAccountingSalesorder(
    request: operations.GetAccountingSalesorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingSalesorder> {
    return unwrapAsync(accountingGetAccountingSalesorder(
      this,
      request,
      options,
    ));
  }

  /**
   * List all salesorders
   */
  async listAccountingSalesorders(
    request: operations.ListAccountingSalesordersRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AccountingSalesorder>> {
    return unwrapAsync(accountingListAccountingSalesorders(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a salesorder
   */
  async patchAccountingSalesorder(
    request: operations.PatchAccountingSalesorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingSalesorder> {
    return unwrapAsync(accountingPatchAccountingSalesorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a salesorder
   */
  async removeAccountingSalesorder(
    request: operations.RemoveAccountingSalesorderRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAccountingSalesorderResponse | undefined> {
    return unwrapAsync(accountingRemoveAccountingSalesorder(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a salesorder
   */
  async updateAccountingSalesorder(
    request: operations.UpdateAccountingSalesorderRequest,
    options?: RequestOptions,
  ): Promise<shared.AccountingSalesorder> {
    return unwrapAsync(accountingUpdateAccountingSalesorder(
      this,
      request,
      options,
    ));
  }
}
