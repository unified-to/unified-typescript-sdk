/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { pageCreateKmsPage } from "../funcs/pageCreateKmsPage.js";
import { pageGetKmsPage } from "../funcs/pageGetKmsPage.js";
import { pageListKmsPages } from "../funcs/pageListKmsPages.js";
import { pagePatchKmsPage } from "../funcs/pagePatchKmsPage.js";
import { pageRemoveKmsPage } from "../funcs/pageRemoveKmsPage.js";
import { pageUpdateKmsPage } from "../funcs/pageUpdateKmsPage.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Page extends ClientSDK {
    /**
     * Create a page
     */
    async createKmsPage(
        request: operations.CreateKmsPageRequest,
        options?: RequestOptions
    ): Promise<shared.KmsPage> {
        return unwrapAsync(pageCreateKmsPage(this, request, options));
    }

    /**
     * Retrieve a page
     */
    async getKmsPage(
        request: operations.GetKmsPageRequest,
        options?: RequestOptions
    ): Promise<shared.KmsPage> {
        return unwrapAsync(pageGetKmsPage(this, request, options));
    }

    /**
     * List all pages
     */
    async listKmsPages(
        request: operations.ListKmsPagesRequest,
        options?: RequestOptions
    ): Promise<Array<shared.KmsPage>> {
        return unwrapAsync(pageListKmsPages(this, request, options));
    }

    /**
     * Update a page
     */
    async patchKmsPage(
        request: operations.PatchKmsPageRequest,
        options?: RequestOptions
    ): Promise<shared.KmsPage> {
        return unwrapAsync(pagePatchKmsPage(this, request, options));
    }

    /**
     * Remove a page
     */
    async removeKmsPage(
        request: operations.RemoveKmsPageRequest,
        options?: RequestOptions
    ): Promise<string> {
        return unwrapAsync(pageRemoveKmsPage(this, request, options));
    }

    /**
     * Update a page
     */
    async updateKmsPage(
        request: operations.UpdateKmsPageRequest,
        options?: RequestOptions
    ): Promise<shared.KmsPage> {
        return unwrapAsync(pageUpdateKmsPage(this, request, options));
    }
}
