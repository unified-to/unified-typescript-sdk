/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { kmsCreateKmsPage } from "../funcs/kmsCreateKmsPage.js";
import { kmsGetKmsPage } from "../funcs/kmsGetKmsPage.js";
import { kmsListKmsPages } from "../funcs/kmsListKmsPages.js";
import { kmsPatchKmsPage } from "../funcs/kmsPatchKmsPage.js";
import { kmsRemoveKmsPage } from "../funcs/kmsRemoveKmsPage.js";
import { kmsUpdateKmsPage } from "../funcs/kmsUpdateKmsPage.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Page extends ClientSDK {
  /**
   * Create a page
   */
  async createKmsPage(
    request: operations.CreateKmsPageRequest,
    options?: RequestOptions,
  ): Promise<shared.KmsPage> {
    return unwrapAsync(kmsCreateKmsPage(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a page
   */
  async getKmsPage(
    request: operations.GetKmsPageRequest,
    options?: RequestOptions,
  ): Promise<shared.KmsPage> {
    return unwrapAsync(kmsGetKmsPage(
      this,
      request,
      options,
    ));
  }

  /**
   * List all pages
   */
  async listKmsPages(
    request: operations.ListKmsPagesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.KmsPage>> {
    return unwrapAsync(kmsListKmsPages(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a page
   */
  async patchKmsPage(
    request: operations.PatchKmsPageRequest,
    options?: RequestOptions,
  ): Promise<shared.KmsPage> {
    return unwrapAsync(kmsPatchKmsPage(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a page
   */
  async removeKmsPage(
    request: operations.RemoveKmsPageRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveKmsPageResponse | undefined> {
    return unwrapAsync(kmsRemoveKmsPage(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a page
   */
  async updateKmsPage(
    request: operations.UpdateKmsPageRequest,
    options?: RequestOptions,
  ): Promise<shared.KmsPage> {
    return unwrapAsync(kmsUpdateKmsPage(
      this,
      request,
      options,
    ));
  }
}
