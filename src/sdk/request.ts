/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { verificationCreateVerificationRequest } from "../funcs/verificationCreateVerificationRequest.js";
import { verificationGetVerificationRequest } from "../funcs/verificationGetVerificationRequest.js";
import { verificationListVerificationRequests } from "../funcs/verificationListVerificationRequests.js";
import { verificationPatchVerificationRequest } from "../funcs/verificationPatchVerificationRequest.js";
import { verificationRemoveVerificationRequest } from "../funcs/verificationRemoveVerificationRequest.js";
import { verificationUpdateVerificationRequest } from "../funcs/verificationUpdateVerificationRequest.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class RequestT extends ClientSDK {
  /**
   * Create a request
   */
  async createVerificationRequest(
    request: operations.CreateVerificationRequestRequest,
    options?: RequestOptions,
  ): Promise<shared.VerificationRequest> {
    return unwrapAsync(verificationCreateVerificationRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a request
   */
  async getVerificationRequest(
    request: operations.GetVerificationRequestRequest,
    options?: RequestOptions,
  ): Promise<shared.VerificationRequest> {
    return unwrapAsync(verificationGetVerificationRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * List all requests
   */
  async listVerificationRequests(
    request: operations.ListVerificationRequestsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.VerificationRequest>> {
    return unwrapAsync(verificationListVerificationRequests(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a request
   */
  async patchVerificationRequest(
    request: operations.PatchVerificationRequestRequest,
    options?: RequestOptions,
  ): Promise<shared.VerificationRequest> {
    return unwrapAsync(verificationPatchVerificationRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a request
   */
  async removeVerificationRequest(
    request: operations.RemoveVerificationRequestRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveVerificationRequestResponse | undefined> {
    return unwrapAsync(verificationRemoveVerificationRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a request
   */
  async updateVerificationRequest(
    request: operations.UpdateVerificationRequestRequest,
    options?: RequestOptions,
  ): Promise<shared.VerificationRequest> {
    return unwrapAsync(verificationUpdateVerificationRequest(
      this,
      request,
      options,
    ));
  }
}
