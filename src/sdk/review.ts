/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { reviewCreateCommerceReview } from "../funcs/reviewCreateCommerceReview.js";
import { reviewGetCommerceReview } from "../funcs/reviewGetCommerceReview.js";
import { reviewListCommerceReviews } from "../funcs/reviewListCommerceReviews.js";
import { reviewPatchCommerceReview } from "../funcs/reviewPatchCommerceReview.js";
import { reviewRemoveCommerceReview } from "../funcs/reviewRemoveCommerceReview.js";
import { reviewUpdateCommerceReview } from "../funcs/reviewUpdateCommerceReview.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Review extends ClientSDK {
  /**
   * Create a review
   */
  async createCommerceReview(
    request: operations.CreateCommerceReviewRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceReview> {
    return unwrapAsync(reviewCreateCommerceReview(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a review
   */
  async getCommerceReview(
    request: operations.GetCommerceReviewRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceReview> {
    return unwrapAsync(reviewGetCommerceReview(
      this,
      request,
      options,
    ));
  }

  /**
   * List all reviews
   */
  async listCommerceReviews(
    request: operations.ListCommerceReviewsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.CommerceReview>> {
    return unwrapAsync(reviewListCommerceReviews(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a review
   */
  async patchCommerceReview(
    request: operations.PatchCommerceReviewRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceReview> {
    return unwrapAsync(reviewPatchCommerceReview(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a review
   */
  async removeCommerceReview(
    request: operations.RemoveCommerceReviewRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveCommerceReviewResponse | undefined> {
    return unwrapAsync(reviewRemoveCommerceReview(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a review
   */
  async updateCommerceReview(
    request: operations.UpdateCommerceReviewRequest,
    options?: RequestOptions,
  ): Promise<shared.CommerceReview> {
    return unwrapAsync(reviewUpdateCommerceReview(
      this,
      request,
      options,
    ));
  }
}
