/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atsCreateAtsInterview } from "../funcs/atsCreateAtsInterview.js";
import { atsGetAtsInterview } from "../funcs/atsGetAtsInterview.js";
import { atsListAtsInterviews } from "../funcs/atsListAtsInterviews.js";
import { atsPatchAtsInterview } from "../funcs/atsPatchAtsInterview.js";
import { atsRemoveAtsInterview } from "../funcs/atsRemoveAtsInterview.js";
import { atsUpdateAtsInterview } from "../funcs/atsUpdateAtsInterview.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Interview extends ClientSDK {
  /**
   * Create an interview
   */
  async createAtsInterview(
    request: operations.CreateAtsInterviewRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsInterview> {
    return unwrapAsync(atsCreateAtsInterview(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve an interview
   */
  async getAtsInterview(
    request: operations.GetAtsInterviewRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsInterview> {
    return unwrapAsync(atsGetAtsInterview(
      this,
      request,
      options,
    ));
  }

  /**
   * List all interviews
   */
  async listAtsInterviews(
    request: operations.ListAtsInterviewsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AtsInterview>> {
    return unwrapAsync(atsListAtsInterviews(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an interview
   */
  async patchAtsInterview(
    request: operations.PatchAtsInterviewRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsInterview> {
    return unwrapAsync(atsPatchAtsInterview(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove an interview
   */
  async removeAtsInterview(
    request: operations.RemoveAtsInterviewRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAtsInterviewResponse | undefined> {
    return unwrapAsync(atsRemoveAtsInterview(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an interview
   */
  async updateAtsInterview(
    request: operations.UpdateAtsInterviewRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsInterview> {
    return unwrapAsync(atsUpdateAtsInterview(
      this,
      request,
      options,
    ));
  }
}
