/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atsCreateAtsScorecard } from "../funcs/atsCreateAtsScorecard.js";
import { atsGetAtsScorecard } from "../funcs/atsGetAtsScorecard.js";
import { atsListAtsScorecards } from "../funcs/atsListAtsScorecards.js";
import { atsPatchAtsScorecard } from "../funcs/atsPatchAtsScorecard.js";
import { atsRemoveAtsScorecard } from "../funcs/atsRemoveAtsScorecard.js";
import { atsUpdateAtsScorecard } from "../funcs/atsUpdateAtsScorecard.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Scorecard extends ClientSDK {
  /**
   * Create a scorecard
   */
  async createAtsScorecard(
    request: operations.CreateAtsScorecardRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsScorecard> {
    return unwrapAsync(atsCreateAtsScorecard(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a scorecard
   */
  async getAtsScorecard(
    request: operations.GetAtsScorecardRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsScorecard> {
    return unwrapAsync(atsGetAtsScorecard(
      this,
      request,
      options,
    ));
  }

  /**
   * List all scorecards
   */
  async listAtsScorecards(
    request: operations.ListAtsScorecardsRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AtsScorecard>> {
    return unwrapAsync(atsListAtsScorecards(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a scorecard
   */
  async patchAtsScorecard(
    request: operations.PatchAtsScorecardRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsScorecard> {
    return unwrapAsync(atsPatchAtsScorecard(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a scorecard
   */
  async removeAtsScorecard(
    request: operations.RemoveAtsScorecardRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAtsScorecardResponse | undefined> {
    return unwrapAsync(atsRemoveAtsScorecard(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a scorecard
   */
  async updateAtsScorecard(
    request: operations.UpdateAtsScorecardRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsScorecard> {
    return unwrapAsync(atsUpdateAtsScorecard(
      this,
      request,
      options,
    ));
  }
}
