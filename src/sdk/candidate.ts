/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atsCreateAtsCandidate } from "../funcs/atsCreateAtsCandidate.js";
import { atsGetAtsCandidate } from "../funcs/atsGetAtsCandidate.js";
import { atsListAtsCandidates } from "../funcs/atsListAtsCandidates.js";
import { atsPatchAtsCandidate } from "../funcs/atsPatchAtsCandidate.js";
import { atsRemoveAtsCandidate } from "../funcs/atsRemoveAtsCandidate.js";
import { atsUpdateAtsCandidate } from "../funcs/atsUpdateAtsCandidate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Candidate extends ClientSDK {
  /**
   * Create a candidate
   */
  async createAtsCandidate(
    request: operations.CreateAtsCandidateRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsCandidate> {
    return unwrapAsync(atsCreateAtsCandidate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a candidate
   */
  async getAtsCandidate(
    request: operations.GetAtsCandidateRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsCandidate> {
    return unwrapAsync(atsGetAtsCandidate(
      this,
      request,
      options,
    ));
  }

  /**
   * List all candidates
   */
  async listAtsCandidates(
    request: operations.ListAtsCandidatesRequest,
    options?: RequestOptions,
  ): Promise<Array<shared.AtsCandidate>> {
    return unwrapAsync(atsListAtsCandidates(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a candidate
   */
  async patchAtsCandidate(
    request: operations.PatchAtsCandidateRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsCandidate> {
    return unwrapAsync(atsPatchAtsCandidate(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a candidate
   */
  async removeAtsCandidate(
    request: operations.RemoveAtsCandidateRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveAtsCandidateResponse | undefined> {
    return unwrapAsync(atsRemoveAtsCandidate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a candidate
   */
  async updateAtsCandidate(
    request: operations.UpdateAtsCandidateRequest,
    options?: RequestOptions,
  ): Promise<shared.AtsCandidate> {
    return unwrapAsync(atsUpdateAtsCandidate(
      this,
      request,
      options,
    ));
  }
}
